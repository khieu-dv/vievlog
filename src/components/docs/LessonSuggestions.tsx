// ~/components/docs/LessonSuggestions.tsx
'use client';

import Link from 'next/link';

interface LessonSuggestionsProps {
  currentLesson: number; // 0-N, where 0 is intro lesson
  basePath?: string; // e.g., "/desktop-docs/soft-skills/rust"
  courseData?: LessonInfo[]; // Custom course data
  totalLessons?: number; // Total number of lessons in course
}

interface LessonInfo {
  id: number;
  title: string;
  description: string;
  emoji: string;
  difficulty: 'beginner' | 'intermediate' | 'advanced';
}

// Default Rust course data
const defaultRustLessons: LessonInfo[] = [
  { id: 0, title: "Gi·ªõi thi·ªáu kh√≥a h·ªçc", description: "T·ªïng quan v√† l·ªô tr√¨nh h·ªçc Rust", emoji: "ü¶Ä", difficulty: 'beginner' },
  { id: 1, title: "Gi·ªõi thi·ªáu & C√†i ƒë·∫∑t", description: "Setup m√¥i tr∆∞·ªùng v√† Hello World", emoji: "üîß", difficulty: 'beginner' },
  { id: 2, title: "C√∫ ph√°p c∆° b·∫£n", description: "Variables, constants v√† mutability", emoji: "üìù", difficulty: 'beginner' },
  { id: 3, title: "Ki·ªÉu d·ªØ li·ªáu", description: "Scalar v√† compound types", emoji: "üî¢", difficulty: 'beginner' },
  { id: 4, title: "Control Flow", description: "Functions, loops v√† conditions", emoji: "üîÑ", difficulty: 'beginner' },
  { id: 5, title: "Strings & Collections", description: "String, Vec v√† HashMap", emoji: "üìö", difficulty: 'intermediate' },
  { id: 6, title: "Structs & Enums", description: "Custom types v√† methods", emoji: "üèóÔ∏è", difficulty: 'intermediate' },
  { id: 7, title: "Pattern Matching", description: "match, if let v√† while let", emoji: "üéØ", difficulty: 'intermediate' },
  { id: 8, title: "Ownership System", description: "Memory safety v√† move semantics", emoji: "üîí", difficulty: 'advanced' },
  { id: 9, title: "Borrowing", description: "References v√† borrowing rules", emoji: "üîó", difficulty: 'advanced' },
  { id: 10, title: "Error Handling", description: "Result, Option v√† panic", emoji: "‚ö†Ô∏è", difficulty: 'intermediate' },
  { id: 11, title: "Modules", description: "Project organization", emoji: "üì¶", difficulty: 'intermediate' },
  { id: 12, title: "Traits", description: "Shared behavior", emoji: "üé≠", difficulty: 'advanced' },
  { id: 13, title: "Generics", description: "Generic programming", emoji: "üîß", difficulty: 'advanced' },
  { id: 14, title: "Lifetimes", description: "Memory lifetimes", emoji: "‚è∞", difficulty: 'advanced' },
  { id: 15, title: "Collections", description: "Iterators v√† closures", emoji: "üîÑ", difficulty: 'advanced' },
  { id: 16, title: "Async Programming", description: "Concurrent programming", emoji: "‚ö°", difficulty: 'advanced' },
  { id: 17, title: "Macros & Testing", description: "Code generation", emoji: "üß™", difficulty: 'advanced' },
  { id: 18, title: "Web Development", description: "REST APIs", emoji: "üåê", difficulty: 'advanced' },
];

// Generic lesson data for other courses
const getGenericLessonData = (totalLessons: number): LessonInfo[] => {
  const lessons: LessonInfo[] = [
    { id: 0, title: "Gi·ªõi thi·ªáu kh√≥a h·ªçc", description: "T·ªïng quan v√† l·ªô tr√¨nh h·ªçc", emoji: "üìö", difficulty: 'beginner' }
  ];

  for (let i = 1; i <= totalLessons; i++) {
    lessons.push({
      id: i,
      title: `B√†i ${i}`,
      description: `N·ªôi dung b√†i h·ªçc ${i}`,
      emoji: "üìñ",
      difficulty: i <= 6 ? 'beginner' : i <= 12 ? 'intermediate' : 'advanced'
    });
  }

  return lessons;
};

const getSuggestions = (currentLesson: number, lessonData: LessonInfo[], totalLessons: number): LessonInfo[] => {
  const suggestions: LessonInfo[] = [];

  // Lu√¥n th√™m b√†i 0 ƒë·∫ßu ti√™n (tr·ª´ khi ƒëang ·ªü b√†i 0)
  if (currentLesson !== 0 && lessonData[0]) {
    suggestions.push(lessonData[0]);
  }

  if (currentLesson === 0) {
    // B√†i 0: g·ª£i √Ω 4 b√†i ƒë·∫ßu ti√™n
    const nextLessons = Math.min(4, totalLessons);
    suggestions.push(...lessonData.slice(1, nextLessons + 1));
  } else {
    // Th√™m b√†i tr∆∞·ªõc (n·∫øu c√≥)
    if (currentLesson > 1 && lessonData[currentLesson - 1]) {
      suggestions.push(lessonData[currentLesson - 1]);
    }

    // Th√™m b√†i ti·∫øp theo (n·∫øu c√≥)
    if (currentLesson < totalLessons && lessonData[currentLesson + 1]) {
      suggestions.push(lessonData[currentLesson + 1]);
    }

    // Th√™m b√†i th·ª© 2 sau b√†i hi·ªán t·∫°i (n·∫øu c√≥)
    if (currentLesson + 2 <= totalLessons && lessonData[currentLesson + 2]) {
      suggestions.push(lessonData[currentLesson + 2]);
    }

    // N·∫øu ch∆∞a ƒë·ªß 4 g·ª£i √Ω, th√™m b√†i 1 (n·∫øu kh√¥ng ph·∫£i ƒëang ·ªü b√†i 1)
    if (suggestions.length < 4 && currentLesson !== 1 && lessonData[1]) {
      suggestions.push(lessonData[1]);
    }
  }

  return suggestions.slice(0, 4);
};

const getDifficultyColor = (difficulty: string) => {
  switch (difficulty) {
    case 'beginner': return 'bg-green-100 text-green-700 border-green-200';
    case 'intermediate': return 'bg-blue-100 text-blue-700 border-blue-200';
    case 'advanced': return 'bg-purple-100 text-purple-700 border-purple-200';
    default: return 'bg-gray-100 text-gray-700 border-gray-200';
  }
};

const getDifficultyLabel = (difficulty: string) => {
  switch (difficulty) {
    case 'beginner': return 'C∆° b·∫£n';
    case 'intermediate': return 'Trung b√¨nh';
    case 'advanced': return 'N√¢ng cao';
    default: return 'Kh√°c';
  }
};

export default function LessonSuggestions({
  currentLesson,
  basePath = "/desktop-docs/soft-skills/rust",
  courseData,
  totalLessons = 18
}: LessonSuggestionsProps) {
  // Determine which lesson data to use
  const lessonData = courseData || (basePath.includes('rust') ? defaultRustLessons : getGenericLessonData(totalLessons));

  // Calculate actual total lessons if not provided
  const actualTotalLessons = totalLessons || Math.max(0, lessonData.length - 1);

  const suggestions = getSuggestions(currentLesson, lessonData, actualTotalLessons);

  if (suggestions.length === 0) return null;

  return (
    <div className="mt-12 border-t pt-8">
      <h3 className="text-xl font-semibold mb-6 flex items-center gap-2">
        üí° B√†i h·ªçc li√™n quan
      </h3>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {suggestions.map((lesson) => (
          <Link
            key={lesson.id}
            href={`${basePath}/bai-${lesson.id}`}
            className="group block p-5 bg-white border border-gray-200 rounded-xl shadow-sm hover:shadow-md hover:border-gray-300 transition-all duration-200"
          >
            <div className="flex items-start gap-4">
              <div className="text-2xl">{lesson.emoji}</div>
              <div className="flex-1 min-w-0">
                <div className="flex items-center gap-2 mb-2">
                  <span className="text-sm font-medium text-gray-500">
                    B√†i {lesson.id}
                  </span>
                  <span className={`px-2 py-1 text-xs font-medium rounded-full border ${getDifficultyColor(lesson.difficulty)}`}>
                    {getDifficultyLabel(lesson.difficulty)}
                  </span>
                </div>
                <h4 className="font-semibold text-gray-900 mb-1 group-hover:text-blue-600 transition-colors">
                  {lesson.title}
                </h4>
                <p className="text-sm text-gray-600 line-clamp-2">
                  {lesson.description}
                </p>
                <div className="mt-3 flex items-center text-blue-600 text-sm font-medium">
                  <span className="group-hover:translate-x-1 transition-transform">
                    H·ªçc ngay ‚Üí
                  </span>
                </div>
              </div>
            </div>
          </Link>
        ))}
      </div>

      {/* Quick Navigation */}
      <div className="mt-8 p-4 bg-gray-50 rounded-lg">
        <div className="flex items-center justify-between">
          <span className="text-sm text-gray-600">ƒêi·ªÅu h∆∞·ªõng nhanh:</span>
          <div className="flex gap-2">
            {currentLesson > 0 && (
              <Link
                href={`${basePath}/bai-${currentLesson - 1}`}
                className="px-3 py-1 bg-white border border-gray-200 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-100 transition-colors"
              >
                ‚Üê B√†i tr∆∞·ªõc
              </Link>
            )}
            {currentLesson < 18 && (
              <Link
                href={`${basePath}/bai-${currentLesson + 1}`}
                className="px-3 py-1 bg-blue-600 text-white rounded-md text-sm font-medium hover:bg-blue-700 transition-colors"
              >
                B√†i ti·∫øp theo ‚Üí
              </Link>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}