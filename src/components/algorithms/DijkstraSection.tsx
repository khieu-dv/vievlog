"use client";

import { useState, useEffect } from "react";
import { Route } from "lucide-react";
import { MermaidDiagram } from "~/components/common/MermaidDiagram";
import { RustCodeEditor } from "~/components/common/RustCodeEditor";
import { CppCodeEditor } from "~/components/common/CppCodeEditor";
import { PythonCodeEditor } from "~/components/common/PythonCodeEditor";
import { initRustWasm } from "~/lib/rust-wasm-helper";

interface Edge {
  from: number;
  to: number;
  weight: number;
}

interface DijkstraResult {
  distances: number[];
  previous: (number | null)[];
  visited: boolean[];
  path: number[];
}

export function DijkstraSection() {
  const [rustGraph, setRustGraph] = useState<any>(null);
  const [wasmReady, setWasmReady] = useState(false);
  const [nodes, setNodes] = useState(5);
  const [edgesDisplay, setEdgesDisplay] = useState<Edge[]>([
    { from: 0, to: 1, weight: 4 },
    { from: 0, to: 2, weight: 2 },
    { from: 1, to: 2, weight: 1 },
    { from: 1, to: 3, weight: 5 },
    { from: 2, to: 3, weight: 8 },
    { from: 2, to: 4, weight: 10 },
    { from: 3, to: 4, weight: 2 },
  ]);
  const [startNode, setStartNode] = useState(0);
  const [endNode, setEndNode] = useState(4);
  const [result, setResult] = useState("");
  const [pathResult, setPathResult] = useState<number[]>([]);
  const [distanceResult, setDistanceResult] = useState<number[]>([]);
  const [newEdge, setNewEdge] = useState({ from: 0, to: 1, weight: 1 });
  const [wasm, setWasm] = useState<any>(null);
  const [activeLanguageTab, setActiveLanguageTab] = useState("rust");

  // Initialize WASM
  useEffect(() => {
    async function init() {
      try {
        const wasmInstance = await initRustWasm();
        const newGraph = wasmInstance.dataStructures.createWeightedGraph(true);

        // Initialize with default edges
        edgesDisplay.forEach(edge => {
          newGraph.add_edge(edge.from, edge.to, edge.weight);
        });

        setRustGraph(newGraph);
        setWasm(wasmInstance);
        setWasmReady(true);
        setResult("‚úÖ Rust WASM Dijkstra Algorithm ƒë√£ s·∫µn s√†ng!");
      } catch (error) {
        console.error("Failed to initialize WASM:", error);
        setResult("‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o Rust WASM");
      }
    }
    init();
  }, []);

  // Update display from Rust graph
  const updateDisplayFromRustGraph = () => {
    if (rustGraph) {
      try {
        const edges = Array.from(rustGraph.get_edges()) as Edge[];
        setEdgesDisplay(edges);
      } catch (error) {
        console.error("Error updating display:", error);
      }
    }
  };

  const addEdge = () => {
    if (newEdge.from >= 0 && newEdge.from < nodes &&
        newEdge.to >= 0 && newEdge.to < nodes &&
        newEdge.from !== newEdge.to &&
        newEdge.weight > 0) {

      if (wasmReady && rustGraph) {
        try {
          rustGraph.add_edge(newEdge.from, newEdge.to, newEdge.weight);
          const edges = Array.from(rustGraph.get_edges());
          const edgeCount = edges.length;
          setResult(`ü¶Ä ƒê√£ th√™m c·∫°nh t·ª´ ${newEdge.from} ƒë·∫øn ${newEdge.to} (tr·ªçng s·ªë ${newEdge.weight}). T·ªïng c·∫°nh: ${edgeCount}`);
          updateDisplayFromRustGraph();
        } catch (error) {
          setResult("‚ùå Rust WASM addEdge failed: " + error);
        }
      } else {
        setResult("‚ùå WASM ch∆∞a s·∫µn s√†ng");
      }
    }
  };

  const removeEdge = (index: number) => {
    const edgeToRemove = edgesDisplay[index];
    if (wasmReady && rustGraph && edgeToRemove) {
      try {
        // WeightedGraph doesn't have remove_edge method, need to rebuild
        const newGraph = wasm.dataStructures.createWeightedGraph(true);
        const updatedEdges = edgesDisplay.filter((_, i) => i !== index);
        updatedEdges.forEach(edge => {
          newGraph.add_edge(edge.from, edge.to, edge.weight);
        });
        setRustGraph(newGraph);
        setEdgesDisplay(updatedEdges);
        const edges = Array.from(rustGraph.get_edges());
        const edgeCount = edges.length;
        setResult(`ü¶Ä ƒê√£ x√≥a c·∫°nh t·ª´ ${edgeToRemove.from} ƒë·∫øn ${edgeToRemove.to}. T·ªïng c·∫°nh: ${edgeCount}`);
        updateDisplayFromRustGraph();
      } catch (error) {
        setResult("‚ùå Rust WASM removeEdge failed: " + error);
      }
    } else {
      setResult("‚ùå WASM ch∆∞a s·∫µn s√†ng");
    }
  };

  const dijkstra = () => {
    if (startNode < 0 || startNode >= nodes || endNode < 0 || endNode >= nodes) {
      setResult("‚ùå ƒê·ªânh b·∫Øt ƒë·∫ßu ho·∫∑c k·∫øt th√∫c kh√¥ng h·ª£p l·ªá");
      return;
    }

    if (wasmReady && rustGraph) {
      try {
        // dijkstra() returns distances from start to all vertices
        const dijkstraResult = rustGraph.dijkstra(startNode);
        const distanceArray = Array.from(dijkstraResult) as number[];

        // Use shortest_path_with_weights for getting the actual path
        const pathResult = rustGraph.shortest_path_with_weights(startNode, endNode);
        const path = pathResult.length > 0 ? Array.from(pathResult[0]) as number[] : [];
        const totalDistance = pathResult.length > 1 ? pathResult[1] : Infinity;

        setPathResult(path);
        setDistanceResult(distanceArray);

        if (path.length > 0) {
          setResult(`ü¶Ä ƒê∆∞·ªùng ƒëi ng·∫Øn nh·∫•t t·ª´ ${startNode} ƒë·∫øn ${endNode}: ${path.join(" ‚Üí ")} (t·ªïng kho·∫£ng c√°ch: ${totalDistance})`);
        } else {
          setResult(`ü¶Ä Kh√¥ng c√≥ ƒë∆∞·ªùng ƒëi t·ª´ node ${startNode} ƒë·∫øn node ${endNode}`);
        }
      } catch (error) {
        setResult("‚ùå Rust WASM Dijkstra failed: " + error);
      }
    } else {
      setResult("‚ùå WASM ch∆∞a s·∫µn s√†ng");
    }
  };

  const generateMermaidGraph = () => {
    let mermaidCode = "graph TD\n";

    // Add nodes
    for (let i = 0; i < nodes; i++) {
      const isStart = i === startNode;
      const isEnd = i === endNode;
      const isInPath = pathResult.includes(i) || false;

      let nodeStyle = "";
      if (isStart) nodeStyle = "fill:#4CAF50,color:#fff";
      else if (isEnd) nodeStyle = "fill:#F44336,color:#fff";
      else if (isInPath) nodeStyle = "fill:#FF9800,color:#fff";
      else nodeStyle = "fill:#2196F3,color:#fff";

      mermaidCode += `    ${i}[Node ${i}]\n`;
      mermaidCode += `    style ${i} ${nodeStyle}\n`;
    }

    // Add edges
    edgesDisplay.forEach(edge => {
      const isInPath = pathResult.includes(edge.from) && pathResult.includes(edge.to) &&
                     Math.abs(pathResult.indexOf(edge.from) - pathResult.indexOf(edge.to)) === 1;

      if (isInPath) {
        mermaidCode += `    ${edge.from} -.->|${edge.weight}| ${edge.to}\n`;
        mermaidCode += `    linkStyle ${edgesDisplay.indexOf(edge)} stroke:#FF9800,stroke-width:4px\n`;
      } else {
        mermaidCode += `    ${edge.from} -->|${edge.weight}| ${edge.to}\n`;
      }
    });

    return mermaidCode;
  };

  return (
    <div className="space-y-6">
      <div className="bg-white dark:bg-slate-800 rounded-lg p-6 border">
        <h3 className="text-xl font-semibold mb-4 flex items-center gap-2">
          <Route className="h-5 w-5" />
          ü¶Ä Rust WASM Thu·∫≠t To√°n Dijkstra
        </h3>

        {/* ƒê·ªãnh nghƒ©a v√† gi·∫£i th√≠ch c∆° b·∫£n */}
        <div className="bg-emerald-50 dark:bg-emerald-900/20 p-4 rounded-lg mb-4 border-l-4 border-emerald-500">
          <h4 className="font-semibold text-emerald-800 dark:text-emerald-300 mb-2">üó∫Ô∏è Thu·∫≠t to√°n Dijkstra l√† g√¨?</h4>
          <p className="text-gray-700 dark:text-gray-300 mb-3">
            <strong>Thu·∫≠t to√°n Dijkstra</strong> t√¨m ƒë∆∞·ªùng ƒëi ng·∫Øn nh·∫•t t·ª´ m·ªôt ƒëi·ªÉm xu·∫•t ph√°t ƒë·∫øn t·∫•t c·∫£ c√°c ƒëi·ªÉm kh√°c trong ƒë·ªì th·ªã c√≥ tr·ªçng s·ªë kh√¥ng √¢m.
            ƒê∆∞·ª£c ph√°t minh b·ªüi Edsger Dijkstra nƒÉm 1956.
          </p>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
            <div className="bg-white dark:bg-slate-800 p-3 rounded">
              <strong className="text-blue-600 dark:text-blue-400">üéØ ·ª®ng d·ª•ng th·ª±c t·∫ø:</strong>
              <ul className="mt-1 text-gray-600 dark:text-gray-300">
                <li>‚Ä¢ Google Maps, GPS</li>
                <li>‚Ä¢ ƒê·ªãnh tuy·∫øn m·∫°ng Internet</li>
                <li>‚Ä¢ Game: AI t√¨m ƒë∆∞·ªùng</li>
                <li>‚Ä¢ H·ªá th·ªëng giao th√¥ng</li>
              </ul>
            </div>
            <div className="bg-white dark:bg-slate-800 p-3 rounded">
              <strong className="text-green-600 dark:text-green-400">üí° √ù t∆∞·ªüng ch√≠nh:</strong>
              <ul className="mt-1 text-gray-600 dark:text-gray-300">
                <li>‚Ä¢ B·∫Øt ƒë·∫ßu t·ª´ node g·ªëc</li>
                <li>‚Ä¢ Lu√¥n ch·ªçn node g·∫ßn nh·∫•t</li>
                <li>‚Ä¢ C·∫≠p nh·∫≠t kho·∫£ng c√°ch</li>
                <li>‚Ä¢ L·∫∑p ƒë·∫øn khi ho√†n th√†nh</li>
              </ul>
            </div>
          </div>
        </div>

        <div className="bg-sky-50 dark:bg-sky-900/20 p-4 rounded-lg mb-4 border-l-4 border-sky-500">
          <h4 className="font-semibold text-sky-800 dark:text-sky-300 mb-2">‚öôÔ∏è C√°ch ho·∫°t ƒë·ªông:</h4>
          <div className="text-sm text-gray-700 dark:text-gray-300">
            <span className="font-mono bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded">
              B∆∞·ªõc 1: ƒê·∫∑t kho·∫£ng c√°ch = 0 cho node g·ªëc, ‚àû cho c√°c node kh√°c
            </span>
            <br/>
            <span className="font-mono bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded mt-1 inline-block">
              B∆∞·ªõc 2: Ch·ªçn node ch∆∞a thƒÉm c√≥ kho·∫£ng c√°ch nh·ªè nh·∫•t
            </span>
            <br/>
            <span className="font-mono bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded mt-1 inline-block">
              B∆∞·ªõc 3: C·∫≠p nh·∫≠t kho·∫£ng c√°ch ƒë·∫øn c√°c node l√°ng gi·ªÅng
            </span>
            <br/>
            <span className="font-mono bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded mt-1 inline-block">
              B∆∞·ªõc 4: L·∫∑p cho ƒë·∫øn khi t·∫•t c·∫£ node ƒë∆∞·ª£c thƒÉm
            </span>
          </div>
        </div>

        <div className="space-y-4">
          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">C·∫•u H√¨nh ƒê·ªì Th·ªã:</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium mb-1">S·ªë node:</label>
                <input
                  type="number"
                  value={nodes}
                  onChange={(e) => {
                    const newNodes = parseInt(e.target.value);
                    if (newNodes >= 2 && newNodes <= 10) {
                      setNodes(newNodes);
                      setEdgesDisplay(edgesDisplay.filter(e => e.from < newNodes && e.to < newNodes));
                      setResult("");
                      setPathResult([]);
                      setDistanceResult([]);
                    }
                  }}
                  min="2"
                  max="10"
                  className="w-full px-3 py-2 border rounded dark:bg-slate-600 dark:border-slate-500"
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Node b·∫Øt ƒë·∫ßu:</label>
                <select
                  value={startNode}
                  onChange={(e) => setStartNode(parseInt(e.target.value))}
                  className="w-full px-3 py-2 border rounded dark:bg-slate-600 dark:border-slate-500"
                >
                  {Array.from({ length: nodes }, (_, i) => (
                    <option key={i} value={i}>Node {i}</option>
                  ))}
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Node k·∫øt th√∫c:</label>
                <select
                  value={endNode}
                  onChange={(e) => setEndNode(parseInt(e.target.value))}
                  className="w-full px-3 py-2 border rounded dark:bg-slate-600 dark:border-slate-500"
                >
                  {Array.from({ length: nodes }, (_, i) => (
                    <option key={i} value={i}>Node {i}</option>
                  ))}
                </select>
              </div>
            </div>
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">Qu·∫£n L√Ω C·∫°nh:</h4>
            <div className="grid grid-cols-4 gap-2 mb-3">
              <input
                type="number"
                value={newEdge.from}
                onChange={(e) => setNewEdge({ ...newEdge, from: parseInt(e.target.value) || 0 })}
                placeholder="T·ª´ node"
                min="0"
                max={nodes - 1}
                className="px-3 py-2 border rounded dark:bg-slate-600 dark:border-slate-500"
              />
              <input
                type="number"
                value={newEdge.to}
                onChange={(e) => setNewEdge({ ...newEdge, to: parseInt(e.target.value) || 0 })}
                placeholder="ƒê·∫øn node"
                min="0"
                max={nodes - 1}
                className="px-3 py-2 border rounded dark:bg-slate-600 dark:border-slate-500"
              />
              <input
                type="number"
                value={newEdge.weight}
                onChange={(e) => setNewEdge({ ...newEdge, weight: parseInt(e.target.value) || 1 })}
                placeholder="Tr·ªçng s·ªë"
                min="1"
                className="px-3 py-2 border rounded dark:bg-slate-600 dark:border-slate-500"
              />
              <button
                onClick={addEdge}
                disabled={!wasmReady}
                className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 disabled:opacity-50"
              >
                ü¶Ä Th√™m C·∫°nh
              </button>
            </div>

            <div className="max-h-32 overflow-y-auto">
              <h5 className="font-medium mb-2">Danh S√°ch C·∫°nh:</h5>
              {edgesDisplay.length === 0 ? (
                <p className="text-gray-500 text-sm">Ch∆∞a c√≥ c·∫°nh n√†o</p>
              ) : (
                <div className="space-y-1">
                  {edgesDisplay.map((edge, index) => (
                    <div key={index} className="flex items-center justify-between bg-white dark:bg-slate-800 px-3 py-2 rounded">
                      <span className="text-sm">
                        ü¶Ä Node {edge.from} ‚Üí Node {edge.to} (tr·ªçng s·ªë: {edge.weight})
                      </span>
                      <button
                        onClick={() => removeEdge(index)}
                        disabled={!wasmReady}
                        className="text-red-500 hover:text-red-700 text-sm disabled:opacity-50"
                      >
                        X√≥a
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">Th·ª±c Hi·ªán Dijkstra:</h4>
            <button
              onClick={dijkstra}
              disabled={!wasmReady}
              className="px-6 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 disabled:opacity-50"
            >
              ü¶Ä T√¨m ƒê∆∞·ªùng ƒêi Ng·∫Øn Nh·∫•t
            </button>

            {result && (
              <div className="mt-4 p-3 bg-orange-50 dark:bg-orange-900/20 rounded">
                <strong>K·∫øt qu·∫£:</strong> {result}
                {pathResult.length > 0 && (
                  <div className="mt-2 text-sm">
                    <p><strong>ü¶Ä ƒê∆∞·ªùng ƒëi:</strong> {pathResult.join(" ‚Üí ")}</p>
                    {distanceResult.length > 0 && (
                      <div className="mt-1">
                        <strong>ü¶Ä Kho·∫£ng c√°ch t·ª´ node {startNode}:</strong>
                        <div className="flex flex-wrap gap-2 mt-1">
                          {distanceResult.map((dist, i) => (
                            <span key={i} className="px-2 py-1 bg-orange-100 dark:bg-orange-900 rounded text-xs">
                              Node {i}: {dist === Infinity ? "‚àû" : dist}
                            </span>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </div>
            )}
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">Tr·ª±c Quan H√≥a ƒê·ªì Th·ªã:</h4>
            <MermaidDiagram
              chart={generateMermaidGraph()}
              className="mb-4"
            />
            <div className="flex gap-4 text-sm">
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 bg-green-500 rounded"></div>
                <span>Node b·∫Øt ƒë·∫ßu</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 bg-red-500 rounded"></div>
                <span>Node k·∫øt th√∫c</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 bg-orange-500 rounded"></div>
                <span>ƒê∆∞·ªùng ƒëi ng·∫Øn nh·∫•t</span>
              </div>
            </div>
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">Thu·∫≠t To√°n Dijkstra:</h4>
            <MermaidDiagram
              chart={`
                graph TD
                    START([B·∫Øt ƒë·∫ßu]) --> INIT[Kh·ªüi t·∫°o kho·∫£ng c√°ch]
                    INIT --> SET_SOURCE[ƒê·∫∑t kho·∫£ng c√°ch node ngu·ªìn = 0]
                    SET_SOURCE --> MAIN_LOOP{C√≤n node ch∆∞a thƒÉm?}

                    MAIN_LOOP -->|C√≥| FIND_MIN[T√¨m node ch∆∞a thƒÉm c√≥ kho·∫£ng c√°ch min]
                    FIND_MIN --> MARK_VISITED[ƒê√°nh d·∫•u node ƒë√£ thƒÉm]
                    MARK_VISITED --> UPDATE_NEIGHBORS[C·∫≠p nh·∫≠t kho·∫£ng c√°ch c√°c node l√¢n c·∫≠n]
                    UPDATE_NEIGHBORS --> CHECK_RELAXATION{C√≥ th·ªÉ gi·∫£m kho·∫£ng c√°ch?}

                    CHECK_RELAXATION -->|C√≥| RELAX[C·∫≠p nh·∫≠t kho·∫£ng c√°ch v√† previous]
                    CHECK_RELAXATION -->|Kh√¥ng| NEXT_NEIGHBOR[X√©t node l√¢n c·∫≠n ti·∫øp theo]
                    RELAX --> NEXT_NEIGHBOR
                    NEXT_NEIGHBOR --> MAIN_LOOP

                    MAIN_LOOP -->|Kh√¥ng| BUILD_PATH[X√¢y d·ª±ng ƒë∆∞·ªùng ƒëi t·ª´ previous array]
                    BUILD_PATH --> END([K·∫øt th√∫c])

                    style START fill:#4CAF50,color:#fff
                    style END fill:#F44336,color:#fff
                    style FIND_MIN fill:#2196F3,color:#fff
                    style RELAX fill:#FF9800,color:#fff
              `}
              className="mb-4"
            />
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">ƒê·ªô Ph·ª©c T·∫°p v√† ·ª®ng D·ª•ng:</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <h5 className="font-medium mb-2">ƒê·ªô Ph·ª©c T·∫°p:</h5>
                <ul className="text-sm text-gray-600 dark:text-gray-300 space-y-1">
                  <li>‚Ä¢ <strong>Th·ªùi gian:</strong> O((V + E) log V) v·ªõi priority queue</li>
                  <li>‚Ä¢ <strong>Th·ªùi gian:</strong> O(V¬≤) v·ªõi array ƒë∆°n gi·∫£n</li>
                  <li>‚Ä¢ <strong>Kh√¥ng gian:</strong> O(V)</li>
                  <li>‚Ä¢ <strong>V:</strong> s·ªë ƒë·ªânh, <strong>E:</strong> s·ªë c·∫°nh</li>
                </ul>
              </div>
              <div>
                <h5 className="font-medium mb-2">·ª®ng D·ª•ng:</h5>
                <ul className="text-sm text-gray-600 dark:text-gray-300 space-y-1">
                  <li>‚Ä¢ GPS navigation v√† routing</li>
                  <li>‚Ä¢ Network routing protocols</li>
                  <li>‚Ä¢ Social network analysis</li>
                  <li>‚Ä¢ Flight connections</li>
                  <li>‚Ä¢ Game pathfinding</li>
                </ul>
              </div>
            </div>
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-4">C√†i ƒê·∫∑t:</h4>

            {/* Language Tabs */}
            <div className="mb-4">
              <div className="border-b border-gray-200 dark:border-gray-600">
                <nav className="-mb-px flex space-x-8">
                  <button
                    onClick={() => setActiveLanguageTab("rust")}
                    className={`py-2 px-1 border-b-2 font-medium text-sm ${
                      activeLanguageTab === "rust"
                        ? "border-orange-500 text-orange-600 dark:text-orange-400"
                        : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300"
                    }`}
                  >
                    Rust
                  </button>
                  <button
                    onClick={() => setActiveLanguageTab("cpp")}
                    className={`py-2 px-1 border-b-2 font-medium text-sm ${
                      activeLanguageTab === "cpp"
                        ? "border-blue-500 text-blue-600 dark:text-blue-400"
                        : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300"
                    }`}
                  >
                    C++
                  </button>
                  <button
                    onClick={() => setActiveLanguageTab("python")}
                    className={`py-2 px-1 border-b-2 font-medium text-sm ${
                      activeLanguageTab === "python"
                        ? "border-green-500 text-green-600 dark:text-green-400"
                        : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300"
                    }`}
                  >
                    Python
                  </button>
                </nav>
              </div>
            </div>

            {/* Language-specific Code */}
            {activeLanguageTab === "rust" && (
              <RustCodeEditor
                code={`use std::collections::{BinaryHeap, HashMap};
use std::cmp::Ordering;

#[derive(Debug, Clone, Eq, PartialEq)]
struct State {
    cost: usize,
    position: usize,
}

impl Ord for State {
    fn cmp(&self, other: &Self) -> Ordering {
        other.cost.cmp(&self.cost) // Min-heap
    }
}

impl PartialOrd for State {
    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
        Some(self.cmp(other))
    }
}

#[derive(Debug, Clone)]
pub struct Graph {
    adj_list: HashMap<usize, Vec<(usize, usize)>>, // node -> [(neighbor, weight)]
}

impl Graph {
    pub fn new() -> Self {
        Graph {
            adj_list: HashMap::new(),
        }
    }

    pub fn add_edge(&mut self, from: usize, to: usize, weight: usize) {
        self.adj_list.entry(from).or_insert_with(Vec::new).push((to, weight));
        // Ch√∫ √Ω: ƒê·ªì th·ªã c√≥ h∆∞·ªõng ho·∫∑c kh√¥ng?
        // self.adj_list.entry(to).or_insert_with(Vec::new).push((from, weight));
    }

    pub fn dijkstra(&self, start: usize) -> (HashMap<usize, usize>, HashMap<usize, Option<usize>>) {
        let mut distances = HashMap::new();
        let mut previous = HashMap::new();
        let mut heap = BinaryHeap::new();

        // Kh·ªüi t·∫°o
        for &node in self.adj_list.keys() {
            distances.insert(node, usize::MAX);
            previous.insert(node, None);
        }
        distances.insert(start, 0);
        heap.push(State { cost: 0, position: start });

        while let Some(State { cost, position }) = heap.pop() {
            // B·ªè qua n·∫øu ƒë√£ t√¨m ƒë∆∞·ª£c ƒë∆∞·ªùng ƒëi t·ªët h∆°n
            if cost > *distances.get(&position).unwrap_or(&usize::MAX) {
                continue;
            }

            // X√©t c√°c node l√¢n c·∫≠n
            if let Some(neighbors) = self.adj_list.get(&position) {
                for &(neighbor, weight) in neighbors {
                    let new_cost = cost + weight;

                    if new_cost < *distances.get(&neighbor).unwrap_or(&usize::MAX) {
                        distances.insert(neighbor, new_cost);
                        previous.insert(neighbor, Some(position));
                        heap.push(State { cost: new_cost, position: neighbor });
                    }
                }
            }
        }

        (distances, previous)
    }

    pub fn get_shortest_path(&self, start: usize, end: usize) -> Option<(Vec<usize>, usize)> {
        let (distances, previous) = self.dijkstra(start);

        if let Some(&total_cost) = distances.get(&end) {
            if total_cost == usize::MAX {
                return None; // Kh√¥ng c√≥ ƒë∆∞·ªùng ƒëi
            }

            let mut path = Vec::new();
            let mut current = Some(end);

            while let Some(node) = current {
                path.push(node);
                current = *previous.get(&node)?;
            }

            path.reverse();
            Some((path, total_cost))
        } else {
            None
        }
    }

    // Ph√¢n t√≠ch th·ªù ph·ª©c t·∫°p
    pub fn analyze_complexity(&self) {
        let num_vertices = self.adj_list.len();
        let num_edges: usize = self.adj_list.values().map(|v| v.len()).sum();

        println!("S·ªë ƒë·ªânh (V): {}", num_vertices);
        println!("S·ªë c·∫°nh (E): {}", num_edges);
        println!("Th·ªùi gian: O((V + E) log V) = O(({} + {}) log {})",
                 num_vertices, num_edges, num_vertices);
        println!("Kh√¥ng gian: O(V) = O({})", num_vertices);
    }
}

// A* Algorithm - m·ªü r·ªông c·ªßa Dijkstra v·ªõi heuristic
fn a_star_search(graph: &Graph, start: usize, goal: usize, heuristic: fn(usize, usize) -> usize)
    -> Option<(Vec<usize>, usize)> {
    use std::collections::BinaryHeap;

    #[derive(Eq, PartialEq)]
    struct AStarState {
        f_cost: usize, // g + h
        g_cost: usize, // actual cost
        position: usize,
    }

    impl Ord for AStarState {
        fn cmp(&self, other: &Self) -> Ordering {
            other.f_cost.cmp(&self.f_cost)
        }
    }

    impl PartialOrd for AStarState {
        fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
            Some(self.cmp(other))
        }
    }

    let mut open_set = BinaryHeap::new();
    let mut came_from = HashMap::new();
    let mut g_score = HashMap::new();

    g_score.insert(start, 0);
    open_set.push(AStarState {
        f_cost: heuristic(start, goal),
        g_cost: 0,
        position: start,
    });

    while let Some(current) = open_set.pop() {
        if current.position == goal {
            // Reconstruct path
            let mut path = vec![goal];
            let mut current_node = goal;

            while let Some(&prev) = came_from.get(&current_node) {
                path.push(prev);
                current_node = prev;
            }

            path.reverse();
            return Some((path, current.g_cost));
        }

        if let Some(neighbors) = graph.adj_list.get(&current.position) {
            for &(neighbor, weight) in neighbors {
                let tentative_g = current.g_cost + weight;

                if tentative_g < *g_score.get(&neighbor).unwrap_or(&usize::MAX) {
                    came_from.insert(neighbor, current.position);
                    g_score.insert(neighbor, tentative_g);
                    let f_score = tentative_g + heuristic(neighbor, goal);

                    open_set.push(AStarState {
                        f_cost: f_score,
                        g_cost: tentative_g,
                        position: neighbor,
                    });
                }
            }
        }
    }

    None
}

// S·ª≠ d·ª•ng
fn main() {
    let mut graph = Graph::new();

    // Th√™m c√°c c·∫°nh
    graph.add_edge(0, 1, 4);
    graph.add_edge(0, 2, 2);
    graph.add_edge(1, 2, 1);
    graph.add_edge(1, 3, 5);
    graph.add_edge(2, 3, 8);
    graph.add_edge(2, 4, 10);
    graph.add_edge(3, 4, 2);

    // Ph√¢n t√≠ch ƒë·ªì th·ªã
    graph.analyze_complexity();

    // T√¨m ƒë∆∞·ªùng ƒëi ng·∫Øn nh·∫•t t·ª´ 0 ƒë·∫øn 4
    if let Some((path, cost)) = graph.get_shortest_path(0, 4) {
        println!("ƒê∆∞·ªùng ƒëi ng·∫Øn nh·∫•t: {:?}", path);
        println!("T·ªïng chi ph√≠: {}", cost);
    } else {
        println!("Kh√¥ng c√≥ ƒë∆∞·ªùng ƒëi");
    }

    // T√¨m kho·∫£ng c√°ch ng·∫Øn nh·∫•t t·ª´ node 0 ƒë·∫øn t·∫•t c·∫£ node kh√°c
    let (distances, _) = graph.dijkstra(0);
    println!("\nKho·∫£ng c√°ch t·ª´ node 0:");
    for (node, distance) in distances {
        println!("  ƒê·∫øn node {}: {}", node,
                if distance == usize::MAX { "‚àû".to_string() } else { distance.to_string() });
    }

    // V√≠ d·ª• v·ªõi A* (h√†m heuristic ƒë∆°n gi·∫£n)
    let manhattan_heuristic = |a: usize, b: usize| {
        // ƒê√¢y ch·ªâ l√† v√≠ d·ª•, th·ª±c t·∫ø c·∫ßn t·ªça ƒë·ªô th·ª±c
        (a as i32 - b as i32).abs() as usize
    };

    if let Some((astar_path, astar_cost)) = a_star_search(&graph, 0, 4, manhattan_heuristic) {
        println!("\nA* path: {:?}, cost: {}", astar_path, astar_cost);
    }
}`}
                height="500px"
              />
            )}

            {activeLanguageTab === "cpp" && (
              <CppCodeEditor
                code={`#include <iostream>
#include <vector>
#include <queue>
#include <unordered_map>
#include <limits>
#include <algorithm>

const int INF = std::numeric_limits<int>::max();

struct Edge {
    int to;
    int weight;

    Edge(int t, int w) : to(t), weight(w) {}
};

struct State {
    int cost;
    int node;

    State(int c, int n) : cost(c), node(n) {}

    // ƒê·ªëi v·ªõi priority_queue, c·∫ßn operator> ƒë·ªÉ t·∫°o min-heap
    bool operator>(const State& other) const {
        return cost > other.cost;
    }
};

class Graph {
private:
    std::unordered_map<int, std::vector<Edge>> adj_list;

public:
    void addEdge(int from, int to, int weight) {
        adj_list[from].emplace_back(to, weight);
        // N·∫øu l√† ƒë·ªì th·ªã v√¥ h∆∞·ªõng
        // adj_list[to].emplace_back(from, weight);
    }

    std::pair<std::unordered_map<int, int>, std::unordered_map<int, int>>
    dijkstra(int start) {
        std::unordered_map<int, int> distances;
        std::unordered_map<int, int> previous;
        std::priority_queue<State, std::vector<State>, std::greater<State>> pq;

        // Kh·ªüi t·∫°o kho·∫£ng c√°ch
        for (const auto& pair : adj_list) {
            distances[pair.first] = INF;
            previous[pair.first] = -1;
            // C≈©ng c·∫ßn kh·ªüi t·∫°o cho c√°c node ƒë√≠ch
            for (const auto& edge : pair.second) {
                if (distances.find(edge.to) == distances.end()) {
                    distances[edge.to] = INF;
                    previous[edge.to] = -1;
                }
            }
        }

        distances[start] = 0;
        pq.push(State(0, start));

        while (!pq.empty()) {
            State current = pq.top();
            pq.pop();

            // B·ªè qua n·∫øu ƒë√£ t√¨m ƒë∆∞·ª£c ƒë∆∞·ªùng ƒëi t·ªët h∆°n
            if (current.cost > distances[current.node]) {
                continue;
            }

            // X√©t c√°c node l√¢n c·∫≠n
            if (adj_list.find(current.node) != adj_list.end()) {
                for (const auto& edge : adj_list[current.node]) {
                    int new_cost = current.cost + edge.weight;

                    if (new_cost < distances[edge.to]) {
                        distances[edge.to] = new_cost;
                        previous[edge.to] = current.node;
                        pq.push(State(new_cost, edge.to));
                    }
                }
            }
        }

        return {distances, previous};
    }

    std::pair<std::vector<int>, int> getShortestPath(int start, int end) {
        auto [distances, previous] = dijkstra(start);

        if (distances[end] == INF) {
            return {{}, INF}; // Kh√¥ng c√≥ ƒë∆∞·ªùng ƒëi
        }

        std::vector<int> path;
        int current = end;

        while (current != -1) {
            path.push_back(current);
            current = previous[current];
        }

        std::reverse(path.begin(), path.end());
        return {path, distances[end]};
    }

    void analyzeComplexity() const {
        int num_vertices = adj_list.size();
        int num_edges = 0;

        for (const auto& pair : adj_list) {
            num_edges += pair.second.size();
        }

        std::cout << "S·ªë ƒë·ªânh (V): " << num_vertices << std::endl;
        std::cout << "S·ªë c·∫°nh (E): " << num_edges << std::endl;
        std::cout << "Th·ªùi gian: O((V + E) log V) = O(("
                  << num_vertices << " + " << num_edges << ") log "
                  << num_vertices << ")" << std::endl;
        std::cout << "Kh√¥ng gian: O(V) = O(" << num_vertices << ")" << std::endl;
    }

    void printGraph() const {
        std::cout << "\nC·∫•u tr√∫c ƒë·ªì th·ªã:" << std::endl;
        for (const auto& pair : adj_list) {
            std::cout << "Node " << pair.first << ": ";
            for (const auto& edge : pair.second) {
                std::cout << "->" << edge.to << "(" << edge.weight << ") ";
            }
            std::cout << std::endl;
        }
    }
};

// A* Algorithm
struct AStarState {
    int f_cost; // g + h
    int g_cost; // actual cost
    int node;

    AStarState(int f, int g, int n) : f_cost(f), g_cost(g), node(n) {}

    bool operator>(const AStarState& other) const {
        return f_cost > other.f_cost;
    }
};

std::pair<std::vector<int>, int> aStarSearch(
    const Graph& graph,
    int start,
    int goal,
    std::function<int(int, int)> heuristic
) {
    std::priority_queue<AStarState, std::vector<AStarState>, std::greater<AStarState>> open_set;
    std::unordered_map<int, int> came_from;
    std::unordered_map<int, int> g_score;

    g_score[start] = 0;
    open_set.push(AStarState(heuristic(start, goal), 0, start));

    while (!open_set.empty()) {
        AStarState current = open_set.top();
        open_set.pop();

        if (current.node == goal) {
            // Reconstruct path
            std::vector<int> path = {goal};
            int current_node = goal;

            while (came_from.find(current_node) != came_from.end()) {
                current_node = came_from[current_node];
                path.push_back(current_node);
            }

            std::reverse(path.begin(), path.end());
            return {path, current.g_cost};
        }

        // X·ª≠ l√Ω c√°c node l√¢n c·∫≠n (c·∫ßn truy c·∫≠p adj_list)
        // ƒê√¢y l√† v√≠ d·ª• ƒë∆°n gi·∫£n, th·ª±c t·∫ø c·∫ßn method public ho·∫∑c friend class
    }

    return {{}, INF};
}

// Bi·∫øn th·ªÉ Dijkstra cho ƒë·ªì th·ªã d·∫°ng ma tr·∫≠n
std::vector<int> dijkstraMatrix(const std::vector<std::vector<int>>& graph, int start) {
    int n = graph.size();
    std::vector<int> dist(n, INF);
    std::vector<bool> visited(n, false);

    dist[start] = 0;

    for (int count = 0; count < n - 1; count++) {
        // T√¨m node ch∆∞a thƒÉm c√≥ kho·∫£ng c√°ch nh·ªè nh·∫•t
        int min_dist = INF;
        int u = -1;

        for (int v = 0; v < n; v++) {
            if (!visited[v] && dist[v] < min_dist) {
                min_dist = dist[v];
                u = v;
            }
        }

        if (u == -1) break; // Kh√¥ng c√≤n node n√†o ƒë·∫øn ƒë∆∞·ª£c

        visited[u] = true;

        // C·∫≠p nh·∫≠t kho·∫£ng c√°ch c√°c node l√¢n c·∫≠n
        for (int v = 0; v < n; v++) {
            if (!visited[v] && graph[u][v] != 0 &&
                dist[u] != INF && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    return dist;
}

int main() {
    Graph graph;

    // Th√™m c√°c c·∫°nh
    graph.addEdge(0, 1, 4);
    graph.addEdge(0, 2, 2);
    graph.addEdge(1, 2, 1);
    graph.addEdge(1, 3, 5);
    graph.addEdge(2, 3, 8);
    graph.addEdge(2, 4, 10);
    graph.addEdge(3, 4, 2);

    // In c·∫•u tr√∫c ƒë·ªì th·ªã
    graph.printGraph();

    // Ph√¢n t√≠ch ƒë·ªô ph·ª©c t·∫°p
    std::cout << "\nPh√¢n t√≠ch ƒë·ªô ph·ª©c t·∫°p:" << std::endl;
    graph.analyzeComplexity();

    // T√¨m ƒë∆∞·ªùng ƒëi ng·∫Øn nh·∫•t t·ª´ 0 ƒë·∫øn 4
    auto [path, cost] = graph.getShortestPath(0, 4);

    if (cost != INF) {
        std::cout << "\nƒê∆∞·ªùng ƒëi ng·∫Øn nh·∫•t t·ª´ 0 ƒë·∫øn 4: ";
        for (int i = 0; i < path.size(); i++) {
            std::cout << path[i];
            if (i < path.size() - 1) std::cout << " -> ";
        }
        std::cout << "\nT·ªïng chi ph√≠: " << cost << std::endl;
    } else {
        std::cout << "\nKh√¥ng c√≥ ƒë∆∞·ªùng ƒëi t·ª´ 0 ƒë·∫øn 4" << std::endl;
    }

    // T√¨m kho·∫£ng c√°ch ng·∫Øn nh·∫•t t·ª´ node 0 ƒë·∫øn t·∫•t c·∫£ node kh√°c
    auto [distances, previous] = graph.dijkstra(0);
    std::cout << "\nKho·∫£ng c√°ch ng·∫Øn nh·∫•t t·ª´ node 0:" << std::endl;
    for (const auto& pair : distances) {
        std::cout << "  ƒê·∫øn node " << pair.first << ": ";
        if (pair.second == INF) {
            std::cout << "‚àû" << std::endl;
        } else {
            std::cout << pair.second << std::endl;
        }
    }

    // V√≠ d·ª• v·ªõi ma tr·∫≠n k·ªÅ (cho ƒë·ªì th·ªã nh·ªè)
    std::cout << "\nV√≠ d·ª• v·ªõi ma tr·∫≠n k·ªÅ (Dijkstra phi√™n b·∫£n O(V¬≤)):" << std::endl;
    std::vector<std::vector<int>> matrix = {
        {0, 4, 2, 0, 0},
        {0, 0, 1, 5, 0},
        {0, 0, 0, 8, 10},
        {0, 0, 0, 0, 2},
        {0, 0, 0, 0, 0}
    };

    auto matrix_distances = dijkstraMatrix(matrix, 0);
    for (int i = 0; i < matrix_distances.size(); i++) {
        std::cout << "  ƒê·∫øn node " << i << ": ";
        if (matrix_distances[i] == INF) {
            std::cout << "‚àû" << std::endl;
        } else {
            std::cout << matrix_distances[i] << std::endl;
        }
    }

    return 0;
}`}
                height="500px"
              />
            )}

            {activeLanguageTab === "python" && (
              <PythonCodeEditor
                code={`import heapq
from collections import defaultdict, deque
from typing import Dict, List, Tuple, Optional, Set
import math

class Graph:
    def __init__(self):
        self.adj_list = defaultdict(list)  # node -> [(neighbor, weight)]

    def add_edge(self, from_node: int, to_node: int, weight: int):
        """Th√™m c·∫°nh v√†o ƒë·ªì th·ªã"""
        self.adj_list[from_node].append((to_node, weight))
        # N·∫øu l√† ƒë·ªì th·ªã v√¥ h∆∞·ªõng
        # self.adj_list[to_node].append((from_node, weight))

    def dijkstra(self, start: int) -> Tuple[Dict[int, int], Dict[int, Optional[int]]]:
        """Thu·∫≠t to√°n Dijkstra tr·∫£ v·ªÅ distances v√† previous nodes"""
        distances = defaultdict(lambda: float('inf'))
        previous = {}
        heap = [(0, start)]  # (distance, node)
        visited = set()

        distances[start] = 0

        while heap:
            current_dist, current_node = heapq.heappop(heap)

            # B·ªè qua n·∫øu ƒë√£ thƒÉm
            if current_node in visited:
                continue

            visited.add(current_node)

            # X√©t c√°c node l√¢n c·∫≠n
            for neighbor, weight in self.adj_list[current_node]:
                if neighbor not in visited:
                    new_distance = current_dist + weight

                    if new_distance < distances[neighbor]:
                        distances[neighbor] = new_distance
                        previous[neighbor] = current_node
                        heapq.heappush(heap, (new_distance, neighbor))

        return dict(distances), previous

    def get_shortest_path(self, start: int, end: int) -> Optional[Tuple[List[int], int]]:
        """T√¨m ƒë∆∞·ªùng ƒëi ng·∫Øn nh·∫•t gi·ªØa hai node"""
        distances, previous = self.dijkstra(start)

        if end not in distances or distances[end] == float('inf'):
            return None  # Kh√¥ng c√≥ ƒë∆∞·ªùng ƒëi

        # X√¢y d·ª±ng ƒë∆∞·ªùng ƒëi
        path = []
        current = end

        while current is not None:
            path.append(current)
            current = previous.get(current)

        path.reverse()
        return path, distances[end]

    def analyze_complexity(self):
        """Ph√¢n t√≠ch ƒë·ªô ph·ª©c t·∫°p c·ªßa ƒë·ªì th·ªã"""
        num_vertices = len(self.adj_list)
        num_edges = sum(len(neighbors) for neighbors in self.adj_list.values())

        print(f"S·ªë ƒë·ªânh (V): {num_vertices}")
        print(f"S·ªë c·∫°nh (E): {num_edges}")
        print(f"Th·ªùi gian: O((V + E) log V) = O(({num_vertices} + {num_edges}) log {num_vertices})")
        print(f"Kh√¥ng gian: O(V) = O({num_vertices})")

    def print_graph(self):
        """In c·∫•u tr√∫c ƒë·ªì th·ªã"""
        print("\nC·∫•u tr√∫c ƒë·ªì th·ªã:")
        for node, neighbors in self.adj_list.items():
            edges = " ".join([f"->{neighbor}({weight})" for neighbor, weight in neighbors])
            print(f"Node {node}: {edges}")

def dijkstra_simple(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:
    """Phi√™n b·∫£n ƒë∆°n gi·∫£n c·ªßa Dijkstra"""
    distances = {node: float('inf') for node in graph.keys()}
    distances[start] = 0
    unvisited = set(graph.keys())

    while unvisited:
        # T√¨m node ch∆∞a thƒÉm c√≥ kho·∫£ng c√°ch nh·ªè nh·∫•t
        current = min(unvisited, key=lambda x: distances[x])

        if distances[current] == float('inf'):
            break  # Kh√¥ng c√≤n node n√†o ƒë·∫øn ƒë∆∞·ª£c

        unvisited.remove(current)

        # C·∫≠p nh·∫≠t kho·∫£ng c√°ch c√°c node l√¢n c·∫≠n
        for neighbor, weight in graph.get(current, []):
            if neighbor in unvisited:
                new_distance = distances[current] + weight
                if new_distance < distances[neighbor]:
                    distances[neighbor] = new_distance

    return distances

def a_star_search(graph: Dict[int, List[Tuple[int, int]]],
                  start: int,
                  goal: int,
                  heuristic) -> Optional[Tuple[List[int], int]]:
    """Thu·∫≠t to√°n A* - m·ªü r·ªông c·ªßa Dijkstra v·ªõi heuristic"""
    open_set = [(0, start)]  # (f_score, node)
    came_from = {}
    g_score = defaultdict(lambda: float('inf'))
    g_score[start] = 0
    f_score = defaultdict(lambda: float('inf'))
    f_score[start] = heuristic(start, goal)

    open_set_hash = {start}

    while open_set:
        current = heapq.heappop(open_set)[1]
        open_set_hash.discard(current)

        if current == goal:
            # X√¢y d·ª±ng ƒë∆∞·ªùng ƒëi
            path = [goal]
            while current in came_from:
                current = came_from[current]
                path.append(current)
            path.reverse()
            return path, g_score[goal]

        for neighbor, weight in graph.get(current, []):
            tentative_g = g_score[current] + weight

            if tentative_g < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g
                f_score[neighbor] = tentative_g + heuristic(neighbor, goal)

                if neighbor not in open_set_hash:
                    heapq.heappush(open_set, (f_score[neighbor], neighbor))
                    open_set_hash.add(neighbor)

    return None

def bellman_ford(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Tuple[Dict[int, float], bool]:
    """Thu·∫≠t to√°n Bellman-Ford - x·ª≠ l√Ω c·∫°nh √¢m"""
    # L·∫•y t·∫•t c·∫£ c√°c node
    all_nodes = set(graph.keys())
    for neighbors in graph.values():
        for neighbor, _ in neighbors:
            all_nodes.add(neighbor)

    distances = {node: float('inf') for node in all_nodes}
    distances[start] = 0

    # Th∆∞ gi√£n V-1 l·∫ßn
    for _ in range(len(all_nodes) - 1):
        for node in graph:
            if distances[node] != float('inf'):
                for neighbor, weight in graph[node]:
                    new_dist = distances[node] + weight
                    if new_dist < distances[neighbor]:
                        distances[neighbor] = new_dist

    # Ki·ªÉm tra chu tr√¨nh √¢m
    has_negative_cycle = False
    for node in graph:
        if distances[node] != float('inf'):
            for neighbor, weight in graph[node]:
                if distances[node] + weight < distances[neighbor]:
                    has_negative_cycle = True
                    break
        if has_negative_cycle:
            break

    return distances, has_negative_cycle

def floyd_warshall(graph: Dict[int, List[Tuple[int, int]]]) -> Dict[Tuple[int, int], float]:
    """Thu·∫≠t to√°n Floyd-Warshall - t√¨m ƒë∆∞·ªùng ƒëi ng·∫Øn nh·∫•t gi·ªØa m·ªçi c·∫∑p node"""
    # L·∫•y t·∫•t c·∫£ c√°c node
    all_nodes = set(graph.keys())
    for neighbors in graph.values():
        for neighbor, _ in neighbors:
            all_nodes.add(neighbor)
    all_nodes = sorted(list(all_nodes))

    # Kh·ªüi t·∫°o ma tr·∫≠n kho·∫£ng c√°ch
    dist = {}
    for i in all_nodes:
        for j in all_nodes:
            if i == j:
                dist[(i, j)] = 0
            else:
                dist[(i, j)] = float('inf')

    # ƒêi·ªÅn c√°c c·∫°nh
    for node, neighbors in graph.items():
        for neighbor, weight in neighbors:
            dist[(node, neighbor)] = weight

    # Thu·∫≠t to√°n Floyd-Warshall
    for k in all_nodes:
        for i in all_nodes:
            for j in all_nodes:
                if dist[(i, k)] + dist[(k, j)] < dist[(i, j)]:
                    dist[(i, j)] = dist[(i, k)] + dist[(k, j)]

    return dist

def visualize_shortest_path(graph: Graph, start: int, end: int):
    """Tr·ª±c quan h√≥a ƒë∆∞·ªùng ƒëi ng·∫Øn nh·∫•t"""
    result = graph.get_shortest_path(start, end)
    if result is None:
        print(f"Kh√¥ng c√≥ ƒë∆∞·ªùng ƒëi t·ª´ {start} ƒë·∫øn {end}")
        return

    path, total_cost = result
    print(f"ƒê∆∞·ªùng ƒëi ng·∫Øn nh·∫•t t·ª´ {start} ƒë·∫øn {end}:")
    print(f"Path: {' -> '.join(map(str, path))}")
    print(f"T·ªïng chi ph√≠: {total_cost}")

    # Hi·ªÉn th·ªã t·ª´ng b∆∞·ªõc
    print("\nChi ti·∫øt t·ª´ng b∆∞·ªõc:")
    for i in range(len(path) - 1):
        current = path[i]
        next_node = path[i + 1]

        # T√¨m tr·ªçng s·ªë c·∫°nh
        for neighbor, weight in graph.adj_list[current]:
            if neighbor == next_node:
                print(f"  B∆∞·ªõc {i + 1}: {current} -> {next_node} (chi ph√≠: {weight})")
                break

# V√≠ d·ª• s·ª≠ d·ª•ng
if __name__ == "__main__":
    # T·∫°o ƒë·ªì th·ªã
    graph = Graph()

    # Th√™m c√°c c·∫°nh
    edges = [
        (0, 1, 4),
        (0, 2, 2),
        (1, 2, 1),
        (1, 3, 5),
        (2, 3, 8),
        (2, 4, 10),
        (3, 4, 2)
    ]

    for from_node, to_node, weight in edges:
        graph.add_edge(from_node, to_node, weight)

    # In th√¥ng tin ƒë·ªì th·ªã
    graph.print_graph()
    print("\nPh√¢n t√≠ch ƒë·ªô ph·ª©c t·∫°p:")
    graph.analyze_complexity()

    # T√¨m ƒë∆∞·ªùng ƒëi ng·∫Øn nh·∫•t t·ª´ 0 ƒë·∫øn 4
    print("\n" + "="*50)
    visualize_shortest_path(graph, 0, 4)

    # T√¨m kho·∫£ng c√°ch t·ª´ node 0 ƒë·∫øn t·∫•t c·∫£ node kh√°c
    distances, previous = graph.dijkstra(0)
    print("\n" + "="*50)
    print("Kho·∫£ng c√°ch ng·∫Øn nh·∫•t t·ª´ node 0:")
    for node, distance in sorted(distances.items()):
        if distance == float('inf'):
            print(f"  ƒê·∫øn node {node}: ‚àû")
        else:
            print(f"  ƒê·∫øn node {node}: {distance}")

    # So s√°nh v·ªõi phi√™n b·∫£n ƒë∆°n gi·∫£n
    print("\n" + "="*50)
    print("So s√°nh v·ªõi Dijkstra ƒë∆°n gi·∫£n (kh√¥ng d√πng heap):")

    # Chuy·ªÉn ƒë·ªïi sang ƒë·ªãnh d·∫°ng dictionary
    graph_dict = {node: neighbors for node, neighbors in graph.adj_list.items()}
    simple_distances = dijkstra_simple(graph_dict, 0)

    for node, distance in sorted(simple_distances.items()):
        if distance == float('inf'):
            print(f"  ƒê·∫øn node {node}: ‚àû")
        else:
            print(f"  ƒê·∫øn node {node}: {distance}")

    # V√≠ d·ª• v·ªõi Bellman-Ford (cho ƒë·ªì th·ªã c√≥ c·∫°nh √¢m)
    print("\n" + "="*50)
    print("V√≠ d·ª• Bellman-Ford (cho ƒë·ªì th·ªã c√≥ c·∫°nh √¢m):")

    # T·∫°o ƒë·ªì th·ªã v·ªõi c·∫°nh √¢m
    negative_graph = {
        0: [(1, 4), (2, 2)],
        1: [(2, -3), (3, 2)],
        2: [(3, 4), (4, 2)],
        3: [(4, -1)],
        4: []
    }

    bf_distances, has_neg_cycle = bellman_ford(negative_graph, 0)
    print(f"C√≥ chu tr√¨nh √¢m: {has_neg_cycle}")
    for node, distance in sorted(bf_distances.items()):
        if distance == float('inf'):
            print(f"  ƒê·∫øn node {node}: ‚àû")
        else:
            print(f"  ƒê·∫øn node {node}: {distance}")

    # V√≠ d·ª• A* v·ªõi heuristic ƒë∆°n gi·∫£n
    print("\n" + "="*50)
    print("V√≠ d·ª• A* v·ªõi heuristic Manhattan:")

    def manhattan_heuristic(node1, node2):
        # ƒê√¢y ch·ªâ l√† v√≠ d·ª•, th·ª±c t·∫ø c·∫ßn t·ªça ƒë·ªô th·∫≠t
        return abs(node1 - node2)

    astar_result = a_star_search(graph_dict, 0, 4, manhattan_heuristic)
    if astar_result:
        path, cost = astar_result
        print(f"A* path: {' -> '.join(map(str, path))}")
        print(f"A* cost: {cost}")
    else:
        print("A* kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng ƒëi")

    # S·ª≠ d·ª•ng heap module c·ªßa Python
    print("\n" + "="*50)
    print("Dijkstra v·ªõi heapq c·ªßa Python:")

    def dijkstra_with_heapq(graph_dict, start):
        distances = {node: float('inf') for node in graph_dict}
        distances[start] = 0
        heap = [(0, start)]
        visited = set()

        while heap:
            current_dist, current_node = heapq.heappop(heap)

            if current_node in visited:
                continue

            visited.add(current_node)

            for neighbor, weight in graph_dict.get(current_node, []):
                if neighbor not in visited:
                    new_dist = current_dist + weight
                    if new_dist < distances[neighbor]:
                        distances[neighbor] = new_dist
                        heapq.heappush(heap, (new_dist, neighbor))

        return distances

    heapq_distances = dijkstra_with_heapq(graph_dict, 0)
    for node, distance in sorted(heapq_distances.items()):
        if distance == float('inf'):
            print(f"  ƒê·∫øn node {node}: ‚àû")
        else:
            print(f"  ƒê·∫øn node {node}: {distance}")`}
                height="500px"
              />
            )}
          </div>
        </div>
      </div>
    </div>
  );
}