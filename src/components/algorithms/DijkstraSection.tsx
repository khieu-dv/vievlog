"use client";

import { useState, useEffect } from "react";
import { Route } from "lucide-react";
import { MermaidDiagram } from "~/components/common/MermaidDiagram";
import { initRustWasm } from "~/lib/rust-wasm-helper";

interface Edge {
  from: number;
  to: number;
  weight: number;
}

interface DijkstraResult {
  distances: number[];
  previous: (number | null)[];
  visited: boolean[];
  path: number[];
}

export function DijkstraSection() {
  const [rustGraph, setRustGraph] = useState<any>(null);
  const [wasmReady, setWasmReady] = useState(false);
  const [nodes, setNodes] = useState(5);
  const [edgesDisplay, setEdgesDisplay] = useState<Edge[]>([
    { from: 0, to: 1, weight: 4 },
    { from: 0, to: 2, weight: 2 },
    { from: 1, to: 2, weight: 1 },
    { from: 1, to: 3, weight: 5 },
    { from: 2, to: 3, weight: 8 },
    { from: 2, to: 4, weight: 10 },
    { from: 3, to: 4, weight: 2 },
  ]);
  const [startNode, setStartNode] = useState(0);
  const [endNode, setEndNode] = useState(4);
  const [result, setResult] = useState("");
  const [pathResult, setPathResult] = useState<number[]>([]);
  const [distanceResult, setDistanceResult] = useState<number[]>([]);
  const [newEdge, setNewEdge] = useState({ from: 0, to: 1, weight: 1 });
  const [wasm, setWasm] = useState<any>(null);

  // Initialize WASM
  useEffect(() => {
    async function init() {
      try {
        const wasmInstance = await initRustWasm();
        const newGraph = wasmInstance.dataStructures.createWeightedGraph(true);

        // Initialize with default edges
        edgesDisplay.forEach(edge => {
          newGraph.addEdge(edge.from, edge.to, edge.weight);
        });

        setRustGraph(newGraph);
        setWasm(wasmInstance);
        setWasmReady(true);
        setResult("‚úÖ Rust WASM Dijkstra Algorithm ƒë√£ s·∫µn s√†ng!");
      } catch (error) {
        console.error("Failed to initialize WASM:", error);
        setResult("‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o Rust WASM");
      }
    }
    init();
  }, []);

  // Update display from Rust graph
  const updateDisplayFromRustGraph = () => {
    if (rustGraph) {
      try {
        const edges = Array.from(rustGraph.getEdges()) as Edge[];
        setEdgesDisplay(edges);
      } catch (error) {
        console.error("Error updating display:", error);
      }
    }
  };

  const addEdge = () => {
    if (newEdge.from >= 0 && newEdge.from < nodes &&
        newEdge.to >= 0 && newEdge.to < nodes &&
        newEdge.from !== newEdge.to &&
        newEdge.weight > 0) {

      if (wasmReady && rustGraph) {
        try {
          rustGraph.addEdge(newEdge.from, newEdge.to, newEdge.weight);
          const edgeCount = rustGraph.edgeCount();
          setResult(`ü¶Ä ƒê√£ th√™m c·∫°nh t·ª´ ${newEdge.from} ƒë·∫øn ${newEdge.to} (tr·ªçng s·ªë ${newEdge.weight}). T·ªïng c·∫°nh: ${edgeCount}`);
          updateDisplayFromRustGraph();
        } catch (error) {
          setResult("‚ùå Rust WASM addEdge failed: " + error);
        }
      } else {
        setResult("‚ùå WASM ch∆∞a s·∫µn s√†ng");
      }
    }
  };

  const removeEdge = (index: number) => {
    const edgeToRemove = edgesDisplay[index];
    if (wasmReady && rustGraph && edgeToRemove) {
      try {
        rustGraph.removeEdge(edgeToRemove.from, edgeToRemove.to);
        const edgeCount = rustGraph.edgeCount();
        setResult(`ü¶Ä ƒê√£ x√≥a c·∫°nh t·ª´ ${edgeToRemove.from} ƒë·∫øn ${edgeToRemove.to}. T·ªïng c·∫°nh: ${edgeCount}`);
        updateDisplayFromRustGraph();
      } catch (error) {
        setResult("‚ùå Rust WASM removeEdge failed: " + error);
      }
    } else {
      setResult("‚ùå WASM ch∆∞a s·∫µn s√†ng");
    }
  };

  const dijkstra = () => {
    if (startNode < 0 || startNode >= nodes || endNode < 0 || endNode >= nodes) {
      setResult("‚ùå ƒê·ªânh b·∫Øt ƒë·∫ßu ho·∫∑c k·∫øt th√∫c kh√¥ng h·ª£p l·ªá");
      return;
    }

    if (wasmReady && rustGraph) {
      try {
        const dijkstraResult = rustGraph.dijkstra(startNode, endNode);
        const path = Array.from(dijkstraResult.path) as number[];
        const distances = Array.from(dijkstraResult.distances) as number[];

        setPathResult(path);
        setDistanceResult(distances);

        if (path.length > 0) {
          const totalDistance = distances[endNode];
          setResult(`ü¶Ä ƒê∆∞·ªùng ƒëi ng·∫Øn nh·∫•t t·ª´ ${startNode} ƒë·∫øn ${endNode}: ${path.join(" ‚Üí ")} (t·ªïng kho·∫£ng c√°ch: ${totalDistance})`);
        } else {
          setResult(`ü¶Ä Kh√¥ng c√≥ ƒë∆∞·ªùng ƒëi t·ª´ node ${startNode} ƒë·∫øn node ${endNode}`);
        }
      } catch (error) {
        setResult("‚ùå Rust WASM Dijkstra failed: " + error);
      }
    } else {
      setResult("‚ùå WASM ch∆∞a s·∫µn s√†ng");
    }
  };

  const generateMermaidGraph = () => {
    let mermaidCode = "graph TD\n";

    // Add nodes
    for (let i = 0; i < nodes; i++) {
      const isStart = i === startNode;
      const isEnd = i === endNode;
      const isInPath = pathResult.includes(i) || false;

      let nodeStyle = "";
      if (isStart) nodeStyle = "fill:#4CAF50,color:#fff";
      else if (isEnd) nodeStyle = "fill:#F44336,color:#fff";
      else if (isInPath) nodeStyle = "fill:#FF9800,color:#fff";
      else nodeStyle = "fill:#2196F3,color:#fff";

      mermaidCode += `    ${i}[Node ${i}]\n`;
      mermaidCode += `    style ${i} ${nodeStyle}\n`;
    }

    // Add edges
    edgesDisplay.forEach(edge => {
      const isInPath = pathResult.includes(edge.from) && pathResult.includes(edge.to) &&
                     Math.abs(pathResult.indexOf(edge.from) - pathResult.indexOf(edge.to)) === 1;

      if (isInPath) {
        mermaidCode += `    ${edge.from} -.->|${edge.weight}| ${edge.to}\n`;
        mermaidCode += `    linkStyle ${edgesDisplay.indexOf(edge)} stroke:#FF9800,stroke-width:4px\n`;
      } else {
        mermaidCode += `    ${edge.from} -->|${edge.weight}| ${edge.to}\n`;
      }
    });

    return mermaidCode;
  };

  return (
    <div className="space-y-6">
      <div className="bg-white dark:bg-slate-800 rounded-lg p-6 border">
        <h3 className="text-xl font-semibold mb-4 flex items-center gap-2">
          <Route className="h-5 w-5" />
          ü¶Ä Rust WASM Thu·∫≠t To√°n Dijkstra
        </h3>
        <p className="text-gray-600 dark:text-gray-300 mb-4">
          Demo t∆∞∆°ng t√°c Thu·∫≠t to√°n Dijkstra s·ª≠ d·ª•ng Rust WASM. Dijkstra ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a t√¨m ƒë∆∞·ªùng ƒëi ng·∫Øn nh·∫•t t·ª´ m·ªôt node ngu·ªìn ƒë·∫øn t·∫•t c·∫£ c√°c node kh√°c trong ƒë·ªì th·ªã c√≥ tr·ªçng s·ªë kh√¥ng √¢m v·ªõi ƒë·ªô ph·ª©c t·∫°p O((V+E)logV).
        </p>

        <div className="space-y-4">
          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">C·∫•u H√¨nh ƒê·ªì Th·ªã:</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium mb-1">S·ªë node:</label>
                <input
                  type="number"
                  value={nodes}
                  onChange={(e) => {
                    const newNodes = parseInt(e.target.value);
                    if (newNodes >= 2 && newNodes <= 10) {
                      setNodes(newNodes);
                      setEdgesDisplay(edgesDisplay.filter(e => e.from < newNodes && e.to < newNodes));
                      setResult("");
                      setPathResult([]);
                      setDistanceResult([]);
                    }
                  }}
                  min="2"
                  max="10"
                  className="w-full px-3 py-2 border rounded dark:bg-slate-600 dark:border-slate-500"
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Node b·∫Øt ƒë·∫ßu:</label>
                <select
                  value={startNode}
                  onChange={(e) => setStartNode(parseInt(e.target.value))}
                  className="w-full px-3 py-2 border rounded dark:bg-slate-600 dark:border-slate-500"
                >
                  {Array.from({ length: nodes }, (_, i) => (
                    <option key={i} value={i}>Node {i}</option>
                  ))}
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Node k·∫øt th√∫c:</label>
                <select
                  value={endNode}
                  onChange={(e) => setEndNode(parseInt(e.target.value))}
                  className="w-full px-3 py-2 border rounded dark:bg-slate-600 dark:border-slate-500"
                >
                  {Array.from({ length: nodes }, (_, i) => (
                    <option key={i} value={i}>Node {i}</option>
                  ))}
                </select>
              </div>
            </div>
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">Qu·∫£n L√Ω C·∫°nh:</h4>
            <div className="grid grid-cols-4 gap-2 mb-3">
              <input
                type="number"
                value={newEdge.from}
                onChange={(e) => setNewEdge({ ...newEdge, from: parseInt(e.target.value) || 0 })}
                placeholder="T·ª´ node"
                min="0"
                max={nodes - 1}
                className="px-3 py-2 border rounded dark:bg-slate-600 dark:border-slate-500"
              />
              <input
                type="number"
                value={newEdge.to}
                onChange={(e) => setNewEdge({ ...newEdge, to: parseInt(e.target.value) || 0 })}
                placeholder="ƒê·∫øn node"
                min="0"
                max={nodes - 1}
                className="px-3 py-2 border rounded dark:bg-slate-600 dark:border-slate-500"
              />
              <input
                type="number"
                value={newEdge.weight}
                onChange={(e) => setNewEdge({ ...newEdge, weight: parseInt(e.target.value) || 1 })}
                placeholder="Tr·ªçng s·ªë"
                min="1"
                className="px-3 py-2 border rounded dark:bg-slate-600 dark:border-slate-500"
              />
              <button
                onClick={addEdge}
                disabled={!wasmReady}
                className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 disabled:opacity-50"
              >
                ü¶Ä Th√™m C·∫°nh
              </button>
            </div>

            <div className="max-h-32 overflow-y-auto">
              <h5 className="font-medium mb-2">Danh S√°ch C·∫°nh:</h5>
              {edgesDisplay.length === 0 ? (
                <p className="text-gray-500 text-sm">Ch∆∞a c√≥ c·∫°nh n√†o</p>
              ) : (
                <div className="space-y-1">
                  {edgesDisplay.map((edge, index) => (
                    <div key={index} className="flex items-center justify-between bg-white dark:bg-slate-800 px-3 py-2 rounded">
                      <span className="text-sm">
                        ü¶Ä Node {edge.from} ‚Üí Node {edge.to} (tr·ªçng s·ªë: {edge.weight})
                      </span>
                      <button
                        onClick={() => removeEdge(index)}
                        disabled={!wasmReady}
                        className="text-red-500 hover:text-red-700 text-sm disabled:opacity-50"
                      >
                        X√≥a
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">Th·ª±c Hi·ªán Dijkstra:</h4>
            <button
              onClick={dijkstra}
              disabled={!wasmReady}
              className="px-6 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 disabled:opacity-50"
            >
              ü¶Ä T√¨m ƒê∆∞·ªùng ƒêi Ng·∫Øn Nh·∫•t
            </button>

            {result && (
              <div className="mt-4 p-3 bg-orange-50 dark:bg-orange-900/20 rounded">
                <strong>K·∫øt qu·∫£:</strong> {result}
                {pathResult.length > 0 && (
                  <div className="mt-2 text-sm">
                    <p><strong>ü¶Ä ƒê∆∞·ªùng ƒëi:</strong> {pathResult.join(" ‚Üí ")}</p>
                    {distanceResult.length > 0 && (
                      <div className="mt-1">
                        <strong>ü¶Ä Kho·∫£ng c√°ch t·ª´ node {startNode}:</strong>
                        <div className="flex flex-wrap gap-2 mt-1">
                          {distanceResult.map((dist, i) => (
                            <span key={i} className="px-2 py-1 bg-orange-100 dark:bg-orange-900 rounded text-xs">
                              Node {i}: {dist === Infinity ? "‚àû" : dist}
                            </span>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </div>
            )}
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">Tr·ª±c Quan H√≥a ƒê·ªì Th·ªã:</h4>
            <MermaidDiagram
              chart={generateMermaidGraph()}
              className="mb-4"
            />
            <div className="flex gap-4 text-sm">
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 bg-green-500 rounded"></div>
                <span>Node b·∫Øt ƒë·∫ßu</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 bg-red-500 rounded"></div>
                <span>Node k·∫øt th√∫c</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 bg-orange-500 rounded"></div>
                <span>ƒê∆∞·ªùng ƒëi ng·∫Øn nh·∫•t</span>
              </div>
            </div>
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">Thu·∫≠t To√°n Dijkstra:</h4>
            <MermaidDiagram
              chart={`
                graph TD
                    START([B·∫Øt ƒë·∫ßu]) --> INIT[Kh·ªüi t·∫°o kho·∫£ng c√°ch]
                    INIT --> SET_SOURCE[ƒê·∫∑t kho·∫£ng c√°ch node ngu·ªìn = 0]
                    SET_SOURCE --> MAIN_LOOP{C√≤n node ch∆∞a thƒÉm?}

                    MAIN_LOOP -->|C√≥| FIND_MIN[T√¨m node ch∆∞a thƒÉm c√≥ kho·∫£ng c√°ch min]
                    FIND_MIN --> MARK_VISITED[ƒê√°nh d·∫•u node ƒë√£ thƒÉm]
                    MARK_VISITED --> UPDATE_NEIGHBORS[C·∫≠p nh·∫≠t kho·∫£ng c√°ch c√°c node l√¢n c·∫≠n]
                    UPDATE_NEIGHBORS --> CHECK_RELAXATION{C√≥ th·ªÉ gi·∫£m kho·∫£ng c√°ch?}

                    CHECK_RELAXATION -->|C√≥| RELAX[C·∫≠p nh·∫≠t kho·∫£ng c√°ch v√† previous]
                    CHECK_RELAXATION -->|Kh√¥ng| NEXT_NEIGHBOR[X√©t node l√¢n c·∫≠n ti·∫øp theo]
                    RELAX --> NEXT_NEIGHBOR
                    NEXT_NEIGHBOR --> MAIN_LOOP

                    MAIN_LOOP -->|Kh√¥ng| BUILD_PATH[X√¢y d·ª±ng ƒë∆∞·ªùng ƒëi t·ª´ previous array]
                    BUILD_PATH --> END([K·∫øt th√∫c])

                    style START fill:#4CAF50,color:#fff
                    style END fill:#F44336,color:#fff
                    style FIND_MIN fill:#2196F3,color:#fff
                    style RELAX fill:#FF9800,color:#fff
              `}
              className="mb-4"
            />
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">ƒê·ªô Ph·ª©c T·∫°p v√† ·ª®ng D·ª•ng:</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <h5 className="font-medium mb-2">ƒê·ªô Ph·ª©c T·∫°p:</h5>
                <ul className="text-sm text-gray-600 dark:text-gray-300 space-y-1">
                  <li>‚Ä¢ <strong>Th·ªùi gian:</strong> O((V + E) log V) v·ªõi priority queue</li>
                  <li>‚Ä¢ <strong>Th·ªùi gian:</strong> O(V¬≤) v·ªõi array ƒë∆°n gi·∫£n</li>
                  <li>‚Ä¢ <strong>Kh√¥ng gian:</strong> O(V)</li>
                  <li>‚Ä¢ <strong>V:</strong> s·ªë ƒë·ªânh, <strong>E:</strong> s·ªë c·∫°nh</li>
                </ul>
              </div>
              <div>
                <h5 className="font-medium mb-2">·ª®ng D·ª•ng:</h5>
                <ul className="text-sm text-gray-600 dark:text-gray-300 space-y-1">
                  <li>‚Ä¢ GPS navigation v√† routing</li>
                  <li>‚Ä¢ Network routing protocols</li>
                  <li>‚Ä¢ Social network analysis</li>
                  <li>‚Ä¢ Flight connections</li>
                  <li>‚Ä¢ Game pathfinding</li>
                </ul>
              </div>
            </div>
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">C√†i ƒê·∫∑t Rust:</h4>
            <pre className="text-sm bg-gray-900 text-green-400 p-3 rounded overflow-x-auto">
{`use std::collections::{BinaryHeap, HashMap};
use std::cmp::Ordering;

#[derive(Debug, Clone, Eq, PartialEq)]
struct State {
    cost: usize,
    position: usize,
}

impl Ord for State {
    fn cmp(&self, other: &Self) -> Ordering {
        other.cost.cmp(&self.cost) // Min-heap
    }
}

impl PartialOrd for State {
    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
        Some(self.cmp(other))
    }
}

#[derive(Debug, Clone)]
pub struct Graph {
    adj_list: HashMap<usize, Vec<(usize, usize)>>, // node -> [(neighbor, weight)]
}

impl Graph {
    pub fn new() -> Self {
        Graph {
            adj_list: HashMap::new(),
        }
    }

    pub fn add_edge(&mut self, from: usize, to: usize, weight: usize) {
        self.adj_list.entry(from).or_insert_with(Vec::new).push((to, weight));
        self.adj_list.entry(to).or_insert_with(Vec::new).push((from, weight));
    }

    pub fn dijkstra(&self, start: usize) -> (HashMap<usize, usize>, HashMap<usize, Option<usize>>) {
        let mut distances = HashMap::new();
        let mut previous = HashMap::new();
        let mut heap = BinaryHeap::new();

        // Kh·ªüi t·∫°o
        for &node in self.adj_list.keys() {
            distances.insert(node, usize::MAX);
            previous.insert(node, None);
        }
        distances.insert(start, 0);
        heap.push(State { cost: 0, position: start });

        while let Some(State { cost, position }) = heap.pop() {
            // B·ªè qua n·∫øu ƒë√£ t√¨m ƒë∆∞·ª£c ƒë∆∞·ªùng ƒëi t·ªët h∆°n
            if cost > *distances.get(&position).unwrap_or(&usize::MAX) {
                continue;
            }

            // X√©t c√°c node l√¢n c·∫≠n
            if let Some(neighbors) = self.adj_list.get(&position) {
                for &(neighbor, weight) in neighbors {
                    let new_cost = cost + weight;

                    if new_cost < *distances.get(&neighbor).unwrap_or(&usize::MAX) {
                        distances.insert(neighbor, new_cost);
                        previous.insert(neighbor, Some(position));
                        heap.push(State { cost: new_cost, position: neighbor });
                    }
                }
            }
        }

        (distances, previous)
    }

    pub fn get_shortest_path(&self, start: usize, end: usize) -> Option<(Vec<usize>, usize)> {
        let (distances, previous) = self.dijkstra(start);

        if let Some(&total_cost) = distances.get(&end) {
            if total_cost == usize::MAX {
                return None; // Kh√¥ng c√≥ ƒë∆∞·ªùng ƒëi
            }

            let mut path = Vec::new();
            let mut current = Some(end);

            while let Some(node) = current {
                path.push(node);
                current = *previous.get(&node)?;
            }

            path.reverse();
            Some((path, total_cost))
        } else {
            None
        }
    }
}

// S·ª≠ d·ª•ng
fn main() {
    let mut graph = Graph::new();

    // Th√™m c√°c c·∫°nh
    graph.add_edge(0, 1, 4);
    graph.add_edge(0, 2, 2);
    graph.add_edge(1, 2, 1);
    graph.add_edge(1, 3, 5);
    graph.add_edge(2, 3, 8);
    graph.add_edge(2, 4, 10);
    graph.add_edge(3, 4, 2);

    // T√¨m ƒë∆∞·ªùng ƒëi ng·∫Øn nh·∫•t t·ª´ 0 ƒë·∫øn 4
    if let Some((path, cost)) = graph.get_shortest_path(0, 4) {
        println!("ƒê∆∞·ªùng ƒëi ng·∫Øn nh·∫•t: {:?}", path);
        println!("T·ªïng chi ph√≠: {}", cost);
    } else {
        println!("Kh√¥ng c√≥ ƒë∆∞·ªùng ƒëi");
    }

    // T√¨m kho·∫£ng c√°ch ng·∫Øn nh·∫•t t·ª´ node 0 ƒë·∫øn t·∫•t c·∫£ node kh√°c
    let (distances, _) = graph.dijkstra(0);
    for (node, distance) in distances {
        println!("Kho·∫£ng c√°ch t·ª´ 0 ƒë·∫øn {}: {}", node,
                if distance == usize::MAX { "‚àû".to_string() } else { distance.to_string() });
    }
}`}
            </pre>
          </div>
        </div>
      </div>
    </div>
  );
}