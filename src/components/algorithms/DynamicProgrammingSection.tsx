"use client";

import { useState, useEffect } from "react";
import { Layers2 } from "lucide-react";
import { MermaidDiagram } from "~/components/common/MermaidDiagram";
import { RustCodeEditor } from "~/components/common/RustCodeEditor";
import { initRustWasm } from "~/lib/rust-wasm-helper";

export function DynamicProgrammingSection() {
  const [rustDP, setRustDP] = useState<any>(null);
  const [wasmReady, setWasmReady] = useState(false);
  const [result, setResult] = useState("");
  const [wasm, setWasm] = useState<any>(null);

  // Fibonacci section
  const [fibN, setFibN] = useState(10);
  const [fibResult, setFibResult] = useState<number>(0);

  // Knapsack section
  const [knapsackCapacity, setKnapsackCapacity] = useState(10);
  const [knapsackItems, setKnapsackItems] = useState([
    { weight: 2, value: 3, name: "Item 1" },
    { weight: 3, value: 4, name: "Item 2" },
    { weight: 4, value: 5, name: "Item 3" },
    { weight: 5, value: 6, name: "Item 4" },
  ]);
  const [knapsackResult, setKnapsackResult] = useState<number>(0);

  // Longest Common Subsequence section
  const [lcsText1, setLcsText1] = useState("ABCDGH");
  const [lcsText2, setLcsText2] = useState("AEDFHR");
  const [lcsResult, setLcsResult] = useState<number>(0);
  const [lcsSequence, setLcsSequence] = useState<string>("");

  // Coin Change section
  const [coinAmount, setCoinAmount] = useState(11);
  const [coinDenominations, setCoinDenominations] = useState([1, 5, 10, 25]);
  const [coinResult, setCoinResult] = useState<{ minCoins: number; coins: number[] } | null>(null);

  // Initialize WASM
  useEffect(() => {
    async function init() {
      try {
        const wasmInstance = await initRustWasm();
        const newDP = wasmInstance.algorithms.dynamicProgramming;
        setRustDP(newDP);
        setWasm(wasmInstance);
        setWasmReady(true);
        setResult("‚úÖ Rust WASM Dynamic Programming algorithms ƒë√£ s·∫µn s√†ng!");
      } catch (error) {
        console.error("Failed to initialize WASM:", error);
        setResult("‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o Rust WASM");
      }
    }
    init();
  }, []);

  const calculateFibonacci = () => {
    if (fibN < 0 || fibN > 50) {
      setResult("‚ùå S·ªë kh√¥ng h·ª£p l·ªá (0-50)");
      return;
    }

    if (wasmReady && rustDP) {
      try {
        const result = rustDP.fibonacci(fibN);
        setFibResult(result);
        setResult(`ü¶Ä Fibonacci(${fibN}) = ${result}`);
      } catch (error) {
        setResult("‚ùå Rust WASM Fibonacci failed: " + error);
      }
    } else {
      setResult("‚ùå WASM ch∆∞a s·∫µn s√†ng");
    }
  };

  const solveKnapsack = () => {
    if (wasmReady && rustDP) {
      try {
        const weights = knapsackItems.map(item => item.weight);
        const values = knapsackItems.map(item => item.value);
        const result = rustDP.knapsack(weights, values, knapsackCapacity);
        setKnapsackResult(result);
        setResult(`ü¶Ä Knapsack: Gi√° tr·ªã t·ªëi ƒëa = ${result} v·ªõi dung l∆∞·ª£ng ${knapsackCapacity}`);
      } catch (error) {
        setResult("‚ùå Rust WASM Knapsack failed: " + error);
      }
    } else {
      setResult("‚ùå WASM ch∆∞a s·∫µn s√†ng");
    }
  };

  const solveLCS = () => {
    if (wasmReady && rustDP) {
      try {
        const result = rustDP.longestCommonSubsequence(lcsText1, lcsText2);
        setLcsResult(result.length);
        setLcsSequence(result.sequence);
        setResult(`ü¶Ä LCS: ƒê·ªô d√†i = ${result.length}, D√£y = "${result.sequence}"`);
      } catch (error) {
        setResult("‚ùå Rust WASM LCS failed: " + error);
      }
    } else {
      setResult("‚ùå WASM ch∆∞a s·∫µn s√†ng");
    }
  };

  const solveCoinChange = () => {
    if (wasmReady && rustDP) {
      try {
        const result = rustDP.coinChange(coinDenominations, coinAmount);
        setCoinResult(result);
        if (result && result.minCoins >= 0) {
          setResult(`ü¶Ä Coin Change: S·ªë ƒë·ªìng xu t·ªëi thi·ªÉu = ${result.minCoins} ƒë·ªÉ ƒë·ªïi ${coinAmount}`);
        } else {
          setResult(`ü¶Ä Coin Change: Kh√¥ng th·ªÉ ƒë·ªïi ${coinAmount} v·ªõi c√°c m·ªánh gi√° hi·ªán c√≥`);
        }
      } catch (error) {
        setResult("‚ùå Rust WASM Coin Change failed: " + error);
      }
    } else {
      setResult("‚ùå WASM ch∆∞a s·∫µn s√†ng");
    }
  };

  return (
    <div className="space-y-6">
      <div className="bg-white dark:bg-slate-800 rounded-lg p-6 border">
        <h3 className="text-xl font-semibold mb-4 flex items-center gap-2">
          <Layers2 className="h-5 w-5" />
          ü¶Ä Rust WASM Dynamic Programming (Quy Ho·∫°ch ƒê·ªông)
        </h3>
        <p className="text-gray-600 dark:text-gray-300 mb-4">
          Demo t∆∞∆°ng t√°c Dynamic Programming s·ª≠ d·ª•ng Rust WASM. Quy ho·∫°ch ƒë·ªông ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a l√† k·ªπ thu·∫≠t gi·∫£i quy·∫øt b√†i to√°n b·∫±ng c√°ch chia nh·ªè th√†nh c√°c b√†i to√°n con v√† l∆∞u tr·ªØ k·∫øt qu·∫£ ƒë·ªÉ tr√°nh t√≠nh to√°n l·∫∑p l·∫°i.
        </p>

        {result && (
          <div className="mb-4 p-3 bg-orange-50 dark:bg-orange-900/20 rounded">
            <strong>K·∫øt qu·∫£:</strong> {result}
          </div>
        )}

        <div className="space-y-6">
          {/* Fibonacci Section */}
          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">1. Fibonacci v·ªõi Memoization:</h4>
            <div className="flex gap-2 mb-3">
              <input
                type="number"
                value={fibN}
                onChange={(e) => setFibN(parseInt(e.target.value) || 0)}
                placeholder="Nh·∫≠p n"
                min="0"
                max="50"
                className="px-3 py-2 border rounded dark:bg-slate-600 dark:border-slate-500"
              />
              <button
                onClick={calculateFibonacci}
                disabled={!wasmReady}
                className="px-4 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 disabled:opacity-50"
              >
                ü¶Ä T√≠nh Fibonacci({fibN})
              </button>
            </div>

            {fibResult > 0 && (
              <div className="space-y-2">
                <p className="font-medium">ü¶Ä K·∫øt qu·∫£: Fibonacci({fibN}) = {fibResult}</p>
              </div>
            )}
          </div>

          {/* Knapsack Section */}
          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">2. 0/1 Knapsack Problem:</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
              <div>
                <label className="block text-sm font-medium mb-1">S·ª©c ch·ª©a t√∫i:</label>
                <input
                  type="number"
                  value={knapsackCapacity}
                  onChange={(e) => setKnapsackCapacity(parseInt(e.target.value) || 0)}
                  min="1"
                  className="w-full px-3 py-2 border rounded dark:bg-slate-600 dark:border-slate-500"
                />
              </div>
              <div>
                <button
                  onClick={solveKnapsack}
                  disabled={!wasmReady}
                  className="mt-6 px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 disabled:opacity-50"
                >
                  ü¶Ä Gi·∫£i Knapsack
                </button>
              </div>
            </div>

            <div className="mb-3">
              <h5 className="font-medium mb-2">Danh s√°ch v·∫≠t ph·∫©m:</h5>
              <div className="space-y-1">
                {knapsackItems.map((item, index) => (
                  <div key={index} className="text-sm bg-white dark:bg-slate-800 p-2 rounded">
                    {item.name}: Tr·ªçng l∆∞·ª£ng = {item.weight}, Gi√° tr·ªã = {item.value}
                  </div>
                ))}
              </div>
            </div>

            {knapsackResult && (
              <div className="space-y-2">
                <p className="font-medium">Gi√° tr·ªã t·ªëi ƒëa: {knapsackResult}</p>
                <div>
                  <strong>Danh s√°ch v·∫≠t ph·∫©m:</strong>
                  <div className="mt-1 space-y-1">
                    {knapsackItems.map((item, index) => (
                      <div key={index} className="text-sm p-2 rounded bg-gray-100 dark:bg-gray-700">
                        {item.name} (Tr·ªçng l∆∞·ª£ng: {item.weight}, Gi√° tr·ªã: {item.value})
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* LCS Section */}
          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">3. Longest Common Subsequence (LCS):</h4>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-2 mb-3">
              <input
                type="text"
                value={lcsText1}
                onChange={(e) => setLcsText1(e.target.value.toUpperCase())}
                placeholder="Chu·ªói 1"
                className="px-3 py-2 border rounded dark:bg-slate-600 dark:border-slate-500"
              />
              <input
                type="text"
                value={lcsText2}
                onChange={(e) => setLcsText2(e.target.value.toUpperCase())}
                placeholder="Chu·ªói 2"
                className="px-3 py-2 border rounded dark:bg-slate-600 dark:border-slate-500"
              />
              <button
                onClick={solveLCS}
                disabled={!wasmReady}
                className="px-4 py-2 bg-purple-500 text-white rounded hover:bg-purple-600 disabled:opacity-50"
              >
                ü¶Ä T√¨m LCS
              </button>
            </div>

            {lcsResult && (
              <div className="space-y-2">
                <p className="font-medium">ƒê·ªô d√†i LCS: {lcsResult}</p>
                <p className="font-medium">Chu·ªói con chung d√†i nh·∫•t: "{lcsSequence}"</p>
                <div className="bg-orange-50 dark:bg-orange-900/20 p-3 rounded">
                  <p className="text-sm">K·∫øt qu·∫£ ƒë∆∞·ª£c t√≠nh to√°n b·∫±ng thu·∫≠t to√°n Dynamic Programming t·ª´ Rust WASM.</p>
                </div>
              </div>
            )}
          </div>

          {/* Coin Change Section */}
          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">4. Coin Change Problem:</h4>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-2 mb-3">
              <input
                type="number"
                value={coinAmount}
                onChange={(e) => setCoinAmount(parseInt(e.target.value) || 0)}
                placeholder="S·ªë ti·ªÅn c·∫ßn ƒë·ªïi"
                min="1"
                className="px-3 py-2 border rounded dark:bg-slate-600 dark:border-slate-500"
              />
              <input
                type="text"
                value={coinDenominations.join(',')}
                onChange={(e) => {
                  const coins = e.target.value.split(',').map(x => parseInt(x.trim())).filter(x => !isNaN(x) && x > 0);
                  setCoinDenominations(coins);
                }}
                placeholder="M·ªánh gi√° (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)"
                className="px-3 py-2 border rounded dark:bg-slate-600 dark:border-slate-500"
              />
              <button
                onClick={solveCoinChange}
                disabled={!wasmReady}
                className="px-4 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 disabled:opacity-50"
              >
                ü¶Ä ƒê·ªïi Ti·ªÅn
              </button>
            </div>

            <p className="text-sm mb-3">M·ªánh gi√° hi·ªán t·∫°i: [{coinDenominations.join(', ')}]</p>

            {coinResult && (
              <div className="space-y-2">
                {coinResult.minCoins === -1 ? (
                  <p className="font-medium text-red-600">Kh√¥ng th·ªÉ ƒë·ªïi ƒë∆∞·ª£c s·ªë ti·ªÅn {coinAmount}</p>
                ) : (
                  <>
                    <p className="font-medium">S·ªë xu t·ªëi thi·ªÉu: {coinResult.minCoins}</p>
                    <p className="font-medium">C√°c xu s·ª≠ d·ª•ng: [{coinResult.coins.join(', ')}]</p>
                  </>
                )}
              </div>
            )}
          </div>

          {/* DP Concept Diagram */}
          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">Nguy√™n L√Ω Dynamic Programming:</h4>
            <MermaidDiagram
              chart={`
                graph TD
                    PROBLEM[B√†i to√°n l·ªõn] --> DIVIDE[Chia nh·ªè th√†nh c√°c b√†i to√°n con]
                    DIVIDE --> OVERLAP{C√°c b√†i to√°n con c√≥ ch·ªìng l·∫Øp?}

                    OVERLAP -->|C√≥| MEMO[S·ª≠ d·ª•ng Memoization]
                    OVERLAP -->|Kh√¥ng| RECURSIVE[S·ª≠ d·ª•ng ƒê·ªá quy th√¥ng th∆∞·ªùng]

                    MEMO --> TOPDOWN[Top-down approach]
                    MEMO --> BOTTOMUP[Bottom-up approach]

                    TOPDOWN --> STORE1[L∆∞u k·∫øt qu·∫£ khi t√≠nh]
                    BOTTOMUP --> STORE2[T√≠nh t·ª´ b√†i to√°n nh·ªè nh·∫•t]

                    STORE1 --> RESULT[K·∫øt qu·∫£ t·ªëi ∆∞u]
                    STORE2 --> RESULT
                    RECURSIVE --> RESULT

                    subgraph "V√≠ d·ª• DP Problems"
                        FIB[Fibonacci]
                        KNAP[Knapsack]
                        LCS_EX[LCS]
                        COIN[Coin Change]
                        EDIT[Edit Distance]
                        PATH[Shortest Path]
                    end

                    style PROBLEM fill:#F44336,color:#fff
                    style MEMO fill:#4CAF50,color:#fff
                    style RESULT fill:#2196F3,color:#fff
              `}
              className="mb-4"
            />
          </div>

          {/* Comparison Table */}
          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">So S√°nh C√°c B√†i To√°n DP:</h4>
            <div className="overflow-x-auto">
              <table className="w-full text-sm">
                <thead>
                  <tr className="border-b">
                    <th className="text-left py-2">B√†i To√°n</th>
                    <th className="text-left py-2">ƒê·ªô Ph·ª©c T·∫°p</th>
                    <th className="text-left py-2">Kh√¥ng Gian</th>
                    <th className="text-left py-2">·ª®ng D·ª•ng</th>
                  </tr>
                </thead>
                <tbody className="text-gray-600 dark:text-gray-300">
                  <tr className="border-b">
                    <td className="py-2 font-medium">Fibonacci</td>
                    <td className="py-2">O(n)</td>
                    <td className="py-2">O(n)</td>
                    <td className="py-2">To√°n h·ªçc, gi·ªõi thi·ªáu DP</td>
                  </tr>
                  <tr className="border-b">
                    <td className="py-2 font-medium">0/1 Knapsack</td>
                    <td className="py-2">O(nW)</td>
                    <td className="py-2">O(nW)</td>
                    <td className="py-2">Ph√¢n b·ªï t√†i nguy√™n</td>
                  </tr>
                  <tr className="border-b">
                    <td className="py-2 font-medium">LCS</td>
                    <td className="py-2">O(mn)</td>
                    <td className="py-2">O(mn)</td>
                    <td className="py-2">Diff tools, DNA analysis</td>
                  </tr>
                  <tr className="border-b">
                    <td className="py-2 font-medium">Coin Change</td>
                    <td className="py-2">O(nA)</td>
                    <td className="py-2">O(A)</td>
                    <td className="py-2">ƒê·ªïi ti·ªÅn, t·ªëi ∆∞u h√≥a</td>
                  </tr>
                  <tr>
                    <td className="py-2 font-medium">Edit Distance</td>
                    <td className="py-2">O(mn)</td>
                    <td className="py-2">O(mn)</td>
                    <td className="py-2">Spell checker, DNA</td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>

          {/* Rust Implementation */}
          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">C√†i ƒê·∫∑t Rust:</h4>
            <RustCodeEditor
              code={`use std::collections::HashMap;

// 1. Fibonacci v·ªõi Memoization
pub fn fibonacci_memo(n: usize, memo: &mut HashMap<usize, u64>) -> u64 {
    if let Some(&result) = memo.get(&n) {
        return result;
    }

    let result = match n {
        0 => 0,
        1 => 1,
        _ => fibonacci_memo(n - 1, memo) + fibonacci_memo(n - 2, memo),
    };

    memo.insert(n, result);
    result
}

// 2. 0/1 Knapsack
pub fn knapsack(weights: &[usize], values: &[usize], capacity: usize) -> usize {
    let n = weights.len();
    let mut dp = vec![vec![0; capacity + 1]; n + 1];

    for i in 1..=n {
        for w in 1..=capacity {
            if weights[i - 1] <= w {
                dp[i][w] = std::cmp::max(
                    dp[i - 1][w],
                    dp[i - 1][w - weights[i - 1]] + values[i - 1]
                );
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }

    dp[n][capacity]
}

// 3. Longest Common Subsequence
pub fn lcs(text1: &str, text2: &str) -> usize {
    let chars1: Vec<char> = text1.chars().collect();
    let chars2: Vec<char> = text2.chars().collect();
    let m = chars1.len();
    let n = chars2.len();

    let mut dp = vec![vec![0; n + 1]; m + 1];

    for i in 1..=m {
        for j in 1..=n {
            if chars1[i - 1] == chars2[j - 1] {
                dp[i][j] = dp[i - 1][j - 1] + 1;
            } else {
                dp[i][j] = std::cmp::max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }

    dp[m][n]
}

// 4. Coin Change (s·ªë xu t·ªëi thi·ªÉu)
pub fn coin_change(coins: &[usize], amount: usize) -> Option<usize> {
    let mut dp = vec![usize::MAX; amount + 1];
    dp[0] = 0;

    for coin in coins {
        for i in *coin..=amount {
            if dp[i - coin] != usize::MAX {
                dp[i] = std::cmp::min(dp[i], dp[i - coin] + 1);
            }
        }
    }

    if dp[amount] == usize::MAX {
        None
    } else {
        Some(dp[amount])
    }
}

// 5. Edit Distance (Levenshtein distance)
pub fn edit_distance(word1: &str, word2: &str) -> usize {
    let chars1: Vec<char> = word1.chars().collect();
    let chars2: Vec<char> = word2.chars().collect();
    let m = chars1.len();
    let n = chars2.len();

    let mut dp = vec![vec![0; n + 1]; m + 1];

    // Initialize base cases
    for i in 0..=m {
        dp[i][0] = i;
    }
    for j in 0..=n {
        dp[0][j] = j;
    }

    for i in 1..=m {
        for j in 1..=n {
            if chars1[i - 1] == chars2[j - 1] {
                dp[i][j] = dp[i - 1][j - 1];
            } else {
                dp[i][j] = 1 + std::cmp::min(
                    std::cmp::min(dp[i - 1][j], dp[i][j - 1]),
                    dp[i - 1][j - 1]
                );
            }
        }
    }

    dp[m][n]
}

// S·ª≠ d·ª•ng
fn main() {
    // Fibonacci
    let mut memo = HashMap::new();
    println!("Fibonacci(10) = {}", fibonacci_memo(10, &mut memo));

    // Knapsack
    let weights = vec![2, 3, 4, 5];
    let values = vec![3, 4, 5, 6];
    println!("Knapsack = {}", knapsack(&weights, &values, 10));

    // LCS
    println!("LCS length = {}", lcs("ABCDGH", "AEDFHR"));

    // Coin Change
    let coins = vec![1, 5, 10, 25];
    if let Some(min_coins) = coin_change(&coins, 11) {
        println!("Min coins = {}", min_coins);
    }

    // Edit Distance
    println!("Edit distance = {}", edit_distance("kitten", "sitting"));
}`}
              height="500px"
            />
          </div>
        </div>
      </div>
    </div>
  );
}