"use client";

import { useState, useEffect } from "react";
import { Search } from "lucide-react";
import { MermaidDiagram } from "~/components/common/MermaidDiagram";
import { RustCodeEditor } from "~/components/common/RustCodeEditor";
import { initRustWasm } from "~/lib/rust-wasm-helper";

export function SearchingSection() {
  const [searchValue, setSearchValue] = useState("");
  const [searchResult, setSearchResult] = useState<string>("");
  const [customArray, setCustomArray] = useState<string>("1,3,5,7,9,11,13,15,17,19");
  const [currentArray, setCurrentArray] = useState<number[]>([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]);
  const [algorithm, setAlgorithm] = useState<"linear" | "binary" | "interpolation" | "jump" | "exponential" | "ternary">("binary");
  const [wasm, setWasm] = useState<any>(null);
  const [wasmReady, setWasmReady] = useState(false);

  // Initialize WASM
  useEffect(() => {
    async function init() {
      try {
        const wasmInstance = await initRustWasm();
        setWasm(wasmInstance);
        setWasmReady(true);
        setSearchResult("‚úÖ Rust WASM Search algorithms ƒë√£ s·∫µn s√†ng!");
      } catch (error) {
        console.error("Failed to initialize WASM:", error);
        setSearchResult("‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o Rust WASM");
      }
    }
    init();
  }, []);

  const updateArray = () => {
    try {
      const newArray = customArray.split(',').map(x => parseInt(x.trim())).filter(x => !isNaN(x));
      newArray.sort((a, b) => a - b); // Ensure sorted for binary search
      setCurrentArray(newArray);
      setSearchResult("");
    } catch (error) {
      setSearchResult("M·∫£ng kh√¥ng h·ª£p l·ªá");
    }
  };

  const runSearch = () => {
    const target = parseInt(searchValue);
    if (isNaN(target)) {
      setSearchResult("Vui l√≤ng nh·∫≠p m·ªôt s·ªë h·ª£p l·ªá");
      return;
    }

    if (!wasmReady || !wasm) {
      setSearchResult("‚ùå WASM ch∆∞a s·∫µn s√†ng");
      return;
    }

    const startTime = performance.now();

    try {
      let result;
      let algorithmName = "";

      switch (algorithm) {
        case "linear":
          result = wasm.algorithms.searching.linearSearch(currentArray, target);
          algorithmName = "Linear Search";
          break;
        case "binary":
          result = wasm.algorithms.searching.binarySearch(currentArray, target);
          algorithmName = "Binary Search";
          break;
        case "interpolation":
          result = wasm.algorithms.searching.interpolationSearch(currentArray, target);
          algorithmName = "Interpolation Search";
          break;
        case "jump":
          result = wasm.algorithms.searching.jumpSearch(currentArray, target);
          algorithmName = "Jump Search";
          break;
        case "exponential":
          result = wasm.algorithms.searching.exponentialSearch(currentArray, target);
          algorithmName = "Exponential Search";
          break;
        case "ternary":
          result = wasm.algorithms.searching.ternarySearch(currentArray, target);
          algorithmName = "Ternary Search";
          break;
        default:
          result = wasm.algorithms.searching.binarySearch(currentArray, target);
          algorithmName = "Binary Search";
      }

      const endTime = performance.now();
      const duration = (endTime - startTime).toFixed(4);

      if (result !== null && result !== undefined) {
        setSearchResult(`ü¶Ä ${algorithmName}: T√¨m th·∫•y ${target} ·ªü v·ªã tr√≠ ${result} trong ${duration}ms`);
      } else {
        setSearchResult(`ü¶Ä ${algorithmName}: Kh√¥ng t√¨m th·∫•y ${target} trong ${duration}ms`);
      }
    } catch (error) {
      setSearchResult("‚ùå Rust WASM search failed: " + error);
    }
  };

  const compareAlgorithms = () => {
    const target = parseInt(searchValue);
    if (isNaN(target)) {
      setSearchResult("Vui l√≤ng nh·∫≠p m·ªôt s·ªë h·ª£p l·ªá");
      return;
    }

    if (!wasmReady || !wasm) {
      setSearchResult("‚ùå WASM ch∆∞a s·∫µn s√†ng");
      return;
    }

    try {
      const comparison = wasm.benchmarks.searching.compare(currentArray, target);
      const results = Array.from(comparison);
      let resultText = `ü¶Ä So s√°nh hi·ªáu su·∫•t t√¨m ki·∫øm ${target}:\n`;
      results.forEach((result: any) => {
        const [algo, time] = Array.from(result);
        resultText += `- ${algo}: ${time}ms\n`;
      });
      setSearchResult(resultText);
    } catch (error) {
      setSearchResult("‚ùå Rust WASM comparison failed: " + error);
    }
  };

  return (
    <div className="space-y-6">
      <div className="bg-white dark:bg-slate-800 rounded-lg p-6 border">
        <h3 className="text-xl font-semibold mb-4 flex items-center gap-2">
          <Search className="h-5 w-5" />
          ü¶Ä Rust WASM Gi·∫£i Thu·∫≠t T√¨m Ki·∫øm
        </h3>

        {/* ƒê·ªãnh nghƒ©a v√† gi·∫£i th√≠ch c∆° b·∫£n */}
        <div className="bg-yellow-50 dark:bg-yellow-900/20 p-4 rounded-lg mb-4 border-l-4 border-yellow-500">
          <h4 className="font-semibold text-yellow-800 dark:text-yellow-300 mb-2">üîç T√¨m Ki·∫øm l√† g√¨?</h4>
          <p className="text-gray-700 dark:text-gray-300 mb-3">
            <strong>T√¨m ki·∫øm (Searching)</strong> l√† qu√° tr√¨nh t√¨m m·ªôt ph·∫ßn t·ª≠ c·ª• th·ªÉ trong t·∫≠p d·ªØ li·ªáu.
            L√† m·ªôt trong nh·ªØng v·∫•n ƒë·ªÅ c∆° b·∫£n nh·∫•t v√† ƒë∆∞·ª£c s·ª≠ d·ª•ng h√†ng ng√†y.
          </p>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
            <div className="bg-white dark:bg-slate-800 p-3 rounded">
              <strong className="text-blue-600 dark:text-blue-400">üì± ·ª®ng d·ª•ng h√†ng ng√†y:</strong>
              <ul className="mt-1 text-gray-600 dark:text-gray-300">
                <li>‚Ä¢ T√¨m li√™n h·ªá trong ƒëi·ªán tho·∫°i</li>
                <li>‚Ä¢ Google search</li>
                <li>‚Ä¢ T√¨m file trong m√°y t√≠nh</li>
                <li>‚Ä¢ T√¨m s·∫£n ph·∫©m trong e-commerce</li>
              </ul>
            </div>
            <div className="bg-white dark:bg-slate-800 p-3 rounded">
              <strong className="text-green-600 dark:text-green-400">‚ö° Y·∫øu t·ªë quan tr·ªçng:</strong>
              <ul className="mt-1 text-gray-600 dark:text-gray-300">
                <li>‚Ä¢ T·ªëc ƒë·ªô t√¨m ki·∫øm</li>
                <li>‚Ä¢ D·ªØ li·ªáu c√≥ s·∫Øp x·∫øp ch∆∞a?</li>
                <li>‚Ä¢ K√≠ch th∆∞·ªõc t·∫≠p d·ªØ li·ªáu</li>
                <li>‚Ä¢ B·ªô nh·ªõ s·ª≠ d·ª•ng</li>
              </ul>
            </div>
          </div>
        </div>

        <div className="bg-violet-50 dark:bg-violet-900/20 p-4 rounded-lg mb-4 border-l-4 border-violet-500">
          <h4 className="font-semibold text-violet-800 dark:text-violet-300 mb-2">üèÉ‚Äç‚ôÇÔ∏è Ph√¢n lo·∫°i thu·∫≠t to√°n t√¨m ki·∫øm:</h4>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
            <div>
              <strong>Linear Search:</strong> Duy·ªát t·ª´ ƒë·∫ßu ƒë·∫øn cu·ªëi
              <br/><span className="text-gray-600 dark:text-gray-400">O(n) - ƒê∆°n gi·∫£n, m·∫£ng kh√¥ng c·∫ßn s·∫Øp x·∫øp</span>
            </div>
            <div>
              <strong>Binary Search:</strong> Chia ƒë√¥i t√¨m ki·∫øm
              <br/><span className="text-gray-600 dark:text-gray-400">O(log n) - Nhanh, m·∫£ng ph·∫£i s·∫Øp x·∫øp</span>
            </div>
          </div>
        </div>

        <div className="space-y-4">
          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">C·∫•u H√¨nh M·∫£ng:</h4>
            <div className="flex gap-2 mb-3">
              <input
                type="text"
                value={customArray}
                onChange={(e) => setCustomArray(e.target.value)}
                placeholder="Nh·∫≠p m·∫£ng (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)"
                className="px-3 py-2 border rounded dark:bg-slate-600 dark:border-slate-500 flex-1"
              />
              <button
                onClick={updateArray}
                className="px-4 py-2 bg-purple-500 text-white rounded hover:bg-purple-600"
              >
                C·∫≠p nh·∫≠t
              </button>
            </div>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              M·∫£ng hi·ªán t·∫°i: [{currentArray.join(", ")}]
            </p>
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">T√¨m Ki·∫øm T∆∞∆°ng T√°c:</h4>
            <div className="flex gap-2 mb-3 flex-wrap">
              <select
                value={algorithm}
                onChange={(e) => setAlgorithm(e.target.value as "linear" | "binary" | "interpolation" | "jump" | "exponential" | "ternary")}
                className="px-3 py-2 border rounded dark:bg-slate-600 dark:border-slate-500"
              >
                <option value="linear">Linear Search</option>
                <option value="binary">Binary Search</option>
                <option value="interpolation">Interpolation Search</option>
                <option value="jump">Jump Search</option>
                <option value="exponential">Exponential Search</option>
                <option value="ternary">Ternary Search</option>
              </select>
              <input
                type="number"
                value={searchValue}
                onChange={(e) => setSearchValue(e.target.value)}
                placeholder="Nh·∫≠p s·ªë c·∫ßn t√¨m"
                className="px-3 py-2 border rounded dark:bg-slate-600 dark:border-slate-500"
              />
              <button
                onClick={runSearch}
                disabled={!wasmReady}
                className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50"
              >
                ü¶Ä T√¨m Ki·∫øm
              </button>
              <button
                onClick={compareAlgorithms}
                disabled={!wasmReady}
                className="px-4 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 disabled:opacity-50"
              >
                üèÅ So S√°nh T·∫•t C·∫£
              </button>
            </div>

            {searchResult && (
              <div className="mb-3 p-3 bg-orange-50 dark:bg-orange-900/20 rounded">
                <strong>K·∫øt qu·∫£:</strong>
                <pre className="mt-2 text-sm whitespace-pre-wrap">{searchResult}</pre>
              </div>
            )}
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">So S√°nh Thu·∫≠t To√°n T√¨m Ki·∫øm:</h4>
            <MermaidDiagram
              chart={`
                graph LR
                    subgraph "T√¨m Ki·∫øm Tuy·∫øn T√≠nh"
                        LS_START([B·∫Øt ƒë·∫ßu]) --> LS_I[i = 0]
                        LS_I --> LS_CHECK{"arr[i] == target?"}
                        LS_CHECK -->|C√≥| LS_FOUND[T√¨m th·∫•y t·∫°i i]
                        LS_CHECK -->|Kh√¥ng| LS_NEXT[i++]
                        LS_NEXT --> LS_END_CHECK{i < length?}
                        LS_END_CHECK -->|C√≥| LS_CHECK
                        LS_END_CHECK -->|Kh√¥ng| LS_NOT_FOUND[Kh√¥ng t√¨m th·∫•y]
                    end

                    subgraph "T√¨m Ki·∫øm Nh·ªã Ph√¢n"
                        BS_START([B·∫Øt ƒë·∫ßu]) --> BS_INIT["left = 0, right = n-1"]
                        BS_INIT --> BS_CHECK{left <= right?}
                        BS_CHECK -->|Kh√¥ng| BS_NOT_FOUND[Kh√¥ng t√¨m th·∫•y]
                        BS_CHECK -->|C√≥| BS_MID["mid = (left + right) / 2"]
                        BS_MID --> BS_COMPARE{"arr[mid] == target?"}
                        BS_COMPARE -->|C√≥| BS_FOUND[T√¨m th·∫•y t·∫°i mid]
                        BS_COMPARE -->|"arr[mid] < target"| BS_RIGHT[left = mid + 1]
                        BS_COMPARE -->|"arr[mid] > target"| BS_LEFT[right = mid - 1]
                        BS_RIGHT --> BS_CHECK
                        BS_LEFT --> BS_CHECK
                    end

                    style LS_FOUND fill:#4CAF50,color:#fff
                    style BS_FOUND fill:#4CAF50,color:#fff
                    style LS_NOT_FOUND fill:#F44336,color:#fff
                    style BS_NOT_FOUND fill:#F44336,color:#fff
              `}
              className="mb-4"
            />
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">So S√°nh Gi·∫£i Thu·∫≠t:</h4>
            <div className="overflow-x-auto">
              <table className="w-full text-sm">
                <thead>
                  <tr className="border-b">
                    <th className="text-left py-2">Gi·∫£i Thu·∫≠t</th>
                    <th className="text-left py-2">ƒê·ªô Ph·ª©c T·∫°p</th>
                    <th className="text-left py-2">Y√™u C·∫ßu</th>
                    <th className="text-left py-2">∆Øu ƒêi·ªÉm</th>
                    <th className="text-left py-2">Nh∆∞·ª£c ƒêi·ªÉm</th>
                  </tr>
                </thead>
                <tbody className="text-gray-600 dark:text-gray-300">
                  <tr className="border-b">
                    <td className="py-2 font-medium">Linear Search</td>
                    <td className="py-2">O(n)</td>
                    <td className="py-2">Kh√¥ng</td>
                    <td className="py-2">ƒê∆°n gi·∫£n, m·∫£ng kh√¥ng c·∫ßn s·∫Øp x·∫øp</td>
                    <td className="py-2">Ch·∫≠m v·ªõi m·∫£ng l·ªõn</td>
                  </tr>
                  <tr className="border-b">
                    <td className="py-2 font-medium">Binary Search</td>
                    <td className="py-2">O(log n)</td>
                    <td className="py-2">M·∫£ng ƒë√£ s·∫Øp x·∫øp</td>
                    <td className="py-2">R·∫•t nhanh</td>
                    <td className="py-2">C·∫ßn s·∫Øp x·∫øp tr∆∞·ªõc</td>
                  </tr>
                  <tr>
                    <td className="py-2 font-medium">Interpolation Search</td>
                    <td className="py-2">O(log log n)</td>
                    <td className="py-2">M·∫£ng ƒë√£ s·∫Øp x·∫øp, ph√¢n b·ªë ƒë·ªÅu</td>
                    <td className="py-2">Nhanh nh·∫•t khi d·ªØ li·ªáu ph√¢n b·ªë ƒë·ªÅu</td>
                    <td className="py-2">Hi·ªáu su·∫•t gi·∫£m v·ªõi d·ªØ li·ªáu kh√¥ng ƒë·ªÅu</td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">C√†i ƒê·∫∑t Rust:</h4>
            <RustCodeEditor
              code={`// Binary Search - O(log n) - y√™u c·∫ßu m·∫£ng ƒë√£ s·∫Øp x·∫øp
fn binary_search<T: Ord>(arr: &[T], target: &T) -> Option<usize> {
    let mut left = 0;
    let mut right = arr.len().saturating_sub(1);

    while left <= right {
        let mid = left + (right - left) / 2;

        match arr[mid].cmp(target) {
            std::cmp::Ordering::Equal => return Some(mid),
            std::cmp::Ordering::Less => left = mid + 1,
            std::cmp::Ordering::Greater => {
                if mid == 0 { break; }
                right = mid - 1;
            }
        }
    }
    None
}

// Linear Search - O(n) - ho·∫°t ƒë·ªông v·ªõi m·ªçi m·∫£ng
fn linear_search<T: PartialEq>(arr: &[T], target: &T) -> Option<usize> {
    for (index, item) in arr.iter().enumerate() {
        if item == target {
            return Some(index);
        }
    }
    None
}

// Interpolation Search - O(log log n) v·ªõi d·ªØ li·ªáu ph√¢n b·ªë ƒë·ªÅu
fn interpolation_search(arr: &[i32], target: i32) -> Option<usize> {
    let mut left = 0;
    let mut right = arr.len().saturating_sub(1);

    while left <= right && target >= arr[left] && target <= arr[right] {
        if left == right {
            return if arr[left] == target { Some(left) } else { None };
        }

        let pos = left + ((target - arr[left]) as usize * (right - left))
                   / (arr[right] - arr[left]) as usize;

        if arr[pos] == target {
            return Some(pos);
        } else if arr[pos] < target {
            left = pos + 1;
        } else {
            right = pos.saturating_sub(1);
        }
    }
    None
}`}
              height="400px"
            />
          </div>
        </div>
      </div>
    </div>
  );
}