"use client";

import { useState } from "react";
import { Layout } from "lucide-react";
import { MermaidDiagram } from "~/components/common/MermaidDiagram";
import { RustCodeEditor } from "~/components/common/RustCodeEditor";
import { CppCodeEditor } from "~/components/common/CppCodeEditor";
import { PythonCodeEditor } from "~/components/common/PythonCodeEditor";
import { SmartCodeRunner } from "~/components/common/SmartCodeRunner";
import { EditableCodeEditor } from "~/components/common/EditableCodeEditor";

export function ArraysSection() {
  const [vector, setVector] = useState<number[]>([]);
  const [inputValue, setInputValue] = useState("");
  const [activeLanguageTab, setActiveLanguageTab] = useState("rust");
  const [activeSection, setActiveSection] = useState<"overview" | "interactive" | "implementation">("overview");

  // Interactive visualization states
  const [animationArray, setAnimationArray] = useState<number[]>([10, 25, 8, 42, 15, 33]);
  const [searchValue, setSearchValue] = useState("");
  const [accessIndex, setAccessIndex] = useState("");
  const [highlightedIndex, setHighlightedIndex] = useState<number | null>(null);
  const [animationStep, setAnimationStep] = useState<string>("");
  const [isAnimating, setIsAnimating] = useState(false);

  // Code running states
  const [isRunningCode, setIsRunningCode] = useState(false);
  const [codeOutput, setCodeOutput] = useState<string>("");
  const [showOutput, setShowOutput] = useState(false);

  // Code storage for different languages
  const [codeState, setCodeState] = useState({
    rust: `fn main() {
    println!("=== Vector Demo trong Rust ===");

    // Vector trong Rust - An to√†n b·ªô nh·ªõ v√† nhanh ch√≥ng
    let mut vec = Vec::new();

    // Th√™m ph·∫ßn t·ª≠
    println!("Th√™m c√°c ph·∫ßn t·ª≠: 1, 2, 3");
    vec.push(1);
    vec.push(2);
    vec.push(3);

    println!("Vector ban ƒë·∫ßu: {:?}", vec);
    println!("K√≠ch th∆∞·ªõc: {}", vec.len());

    // Truy c·∫≠p an to√†n
    match vec.get(0) {
        Some(value) => println!("Ph·∫ßn t·ª≠ ƒë·∫ßu: {}", value),
        None => println!("Index kh√¥ng t·ªìn t·∫°i"),
    }

    // T√¨m ki·∫øm ph·∫ßn t·ª≠
    let target = 2;
    match vec.iter().position(|&x| x == target) {
        Some(index) => println!("T√¨m th·∫•y ph·∫ßn t·ª≠ {} t·∫°i v·ªã tr√≠: {}", target, index),
        None => println!("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ {}", target),
    }

    // Duy·ªát qua vector
    println!("Duy·ªát vector:");
    for (index, value) in vec.iter().enumerate() {
        println!("  vec[{}] = {}", index, value);
    }

    // X√≥a ph·∫ßn t·ª≠ cu·ªëi
    if let Some(last) = vec.pop() {
        println!("ƒê√£ x√≥a ph·∫ßn t·ª≠ cu·ªëi: {}", last);
    }

    println!("Vector sau khi x√≥a: {:?}", vec);
    println!("K√≠ch th∆∞·ªõc sau khi x√≥a: {}", vec.len());

    // Th√™m th√™m ph·∫ßn t·ª≠
    vec.push(0);
    println!("Th√™m ph·∫ßn t·ª≠ 0 v√†o cu·ªëi:");
    println!("Vector cu·ªëi c√πng: {:?}", vec);

    // Vector v·ªõi dung l∆∞·ª£ng ƒë·ªãnh tr∆∞·ªõc
    let vec_with_capacity: Vec<i32> = Vec::with_capacity(10);
    println!("Vector v·ªõi capacity 10: {:?}", vec_with_capacity);
    println!("K√≠ch th∆∞·ªõc: {}, Capacity: {}", vec_with_capacity.len(), vec_with_capacity.capacity());
}`,
    cpp: `#include <vector>
#include <iostream>
#include <algorithm>

int main() {
    std::cout << "=== Vector Demo trong C++ ===" << std::endl;

    // Vector trong C++ - Hi·ªáu qu·∫£ v√† linh ho·∫°t
    std::vector<int> vec;

    // Th√™m ph·∫ßn t·ª≠
    std::cout << "Th√™m c√°c ph·∫ßn t·ª≠: 1, 2, 3" << std::endl;
    vec.push_back(1);
    vec.push_back(2);
    vec.push_back(3);

    std::cout << "Vector ban ƒë·∫ßu: ";
    for (const auto& value : vec) {
        std::cout << value << " ";
    }
    std::cout << std::endl;
    std::cout << "K√≠ch th∆∞·ªõc: " << vec.size() << std::endl;

    // Truy c·∫≠p an to√†n
    if (vec.size() > 0) {
        std::cout << "Ph·∫ßn t·ª≠ ƒë·∫ßu: " << vec[0] << std::endl;
    }

    // T√¨m ki·∫øm ph·∫ßn t·ª≠
    int target = 2;
    auto it = std::find(vec.begin(), vec.end(), target);
    if (it != vec.end()) {
        std::cout << "T√¨m th·∫•y ph·∫ßn t·ª≠ " << target << " t·∫°i v·ªã tr√≠: " << std::distance(vec.begin(), it) << std::endl;
    } else {
        std::cout << "Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ " << target << std::endl;
    }

    // Duy·ªát qua vector
    std::cout << "Duy·ªát vector:" << std::endl;
    for (size_t i = 0; i < vec.size(); ++i) {
        std::cout << "  vec[" << i << "] = " << vec[i] << std::endl;
    }

    // X√≥a ph·∫ßn t·ª≠ cu·ªëi
    if (!vec.empty()) {
        int last = vec.back();
        vec.pop_back();
        std::cout << "ƒê√£ x√≥a ph·∫ßn t·ª≠ cu·ªëi: " << last << std::endl;
    }

    std::cout << "Vector sau khi x√≥a: ";
    for (const auto& value : vec) {
        std::cout << value << " ";
    }
    std::cout << std::endl;
    std::cout << "K√≠ch th∆∞·ªõc sau khi x√≥a: " << vec.size() << std::endl;

    // Th√™m th√™m ph·∫ßn t·ª≠
    vec.push_back(0);
    std::cout << "Th√™m ph·∫ßn t·ª≠ 0 v√†o cu·ªëi:" << std::endl;
    std::cout << "Vector cu·ªëi c√πng: ";
    for (const auto& value : vec) {
        std::cout << value << " ";
    }
    std::cout << std::endl;

    // Vector v·ªõi capacity ƒë·ªãnh tr∆∞·ªõc
    std::vector<int> vec_with_capacity;
    vec_with_capacity.reserve(10);
    std::cout << "Vector v·ªõi capacity 10: ";
    for (const auto& value : vec_with_capacity) {
        std::cout << value << " ";
    }
    if (vec_with_capacity.empty()) std::cout << "(r·ªóng)";
    std::cout << std::endl;
    std::cout << "K√≠ch th∆∞·ªõc: " << vec_with_capacity.size() << ", Capacity: " << vec_with_capacity.capacity() << std::endl;

    return 0;
}`,
    python: `def main():
    print("=== List Demo trong Python ===")

    # List trong Python - Linh ho·∫°t v√† d·ªÖ s·ª≠ d·ª•ng
    vec = []

    # Th√™m ph·∫ßn t·ª≠
    print("Th√™m c√°c ph·∫ßn t·ª≠: 1, 2, 3")
    vec.append(1)
    vec.append(2)
    vec.append(3)

    print(f"List ban ƒë·∫ßu: {vec}")
    print(f"K√≠ch th∆∞·ªõc: {len(vec)}")

    # Truy c·∫≠p an to√†n
    if len(vec) > 0:
        print(f"Ph·∫ßn t·ª≠ ƒë·∫ßu: {vec[0]}")

    # T√¨m ki·∫øm ph·∫ßn t·ª≠
    target = 2
    try:
        index = vec.index(target)
        print(f"T√¨m th·∫•y ph·∫ßn t·ª≠ {target} t·∫°i v·ªã tr√≠: {index}")
    except ValueError:
        print(f"Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ {target}")

    # Duy·ªát qua list
    print("Duy·ªát list:")
    for index, value in enumerate(vec):
        print(f"  vec[{index}] = {value}")

    # X√≥a ph·∫ßn t·ª≠ cu·ªëi
    if vec:
        last = vec.pop()
        print(f"ƒê√£ x√≥a ph·∫ßn t·ª≠ cu·ªëi: {last}")

    print(f"List sau khi x√≥a: {vec}")
    print(f"K√≠ch th∆∞·ªõc sau khi x√≥a: {len(vec)}")

    # Th√™m th√™m ph·∫ßn t·ª≠
    vec.append(0)
    print("Th√™m ph·∫ßn t·ª≠ 0 v√†o cu·ªëi:")
    print(f"List cu·ªëi c√πng: {vec}")

    # List v·ªõi capacity (pre-allocation)
    vec_with_capacity = [None] * 10  # Pre-allocate 10 elements
    vec_with_capacity = []  # Reset to empty
    print(f"List v·ªõi pre-allocation: {vec_with_capacity}")
    print(f"K√≠ch th∆∞·ªõc: {len(vec_with_capacity)}, Capacity: (dynamic)")

    # T√≠nh nƒÉng ƒë·∫∑c bi·ªát c·ªßa Python
    print("\\nT√≠nh nƒÉng m·∫°nh m·∫Ω c·ªßa Python:")
    # List comprehension
    squares = [x**2 for x in vec]
    print(f"B√¨nh ph∆∞∆°ng c√°c ph·∫ßn t·ª≠: {squares}")

    # Slicing
    if len(vec) >= 2:
        subset = vec[0:2]
        print(f"Slice [0:2]: {subset}")

if __name__ == "__main__":
    main()`
  });

  const handlePush = () => {
    const value = parseInt(inputValue);
    if (!isNaN(value)) {
      setVector([...vector, value]);
      setInputValue("");
    }
  };

  const handlePop = () => {
    setVector(vector.slice(0, -1));
  };

  // Animation functions
  const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

  const animateAccess = async () => {
    const index = parseInt(accessIndex);
    if (isNaN(index) || index < 0 || index >= animationArray.length) {
      setAnimationStep("‚ùå Ch·ªâ s·ªë kh√¥ng h·ª£p l·ªá!");
      return;
    }

    setIsAnimating(true);
    setAnimationStep(`üîç Truy c·∫≠p ph·∫ßn t·ª≠ t·∫°i index ${index}...`);

    // Highlight the accessed element
    setHighlightedIndex(index);
    await sleep(1000);

    setAnimationStep(`‚úÖ Gi√° tr·ªã t·∫°i index ${index} l√†: ${animationArray[index]} (ƒê·ªô ph·ª©c t·∫°p: O(1))`);
    await sleep(2000);

    setHighlightedIndex(null);
    setIsAnimating(false);
  };

  const animateSearch = async () => {
    const searchVal = parseInt(searchValue);
    if (isNaN(searchVal)) {
      setAnimationStep("‚ùå Gi√° tr·ªã t√¨m ki·∫øm kh√¥ng h·ª£p l·ªá!");
      return;
    }

    setIsAnimating(true);
    setAnimationStep(`üîç B·∫Øt ƒë·∫ßu t√¨m ki·∫øm gi√° tr·ªã ${searchVal}...`);
    await sleep(1000);

    // Linear search animation
    for (let i = 0; i < animationArray.length; i++) {
      setHighlightedIndex(i);
      setAnimationStep(`üîç Ki·ªÉm tra index ${i}: ${animationArray[i]} ${animationArray[i] === searchVal ? '= ‚úÖ' : '‚â†'} ${searchVal}`);
      await sleep(800);

      if (animationArray[i] === searchVal) {
        setAnimationStep(`üéâ T√¨m th·∫•y ${searchVal} t·∫°i index ${i}! (ƒê·ªô ph·ª©c t·∫°p: O(n))`);
        await sleep(2000);
        setHighlightedIndex(null);
        setIsAnimating(false);
        return;
      }
    }

    setAnimationStep(`‚ùå Kh√¥ng t√¨m th·∫•y ${searchVal} trong m·∫£ng! (ƒê√£ ki·ªÉm tra ${animationArray.length} ph·∫ßn t·ª≠)`);
    await sleep(2000);
    setHighlightedIndex(null);
    setIsAnimating(false);
  };

  const animateInsert = async () => {
    const newValue = parseInt(inputValue);
    if (isNaN(newValue)) return;

    setIsAnimating(true);
    setAnimationStep(`‚ûï Th√™m ${newValue} v√†o cu·ªëi m·∫£ng...`);

    // Show the new element being added
    setAnimationArray([...animationArray, newValue]);
    setHighlightedIndex(animationArray.length);
    await sleep(1000);

    setAnimationStep(`‚úÖ ƒê√£ th√™m ${newValue}! K√≠ch th∆∞·ªõc m·∫£ng: ${animationArray.length + 1} (ƒê·ªô ph·ª©c t·∫°p: O(1) amortized)`);
    await sleep(2000);

    setHighlightedIndex(null);
    setIsAnimating(false);
    setInputValue("");
  };

  const animateRemove = async () => {
    if (animationArray.length === 0) {
      setAnimationStep("‚ùå M·∫£ng ƒë√£ r·ªóng!");
      return;
    }

    setIsAnimating(true);
    const lastIndex = animationArray.length - 1;
    const removedValue = animationArray[lastIndex];

    setHighlightedIndex(lastIndex);
    setAnimationStep(`‚ûñ X√≥a ph·∫ßn t·ª≠ cu·ªëi: ${removedValue}...`);
    await sleep(1000);

    setAnimationArray(animationArray.slice(0, -1));
    setAnimationStep(`‚úÖ ƒê√£ x√≥a ${removedValue}! K√≠ch th∆∞·ªõc m·∫£ng: ${animationArray.length - 1} (ƒê·ªô ph·ª©c t·∫°p: O(1))`);
    await sleep(2000);

    setHighlightedIndex(null);
    setIsAnimating(false);
  };

  const resetArray = () => {
    setAnimationArray([10, 25, 8, 42, 15, 33]);
    setHighlightedIndex(null);
    setAnimationStep("");
  };

  // Code running functions
  const getLanguageId = (lang: string): number => {
    const languageMap: Record<string, number> = {
      rust: 73,
      cpp: 54,
      python: 71,
    };
    return languageMap[lang] || 54;
  };

  const getCurrentCode = (): string => {
    return codeState[activeLanguageTab as keyof typeof codeState] || "";
  };

  const updateCode = (newCode: string) => {
    setCodeState(prev => ({
      ...prev,
      [activeLanguageTab]: newCode
    }));
  };

  const handleRunCode = async (input: string) => {
    setIsRunningCode(true);
    setCodeOutput("ƒêang ch·∫°y code...");
    setShowOutput(true);

    try {
      const response = await fetch('/api/run-code', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          code: getCurrentCode(),
          language_id: getLanguageId(activeLanguageTab),
          stdin: input
        }),
      });

      const result = await response.json();

      if (result.error) {
        setCodeOutput(`L·ªói: ${result.error}`);
      } else if (result.logs && result.logs.length > 0) {
        setCodeOutput(result.logs.join('\n'));
      } else {
        setCodeOutput('Code ch·∫°y th√†nh c√¥ng nh∆∞ng kh√¥ng c√≥ output.');
      }
    } catch (error) {
      setCodeOutput(`L·ªói k·∫øt n·ªëi: ${error instanceof Error ? error.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
    } finally {
      setIsRunningCode(false);
    }
  };

  return (
    <div className="max-w-7xl mx-auto space-y-8">
      {/* Header Section with Navigation Pills */}
      <div className="bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 dark:from-slate-800 dark:via-slate-800 dark:to-slate-700 rounded-xl p-6 border border-blue-100 dark:border-slate-600 shadow-md">
        <div className="flex flex-col lg:flex-row lg:items-center justify-between gap-4">
          <div>
            <h3 className="text-2xl font-bold mb-2 flex items-center gap-2 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
              <Layout className="h-6 w-6 text-blue-500" />
              M·∫£ng & Vector
            </h3>
            <p className="text-gray-600 dark:text-gray-300 text-base leading-relaxed max-w-2xl">
              Kh√°m ph√° c·∫•u tr√∫c d·ªØ li·ªáu c∆° b·∫£n nh·∫•t - t·ª´ m·∫£ng tƒ©nh ƒë·∫øn vector ƒë·ªông v·ªõi c√°c minh h·ªça t∆∞∆°ng t√°c.
            </p>
          </div>

          {/* Navigation Pills */}
          <div className="flex bg-white dark:bg-slate-800 rounded-lg p-1 shadow-sm border border-gray-200 dark:border-slate-600">
            <button
              onClick={() => setActiveSection("overview")}
              className={`px-4 py-2 rounded-md font-medium text-sm transition-all duration-200 ${
                activeSection === "overview"
                  ? "bg-blue-500 text-white shadow-sm"
                  : "text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-slate-700"
              }`}
            >
              üìö T·ªïng quan
            </button>
            <button
              onClick={() => setActiveSection("interactive")}
              className={`px-4 py-2 rounded-md font-medium text-sm transition-all duration-200 ${
                activeSection === "interactive"
                  ? "bg-purple-500 text-white shadow-sm"
                  : "text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-slate-700"
              }`}
            >
              üéÆ T∆∞∆°ng t√°c
            </button>
            <button
              onClick={() => setActiveSection("implementation")}
              className={`px-4 py-2 rounded-md font-medium text-sm transition-all duration-200 ${
                activeSection === "implementation"
                  ? "bg-green-500 text-white shadow-sm"
                  : "text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-slate-700"
              }`}
            >
              üíª C√†i ƒë·∫∑t
            </button>
          </div>
        </div>
      </div>

      {/* Overview Section */}
      {activeSection === "overview" && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Array Definition */}
          <div className="bg-white dark:bg-slate-800 rounded-xl p-5 border border-blue-200 dark:border-slate-600 shadow-md hover:shadow-lg transition-shadow">
            <div className="flex items-center gap-2 mb-3">
              <div className="p-1.5 bg-blue-100 dark:bg-blue-900/30 rounded-lg">
                üìä
              </div>
              <h4 className="text-lg font-bold text-blue-800 dark:text-blue-300">M·∫£ng (Array)</h4>
            </div>
            <p className="text-gray-700 dark:text-gray-300 mb-3 text-sm leading-relaxed">
              C·∫•u tr√∫c d·ªØ li·ªáu c∆° b·∫£n nh·∫•t, l∆∞u tr·ªØ c√°c ph·∫ßn t·ª≠ c√πng ki·ªÉu trong b·ªô nh·ªõ li√™n ti·∫øp.
              M·ªói ph·∫ßn t·ª≠ c√≥ m·ªôt ch·ªâ s·ªë (index) b·∫Øt ƒë·∫ßu t·ª´ 0.
            </p>

            <div className="space-y-2">
              <div className="bg-green-50 dark:bg-green-900/20 p-3 rounded-lg border border-green-200 dark:border-green-800">
                <h5 className="font-semibold text-green-700 dark:text-green-300 mb-2 flex items-center gap-2">
                  ‚úÖ ∆Øu ƒëi·ªÉm
                </h5>
                <ul className="space-y-1 text-sm text-gray-600 dark:text-gray-300">
                  <li className="flex items-center gap-2">
                    <span className="w-1.5 h-1.5 bg-green-500 rounded-full"></span>
                    Truy c·∫≠p si√™u nhanh O(1)
                  </li>
                  <li className="flex items-center gap-2">
                    <span className="w-1.5 h-1.5 bg-green-500 rounded-full"></span>
                    Ti·∫øt ki·ªám b·ªô nh·ªõ
                  </li>
                  <li className="flex items-center gap-2">
                    <span className="w-1.5 h-1.5 bg-green-500 rounded-full"></span>
                    Duy·ªát tu·∫ßn t·ª± hi·ªáu qu·∫£
                  </li>
                </ul>
              </div>

              <div className="bg-red-50 dark:bg-red-900/20 p-3 rounded-lg border border-red-200 dark:border-red-800">
                <h5 className="font-semibold text-red-700 dark:text-red-300 mb-2 flex items-center gap-2">
                  ‚ùå Nh∆∞·ª£c ƒëi·ªÉm
                </h5>
                <ul className="space-y-1 text-sm text-gray-600 dark:text-gray-300">
                  <li className="flex items-center gap-2">
                    <span className="w-1.5 h-1.5 bg-red-500 rounded-full"></span>
                    K√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh
                  </li>
                  <li className="flex items-center gap-2">
                    <span className="w-1.5 h-1.5 bg-red-500 rounded-full"></span>
                    Ch√®n/x√≥a gi·ªØa ch·∫≠m O(n)
                  </li>
                  <li className="flex items-center gap-2">
                    <span className="w-1.5 h-1.5 bg-red-500 rounded-full"></span>
                    Ph·∫£i bi·∫øt tr∆∞·ªõc k√≠ch th∆∞·ªõc
                  </li>
                </ul>
              </div>
            </div>
          </div>

          {/* Vector Definition */}
          <div className="bg-white dark:bg-slate-800 rounded-xl p-5 border border-purple-200 dark:border-slate-600 shadow-md hover:shadow-lg transition-shadow">
            <div className="flex items-center gap-2 mb-3">
              <div className="p-1.5 bg-purple-100 dark:bg-purple-900/30 rounded-lg">
                üîß
              </div>
              <h4 className="text-lg font-bold text-purple-800 dark:text-purple-300">Vector (M·∫£ng ƒê·ªông)</h4>
            </div>
            <p className="text-gray-700 dark:text-gray-300 mb-3 text-sm leading-relaxed">
              Phi√™n b·∫£n c·∫£i ti·∫øn c·ªßa m·∫£ng, c√≥ th·ªÉ t·ª± ƒë·ªông thay ƒë·ªïi k√≠ch th∆∞·ªõc.
              Khi h·∫øt ch·ªó, vector s·∫Ω t·ª± ƒë·ªông c·∫•p ph√°t b·ªô nh·ªõ m·ªõi.
            </p>

            {/* Complexity Table */}
            <div className="bg-gray-50 dark:bg-slate-700 rounded-lg p-3 border">
              <h5 className="font-medium mb-2 text-gray-800 dark:text-gray-200 text-sm">ƒê·ªô ph·ª©c t·∫°p th·ªùi gian</h5>
              <div className="grid grid-cols-2 gap-2 text-xs">
                <div className="flex justify-between items-center p-2 bg-white dark:bg-slate-800 rounded border">
                  <span>Truy c·∫≠p:</span>
                  <span className="font-mono bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300 px-2 py-1 rounded">O(1)</span>
                </div>
                <div className="flex justify-between items-center p-2 bg-white dark:bg-slate-800 rounded border">
                  <span>T√¨m ki·∫øm:</span>
                  <span className="font-mono bg-yellow-100 dark:bg-yellow-900/30 text-yellow-700 dark:text-yellow-300 px-2 py-1 rounded">O(n)</span>
                </div>
                <div className="flex justify-between items-center p-2 bg-white dark:bg-slate-800 rounded border">
                  <span>Th√™m cu·ªëi:</span>
                  <span className="font-mono bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300 px-2 py-1 rounded">O(1)*</span>
                </div>
                <div className="flex justify-between items-center p-2 bg-white dark:bg-slate-800 rounded border">
                  <span>X√≥a cu·ªëi:</span>
                  <span className="font-mono bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300 px-2 py-1 rounded">O(1)</span>
                </div>
              </div>
              <p className="text-xs text-gray-500 dark:text-gray-400 mt-2">* amortized</p>
            </div>
          </div>
        </div>
      )}

      {/* Interactive Section */}
      {activeSection === "interactive" && (
        <div className="space-y-6">
          {/* Interactive Array Visualization */}
          <div className="bg-gradient-to-br from-purple-50 via-pink-50 to-blue-50 dark:from-purple-900/20 dark:via-pink-900/20 dark:to-blue-900/20 rounded-xl p-6 border border-purple-200 dark:border-purple-800 shadow-md">
            <div className="flex items-center gap-2 mb-4">
              <div className="p-2 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full text-white text-sm">
                üéÆ
              </div>
              <div>
                <h4 className="text-lg font-bold text-purple-800 dark:text-purple-300">
                  Minh H·ªça T∆∞∆°ng T√°c
                </h4>
                <p className="text-gray-600 dark:text-gray-400 text-sm">
                  Thao t√°c tr·ª±c ti·∫øp v·ªõi m·∫£ng ƒë·ªÉ hi·ªÉu r√µ c√°ch ho·∫°t ƒë·ªông
                </p>
              </div>
            </div>

            {/* Array Visualization */}
            <div className="mb-6">
              <div className="flex items-center justify-center mb-6 overflow-x-auto pb-4">
                <div className="flex items-center gap-2 min-w-max">
                  {animationArray.map((value, index) => (
                    <div key={`${index}-${value}`} className="flex flex-col items-center group">
                      {/* Index label */}
                      <div className="text-xs font-medium text-gray-600 dark:text-gray-400 mb-1 h-4">
                        {index}
                      </div>
                      {/* Array element */}
                      <div
                        className={`w-14 h-14 flex items-center justify-center rounded-lg border-2 transition-all duration-500 font-bold text-lg cursor-pointer ${
                          highlightedIndex === index
                            ? "bg-gradient-to-r from-yellow-400 to-orange-400 border-red-500 scale-110 shadow-xl animate-pulse text-white"
                            : "bg-gradient-to-br from-blue-100 to-indigo-100 dark:from-blue-800 dark:to-indigo-800 border-blue-300 dark:border-blue-600 hover:scale-105 hover:shadow-md group-hover:from-blue-200 group-hover:to-indigo-200 dark:group-hover:from-blue-700 dark:group-hover:to-indigo-700"
                        }`}
                      >
                        {value}
                      </div>
                      {/* Memory address visual */}
                      <div className="text-xs text-gray-400 mt-1 font-mono">
                        0x{(1000 + index * 4).toString(16)}
                      </div>
                    </div>
                  ))}
                  {animationArray.length === 0 && (
                    <div className="text-gray-500 italic text-center p-8 bg-gray-50 dark:bg-slate-700 rounded-xl border-2 border-dashed border-gray-300 dark:border-gray-600">
                      <div className="text-2xl mb-1">üì≠</div>
                      <div className="text-sm font-semibold mb-1">M·∫£ng r·ªóng</div>
                      <div className="text-xs">H√£y th√™m ph·∫ßn t·ª≠ ƒë·ªÉ b·∫Øt ƒë·∫ßu</div>
                    </div>
                  )}
                </div>
              </div>

              {/* Animation status */}
              {animationStep && (
                <div className="bg-gradient-to-r from-orange-100 to-yellow-100 dark:from-orange-900/30 dark:to-yellow-900/30 border-2 border-orange-300 dark:border-orange-700 rounded-xl p-4 mb-6 shadow-md">
                  <div className="flex items-center gap-3">
                    <div className={isAnimating ? "animate-spin" : ""}>‚ö°</div>
                    <div className="font-semibold text-orange-800 dark:text-orange-300 text-lg">
                      {animationStep}
                    </div>
                  </div>
                </div>
              )}

              {/* Array info */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
                <div className="bg-white dark:bg-slate-800 p-4 rounded-xl border border-gray-200 dark:border-slate-600 shadow-sm">
                  <div className="flex items-center gap-3">
                    <div className="p-2 bg-blue-100 dark:bg-blue-900/30 rounded-lg">üìè</div>
                    <div>
                      <div className="text-sm text-gray-600 dark:text-gray-400">K√≠ch th∆∞·ªõc</div>
                      <div className="text-xl font-bold text-blue-600 dark:text-blue-400">{animationArray.length}</div>
                    </div>
                  </div>
                </div>
                <div className="bg-white dark:bg-slate-800 p-4 rounded-xl border border-gray-200 dark:border-slate-600 shadow-sm">
                  <div className="flex items-center gap-3">
                    <div className="p-2 bg-green-100 dark:bg-green-900/30 rounded-lg">üî¢</div>
                    <div>
                      <div className="text-sm text-gray-600 dark:text-gray-400">Index t·ª´</div>
                      <div className="text-xl font-bold text-green-600 dark:text-green-400">
                        0 ‚Üí {Math.max(0, animationArray.length - 1)}
                      </div>
                    </div>
                  </div>
                </div>
                <div className="bg-white dark:bg-slate-800 p-4 rounded-xl border border-gray-200 dark:border-slate-600 shadow-sm">
                  <div className="flex items-center gap-3">
                    <div className="p-2 bg-purple-100 dark:bg-purple-900/30 rounded-lg">üíæ</div>
                    <div>
                      <div className="text-sm text-gray-600 dark:text-gray-400">B·ªô nh·ªõ</div>
                      <div className="text-xl font-bold text-purple-600 dark:text-purple-400">
                        {animationArray.length * 4} bytes
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Interactive Controls */}
            <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-4">
              {/* Access by Index */}
              <div className="bg-white dark:bg-slate-800 p-4 rounded-xl border border-green-200 dark:border-slate-600 shadow-md hover:shadow-lg transition-all group">
                <div className="flex items-center gap-2 mb-3">
                  <div className="p-1.5 bg-green-100 dark:bg-green-900/30 rounded-lg group-hover:scale-110 transition-transform">
                    üîç
                  </div>
                  <div>
                    <h5 className="font-bold text-green-700 dark:text-green-400 text-sm">Truy C·∫≠p</h5>
                    <p className="text-xs text-green-600 dark:text-green-500 font-mono">O(1)</p>
                  </div>
                </div>
                <div className="space-y-2">
                  <input
                    type="number"
                    value={accessIndex}
                    onChange={(e) => setAccessIndex(e.target.value)}
                    placeholder={`Nh·∫≠p index (0-${animationArray.length - 1})`}
                    min="0"
                    max={animationArray.length - 1}
                    className="w-full px-3 py-2 border-2 border-green-200 dark:border-green-700 rounded-lg focus:border-green-500 focus:ring-2 focus:ring-green-200 dark:bg-slate-700 transition-all"
                    disabled={isAnimating}
                  />
                  <button
                    onClick={animateAccess}
                    disabled={isAnimating || animationArray.length === 0}
                    className="w-full px-3 py-2 bg-gradient-to-r from-green-500 to-emerald-500 text-white font-medium text-sm rounded-md hover:from-green-600 hover:to-emerald-600 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
                  >
                    üîç Truy c·∫≠p
                  </button>
                </div>
              </div>

              {/* Linear Search */}
              <div className="bg-white dark:bg-slate-800 p-4 rounded-xl border border-blue-200 dark:border-slate-600 shadow-md hover:shadow-lg transition-all group">
                <div className="flex items-center gap-2 mb-3">
                  <div className="p-1.5 bg-blue-100 dark:bg-blue-900/30 rounded-lg group-hover:scale-110 transition-transform">
                    üîé
                  </div>
                  <div>
                    <h5 className="font-bold text-blue-700 dark:text-blue-400 text-sm">T√¨m Ki·∫øm</h5>
                    <p className="text-xs text-blue-600 dark:text-blue-500 font-mono">O(n)</p>
                  </div>
                </div>
                <div className="space-y-2">
                  <input
                    type="number"
                    value={searchValue}
                    onChange={(e) => setSearchValue(e.target.value)}
                    placeholder="Nh·∫≠p gi√° tr·ªã c·∫ßn t√¨m"
                    className="w-full px-3 py-2 border-2 border-blue-200 dark:border-blue-700 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 dark:bg-slate-700 transition-all"
                    disabled={isAnimating}
                  />
                  <button
                    onClick={animateSearch}
                    disabled={isAnimating || animationArray.length === 0}
                    className="w-full px-3 py-2 bg-gradient-to-r from-blue-500 to-cyan-500 text-white font-medium text-sm rounded-md hover:from-blue-600 hover:to-cyan-600 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
                  >
                    üîé T√¨m ki·∫øm
                  </button>
                </div>
              </div>

              {/* Insert */}
              <div className="bg-white dark:bg-slate-800 p-4 rounded-xl border border-purple-200 dark:border-slate-600 shadow-md hover:shadow-lg transition-all group">
                <div className="flex items-center gap-2 mb-3">
                  <div className="p-1.5 bg-purple-100 dark:bg-purple-900/30 rounded-lg group-hover:scale-110 transition-transform">
                    ‚ûï
                  </div>
                  <div>
                    <h5 className="font-bold text-purple-700 dark:text-purple-400 text-sm">Th√™m</h5>
                    <p className="text-xs text-purple-600 dark:text-purple-500 font-mono">O(1)*</p>
                  </div>
                </div>
                <div className="space-y-2">
                  <input
                    type="number"
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    placeholder="Nh·∫≠p gi√° tr·ªã m·ªõi"
                    className="w-full px-3 py-2 border-2 border-purple-200 dark:border-purple-700 rounded-lg focus:border-purple-500 focus:ring-2 focus:ring-purple-200 dark:bg-slate-700 transition-all"
                    disabled={isAnimating}
                  />
                  <button
                    onClick={animateInsert}
                    disabled={isAnimating}
                    className="w-full px-3 py-2 bg-gradient-to-r from-purple-500 to-pink-500 text-white font-medium text-sm rounded-md hover:from-purple-600 hover:to-pink-600 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
                  >
                    ‚ûï Th√™m cu·ªëi
                  </button>
                </div>
              </div>

              {/* Remove and Reset */}
              <div className="bg-white dark:bg-slate-800 p-4 rounded-xl border border-red-200 dark:border-slate-600 shadow-md hover:shadow-lg transition-all group">
                <div className="flex items-center gap-2 mb-3">
                  <div className="p-1.5 bg-red-100 dark:bg-red-900/30 rounded-lg group-hover:scale-110 transition-transform">
                    üõ†Ô∏è
                  </div>
                  <div>
                    <h5 className="font-bold text-red-700 dark:text-red-400 text-sm">ƒêi·ªÅu Khi·ªÉn</h5>
                    <p className="text-xs text-red-600 dark:text-red-500">Qu·∫£n l√Ω m·∫£ng</p>
                  </div>
                </div>
                <div className="space-y-2">
                  <button
                    onClick={animateRemove}
                    disabled={isAnimating || animationArray.length === 0}
                    className="w-full px-3 py-2 bg-gradient-to-r from-red-500 to-rose-500 text-white font-medium text-sm rounded-md hover:from-red-600 hover:to-rose-600 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
                  >
                    ‚ûñ X√≥a cu·ªëi
                  </button>
                  <button
                    onClick={resetArray}
                    disabled={isAnimating}
                    className="w-full px-3 py-2 bg-gradient-to-r from-gray-500 to-slate-500 text-white font-medium text-sm rounded-md hover:from-gray-600 hover:to-slate-600 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
                  >
                    üîÑ Reset
                  </button>
                </div>
              </div>
            </div>

            {/* Operation Explanations */}
            <div className="mt-8 grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 p-6 rounded-xl border border-green-200 dark:border-green-800 shadow-md">
                <div className="flex items-center gap-3 mb-3">
                  <div className="p-2 bg-green-100 dark:bg-green-900/50 rounded-lg">
                    ‚ö°
                  </div>
                  <h6 className="font-bold text-green-700 dark:text-green-300">Truy c·∫≠p O(1)</h6>
                </div>
                <p className="text-gray-600 dark:text-gray-400 leading-relaxed">
                  C√≥ th·ªÉ truy c·∫≠p tr·ª±c ti·∫øp b·∫•t k·ª≥ ph·∫ßn t·ª≠ n√†o th√¥ng qua index, kh√¥ng ph·ª• thu·ªôc v√†o k√≠ch th∆∞·ªõc m·∫£ng.
                  ƒê·ªãa ch·ªâ = base_address + (index √ó element_size)
                </p>
              </div>
              <div className="bg-gradient-to-br from-blue-50 to-cyan-50 dark:from-blue-900/20 dark:to-cyan-900/20 p-6 rounded-xl border border-blue-200 dark:border-blue-800 shadow-md">
                <div className="flex items-center gap-3 mb-3">
                  <div className="p-2 bg-blue-100 dark:bg-blue-900/50 rounded-lg">
                    üîç
                  </div>
                  <h6 className="font-bold text-blue-700 dark:text-blue-300">T√¨m ki·∫øm O(n)</h6>
                </div>
                <p className="text-gray-600 dark:text-gray-400 leading-relaxed">
                  Ph·∫£i duy·ªát t·ª´ng ph·∫ßn t·ª≠ m·ªôt cho ƒë·∫øn khi t√¨m th·∫•y ho·∫∑c h·∫øt m·∫£ng.
                  Tr∆∞·ªùng h·ª£p x·∫•u nh·∫•t: ki·ªÉm tra t·∫•t c·∫£ n ph·∫ßn t·ª≠.
                </p>
              </div>
            </div>
          </div>

          {/* Visual Memory Layout */}
          <div className="bg-white dark:bg-slate-800 rounded-2xl p-8 border border-gray-200 dark:border-slate-600 shadow-lg">
            <div className="flex items-center gap-3 mb-6">
              <div className="p-3 bg-gradient-to-r from-indigo-500 to-blue-500 rounded-full text-white">
                üíæ
              </div>
              <div>
                <h4 className="text-2xl font-bold text-indigo-800 dark:text-indigo-300">
                  B·ªë Tr√≠ B·ªô Nh·ªõ
                </h4>
                <p className="text-gray-600 dark:text-gray-400">
                  Hi·ªÉu c√°ch m·∫£ng ƒë∆∞·ª£c l∆∞u tr·ªØ trong b·ªô nh·ªõ
                </p>
              </div>
            </div>

            <div className="bg-gray-50 dark:bg-slate-700 p-6 rounded-xl border">
              <MermaidDiagram
                chart={`
                  graph LR
                      subgraph "M·∫£ng Tƒ©nh"
                          A["arr[0]: 10<br/>0x1000"] --> B["arr[1]: 20<br/>0x1004"] --> C["arr[2]: 30<br/>0x1008"] --> D["arr[3]: 40<br/>0x100C"]
                      end

                      subgraph "Vector (M·∫£ng ƒê·ªông)"
                          E["vec[0]: 10<br/>0x2000"] --> F["vec[1]: 20<br/>0x2004"] --> G["vec[2]: 30<br/>0x2008"] --> H["vec[3]: 40<br/>0x200C"] --> I["capacity: 8<br/>reserved"]
                          style I fill:#e1f5fe
                      end

                      J["push()"] -.-> I
                      K["pop()"] -.-> H
                `}
                className="mb-4"
              />
            </div>
          </div>
        </div>
      )}

      {/* Implementation Section */}
      {activeSection === "implementation" && (
        <div className="space-y-6">
          {/* Simple Vector Demo */}
          <div className="bg-white dark:bg-slate-800 rounded-xl p-6 border border-gray-200 dark:border-slate-600 shadow-md">
            <div className="flex items-center gap-2 mb-4">
              <div className="p-2 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full text-white text-sm">
                üß™
              </div>
              <div>
                <h4 className="text-lg font-bold text-green-800 dark:text-green-300">
                  Vector T∆∞∆°ng T√°c ƒê∆°n Gi·∫£n
                </h4>
                <p className="text-gray-600 dark:text-gray-400 text-sm">
                  Th·ª≠ nghi·ªám nhanh v·ªõi vector c∆° b·∫£n
                </p>
              </div>
            </div>

            <div className="bg-green-50 dark:bg-green-900/20 p-4 rounded-xl border border-green-200 dark:border-green-800">
              <div className="flex gap-3 mb-4">
                <input
                  type="number"
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  placeholder="Nh·∫≠p s·ªë"
                  className="flex-1 px-4 py-2 border-2 border-green-200 dark:border-green-700 rounded-lg focus:border-green-500 focus:ring-2 focus:ring-green-200 dark:bg-slate-700 transition-all"
                />
                <button
                  onClick={handlePush}
                  className="px-4 py-2 bg-gradient-to-r from-green-500 to-emerald-500 text-white font-medium text-sm rounded-md hover:from-green-600 hover:to-emerald-600 transition-all"
                >
                  ‚ûï Th√™m
                </button>
                <button
                  onClick={handlePop}
                  className="px-4 py-2 bg-gradient-to-r from-red-500 to-rose-500 text-white font-medium text-sm rounded-md hover:from-red-600 hover:to-rose-600 transition-all"
                >
                  ‚ûñ X√≥a
                </button>
              </div>

              <div className="flex gap-2 flex-wrap min-h-[60px] items-center">
                {vector.map((value, index) => (
                  <div
                    key={index}
                    className="px-4 py-2 bg-white dark:bg-slate-800 border-2 border-green-300 dark:border-green-600 rounded-lg text-center font-semibold shadow-sm hover:shadow-md transition-shadow"
                  >
                    {value}
                  </div>
                ))}
                {vector.length === 0 && (
                  <div className="text-gray-500 italic text-center flex-1 py-4">
                    üì≠ Vector r·ªóng - H√£y th√™m ph·∫ßn t·ª≠
                  </div>
                )}
              </div>

              <div className="mt-4 text-sm text-green-700 dark:text-green-300">
                <strong>K√≠ch th∆∞·ªõc hi·ªán t·∫°i:</strong> {vector.length} ph·∫ßn t·ª≠
              </div>
            </div>
          </div>

          {/* Code Implementation */}
          <div className="bg-white dark:bg-slate-800 rounded-xl p-6 border border-gray-200 dark:border-slate-600 shadow-md">
            <div className="flex items-center gap-2 mb-4">
              <div className="p-2 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full text-white text-sm">
                üíª
              </div>
              <div>
                <h4 className="text-lg font-bold text-purple-800 dark:text-purple-300">
                  C√†i ƒê·∫∑t Chi Ti·∫øt
                </h4>
                <p className="text-gray-600 dark:text-gray-400 text-sm">
                  M√£ ngu·ªìn trong c√°c ng√¥n ng·ªØ ph·ªï bi·∫øn
                </p>
              </div>
            </div>

            {/* Language Tabs */}
            <div className="mb-4">
              <div className="flex bg-gray-100 dark:bg-slate-700 rounded-lg p-1 w-fit">
                <button
                  onClick={() => setActiveLanguageTab("rust")}
                  className={`px-4 py-2 rounded-md font-medium text-sm transition-all ${
                    activeLanguageTab === "rust"
                      ? "bg-orange-500 text-white shadow-sm"
                      : "text-gray-600 dark:text-gray-300 hover:bg-white dark:hover:bg-slate-600"
                  }`}
                >
                  ü¶Ä Rust
                </button>
                <button
                  onClick={() => setActiveLanguageTab("cpp")}
                  className={`px-4 py-2 rounded-md font-medium text-sm transition-all ${
                    activeLanguageTab === "cpp"
                      ? "bg-blue-500 text-white shadow-sm"
                      : "text-gray-600 dark:text-gray-300 hover:bg-white dark:hover:bg-slate-600"
                  }`}
                >
                  ‚ö° C++
                </button>
                <button
                  onClick={() => setActiveLanguageTab("python")}
                  className={`px-4 py-2 rounded-md font-medium text-sm transition-all ${
                    activeLanguageTab === "python"
                      ? "bg-green-500 text-white shadow-sm"
                      : "text-gray-600 dark:text-gray-300 hover:bg-white dark:hover:bg-slate-600"
                  }`}
                >
                  üêç Python
                </button>
              </div>
            </div>

            {/* Editable Code */}
            <div className="bg-gray-50 dark:bg-slate-700 rounded-xl p-6 border">
              <div className="space-y-4">
                <div className="flex items-center gap-3 mb-4">
                  <div className={`p-2 rounded ${
                    activeLanguageTab === "rust" ? "bg-orange-100 dark:bg-orange-900/30" :
                    activeLanguageTab === "cpp" ? "bg-blue-100 dark:bg-blue-900/30" :
                    "bg-green-100 dark:bg-green-900/30"
                  }`}>
                    {activeLanguageTab === "rust" ? "ü¶Ä" :
                     activeLanguageTab === "cpp" ? "‚ö°" : "üêç"}
                  </div>
                  <h5 className={`text-lg font-bold ${
                    activeLanguageTab === "rust" ? "text-orange-700 dark:text-orange-300" :
                    activeLanguageTab === "cpp" ? "text-blue-700 dark:text-blue-300" :
                    "text-green-700 dark:text-green-300"
                  }`}>
                    {activeLanguageTab === "rust" ? "Vector trong Rust" :
                     activeLanguageTab === "cpp" ? "Vector trong C++" :
                     "List trong Python"}
                  </h5>
                </div>

                {/* Monaco Editor */}
                <div className="relative">
                  <EditableCodeEditor
                    code={getCurrentCode()}
                    onChange={updateCode}
                    language={activeLanguageTab}
                    height="400px"
                    theme="vs-dark"
                  />
                  <div className="absolute top-2 right-2 text-xs text-white bg-blue-600 px-3 py-1 rounded-full shadow-lg z-10">
                    {activeLanguageTab.toUpperCase()} - C√≥ th·ªÉ ch·ªânh s·ª≠a
                  </div>
                </div>

                {/* Code Templates */}
                <div className="flex gap-2 flex-wrap items-center justify-between">
                  <div className="flex gap-2 items-center">
                    <button
                      onClick={() => {
                        const defaultCode = codeState[activeLanguageTab as keyof typeof codeState];
                        updateCode(defaultCode);
                      }}
                      className="px-3 py-1 text-xs bg-gray-600 hover:bg-gray-500 text-white rounded transition-colors"
                    >
                      üîÑ Reset v·ªÅ m·∫´u g·ªëc
                    </button>
                    <button
                      onClick={() => updateCode("")}
                      className="px-3 py-1 text-xs bg-red-600 hover:bg-red-500 text-white rounded transition-colors"
                    >
                      üóëÔ∏è X√≥a t·∫•t c·∫£
                    </button>

                    <div className="text-xs text-gray-500 flex items-center">
                      üí° M·∫πo: Ch·ªânh s·ª≠a code v√† nh·∫•n "‚ñ∂Ô∏è Ch·∫°y Code" ƒë·ªÉ xem k·∫øt qu·∫£
                    </div>
                  </div>

                  {/* Play Button */}
                  <SmartCodeRunner
                    code={getCurrentCode()}
                    language={activeLanguageTab}
                    onRun={handleRunCode}
                    isRunning={isRunningCode}
                    className="px-3 py-1 bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-xs"
                    buttonText="‚ñ∂Ô∏è Ch·∫°y Code"
                  />
                </div>
              </div>
            </div>

            {/* Output Section */}
            {showOutput && (
              <div className="mt-6 bg-slate-900 dark:bg-slate-800 rounded-xl p-6 border border-slate-600 shadow-lg">
                <div className="flex items-center gap-3 mb-4">
                  <div className="p-2 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full text-white">
                    üì∫
                  </div>
                  <div className="flex-1">
                    <h5 className="text-lg font-bold text-white">K·∫øt qu·∫£ ch·∫°y</h5>
                    <p className="text-gray-400 text-sm">Output t·ª´ {activeLanguageTab} code</p>
                  </div>
                  <button
                    onClick={() => setShowOutput(false)}
                    className="text-gray-400 hover:text-white transition-colors text-xl"
                  >
                    ‚úï
                  </button>
                </div>
                <div className="bg-black rounded-lg p-4 border border-gray-600">
                  <pre className="text-green-400 font-mono text-sm whitespace-pre-wrap overflow-x-auto">
                    {codeOutput || "Ch∆∞a c√≥ output..."}
                  </pre>
                </div>
                {isRunningCode && (
                  <div className="mt-3 flex items-center gap-2 text-yellow-400">
                    <div className="animate-spin">‚öôÔ∏è</div>
                    <span className="text-sm">ƒêang th·ª±c thi code...</span>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}