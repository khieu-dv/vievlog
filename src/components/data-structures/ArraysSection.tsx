"use client";

import { useState } from "react";
import { Layout } from "lucide-react";
import { MermaidDiagram } from "~/components/common/MermaidDiagram";
import { RustCodeEditor } from "~/components/common/RustCodeEditor";
import { CppCodeEditor } from "~/components/common/CppCodeEditor";
import { PythonCodeEditor } from "~/components/common/PythonCodeEditor";

export function ArraysSection() {
  const [vector, setVector] = useState<number[]>([]);
  const [inputValue, setInputValue] = useState("");
  const [activeLanguageTab, setActiveLanguageTab] = useState("rust");

  const handlePush = () => {
    const value = parseInt(inputValue);
    if (!isNaN(value)) {
      setVector([...vector, value]);
      setInputValue("");
    }
  };

  const handlePop = () => {
    setVector(vector.slice(0, -1));
  };

  return (
    <div className="space-y-6">
      <div className="bg-white dark:bg-slate-800 rounded-lg p-6 border">
        <h3 className="text-xl font-semibold mb-4 flex items-center gap-2">
          <Layout className="h-5 w-5" />
          M·∫£ng ƒê·ªông (Vector)
        </h3>

        {/* ƒê·ªãnh nghƒ©a v√† gi·∫£i th√≠ch c∆° b·∫£n */}
        <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg mb-4 border-l-4 border-blue-500">
          <h4 className="font-semibold text-blue-800 dark:text-blue-300 mb-2">üìö M·∫£ng l√† g√¨?</h4>
          <p className="text-gray-700 dark:text-gray-300 mb-3">
            <strong>M·∫£ng (Array)</strong> l√† c·∫•u tr√∫c d·ªØ li·ªáu c∆° b·∫£n nh·∫•t, l∆∞u tr·ªØ c√°c ph·∫ßn t·ª≠ c√πng ki·ªÉu d·ªØ li·ªáu trong b·ªô nh·ªõ li√™n ti·∫øp.
            M·ªói ph·∫ßn t·ª≠ c√≥ m·ªôt ch·ªâ s·ªë (index) b·∫Øt ƒë·∫ßu t·ª´ 0.
          </p>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
            <div className="bg-white dark:bg-slate-800 p-3 rounded">
              <strong className="text-green-600 dark:text-green-400">‚úÖ ∆Øu ƒëi·ªÉm:</strong>
              <ul className="mt-1 list-disc list-inside text-gray-600 dark:text-gray-300">
                <li>Truy c·∫≠p nhanh O(1)</li>
                <li>Ti·∫øt ki·ªám b·ªô nh·ªõ</li>
                <li>Duy·ªát tu·∫ßn t·ª± hi·ªáu qu·∫£</li>
              </ul>
            </div>
            <div className="bg-white dark:bg-slate-800 p-3 rounded">
              <strong className="text-red-600 dark:text-red-400">‚ùå Nh∆∞·ª£c ƒëi·ªÉm:</strong>
              <ul className="mt-1 list-disc list-inside text-gray-600 dark:text-gray-300">
                <li>K√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh (m·∫£ng tƒ©nh)</li>
                <li>Ch√®n/x√≥a gi·ªØa ch·∫≠m O(n)</li>
                <li>Ph·∫£i bi·∫øt tr∆∞·ªõc k√≠ch th∆∞·ªõc</li>
              </ul>
            </div>
          </div>
        </div>

        <div className="bg-amber-50 dark:bg-amber-900/20 p-4 rounded-lg mb-4 border-l-4 border-amber-500">
          <h4 className="font-semibold text-amber-800 dark:text-amber-300 mb-2">üîß Vector (M·∫£ng ƒê·ªông)</h4>
          <p className="text-gray-700 dark:text-gray-300">
            <strong>Vector</strong> l√† phi√™n b·∫£n c·∫£i ti·∫øn c·ªßa m·∫£ng, c√≥ th·ªÉ t·ª± ƒë·ªông thay ƒë·ªïi k√≠ch th∆∞·ªõc.
            Khi h·∫øt ch·ªó, vector s·∫Ω t·ª± ƒë·ªông c·∫•p ph√°t b·ªô nh·ªõ m·ªõi v√† sao ch√©p d·ªØ li·ªáu.
          </p>
        </div>

        <div className="space-y-4">
          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">C·∫•u Tr√∫c M·∫£ng & Vector:</h4>
            <MermaidDiagram
              chart={`
                graph LR
                    subgraph "M·∫£ng Tƒ©nh"
                        A[0: 10] --> B[1: 20] --> C[2: 30] --> D[3: 40]
                    end

                    subgraph "Vector (M·∫£ng ƒê·ªông)"
                        E[0: 10] --> F[1: 20] --> G[2: 30] --> H[3: 40] --> I[4: ...]
                        style I fill:#e1f5fe
                    end

                    J[push] -.-> I
                    K[pop] -.-> H
              `}
              className="mb-4"
            />
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">Vector T∆∞∆°ng T√°c:</h4>
            <div className="flex gap-2 mb-3">
              <input
                type="number"
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                placeholder="Nh·∫≠p s·ªë"
                className="px-3 py-2 border rounded dark:bg-slate-600 dark:border-slate-500"
              />
              <button
                onClick={handlePush}
                className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
              >
                Th√™m
              </button>
              <button
                onClick={handlePop}
                className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600"
              >
                X√≥a
              </button>
            </div>
            <div className="flex gap-2 flex-wrap">
              {vector.map((value, index) => (
                <div
                  key={index}
                  className="px-3 py-2 bg-blue-100 dark:bg-blue-900 border rounded text-center"
                >
                  {value}
                </div>
              ))}
              {vector.length === 0 && (
                <div className="text-gray-500 italic">Vector r·ªóng</div>
              )}
            </div>
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-4">C√†i ƒê·∫∑t:</h4>

            {/* Language Tabs */}
            <div className="mb-4">
              <div className="border-b border-gray-200 dark:border-gray-600">
                <nav className="-mb-px flex space-x-8">
                  <button
                    onClick={() => setActiveLanguageTab("rust")}
                    className={`py-2 px-1 border-b-2 font-medium text-sm ${
                      activeLanguageTab === "rust"
                        ? "border-orange-500 text-orange-600 dark:text-orange-400"
                        : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300"
                    }`}
                  >
                    Rust
                  </button>
                  <button
                    onClick={() => setActiveLanguageTab("cpp")}
                    className={`py-2 px-1 border-b-2 font-medium text-sm ${
                      activeLanguageTab === "cpp"
                        ? "border-blue-500 text-blue-600 dark:text-blue-400"
                        : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300"
                    }`}
                  >
                    C++
                  </button>
                  <button
                    onClick={() => setActiveLanguageTab("python")}
                    className={`py-2 px-1 border-b-2 font-medium text-sm ${
                      activeLanguageTab === "python"
                        ? "border-green-500 text-green-600 dark:text-green-400"
                        : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300"
                    }`}
                  >
                    Python
                  </button>
                </nav>
              </div>
            </div>

            {/* Language-specific Code */}
            {activeLanguageTab === "rust" && (
              <RustCodeEditor
                code={`// C√°c thao t√°c v·ªõi Vector trong Rust
let mut vec = Vec::new();
vec.push(1);
vec.push(2);
vec.push(3);
let last = vec.pop(); // Tr·∫£ v·ªÅ Option<T>

// Truy c·∫≠p theo ch·ªâ s·ªë
let first = vec[0];
let second = vec.get(1); // Tr·∫£ v·ªÅ Option<&T>

// Duy·ªát qua c√°c ph·∫ßn t·ª≠
for item in &vec {
    println!("{}", item);
}`}
                height="200px"
              />
            )}

            {activeLanguageTab === "cpp" && (
              <CppCodeEditor
                code={`// C√°c thao t√°c v·ªõi Vector trong C++
#include <vector>
#include <iostream>

std::vector<int> vec;
vec.push_back(1);
vec.push_back(2);
vec.push_back(3);
vec.pop_back(); // X√≥a ph·∫ßn t·ª≠ cu·ªëi

// Truy c·∫≠p theo ch·ªâ s·ªë
int first = vec[0];
int second = vec.at(1); // An to√†n h∆°n v·ªõi ki·ªÉm tra bounds

// Duy·ªát qua c√°c ph·∫ßn t·ª≠
for (const auto& item : vec) {
    std::cout << item << " ";
}

// Ho·∫∑c d√πng iterator
for (auto it = vec.begin(); it != vec.end(); ++it) {
    std::cout << *it << " ";
}`}
                height="200px"
              />
            )}

            {activeLanguageTab === "python" && (
              <PythonCodeEditor
                code={`# C√°c thao t√°c v·ªõi List trong Python
vec = []
vec.append(1)
vec.append(2)
vec.append(3)
last = vec.pop()  # X√≥a v√† tr·∫£ v·ªÅ ph·∫ßn t·ª≠ cu·ªëi

# Truy c·∫≠p theo ch·ªâ s·ªë
first = vec[0]
second = vec[1]

# Duy·ªát qua c√°c ph·∫ßn t·ª≠
for item in vec:
    print(item)

# List comprehension
squared = [x**2 for x in vec]

# Slicing
subset = vec[0:2]  # L·∫•y t·ª´ index 0 ƒë·∫øn 1

# Th√™m nhi·ªÅu ph·∫ßn t·ª≠
vec.extend([4, 5, 6])
# Ho·∫∑c
vec += [7, 8, 9]`}
                height="200px"
              />
            )}
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">ƒê·ªô Ph·ª©c T·∫°p:</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
              <div>
                <strong>Truy c·∫≠p:</strong> O(1)
              </div>
              <div>
                <strong>T√¨m ki·∫øm:</strong> O(n)
              </div>
              <div>
                <strong>Th√™m v√†o cu·ªëi:</strong> O(1) amortized
              </div>
              <div>
                <strong>X√≥a cu·ªëi:</strong> O(1)
              </div>
              <div>
                <strong>Th√™m v√†o gi·ªØa:</strong> O(n)
              </div>
              <div>
                <strong>X√≥a ·ªü gi·ªØa:</strong> O(n)
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}