"use client";

import { useState, useEffect } from "react";
import { List } from "lucide-react";
import { MermaidDiagram } from "~/components/common/MermaidDiagram";
import { RustCodeEditor } from "~/components/common/RustCodeEditor";
import { CppCodeEditor } from "~/components/common/CppCodeEditor";
import { PythonCodeEditor } from "~/components/common/PythonCodeEditor";
import { initRustWasm } from "~/lib/rust-wasm-helper";

interface ListNode {
  value: number;
  next?: ListNode;
}

export function LinkedListsSection() {
  const [rustLinkedList, setRustLinkedList] = useState<any>(null);
  const [wasmReady, setWasmReady] = useState(false);
  const [listDisplay, setListDisplay] = useState<number[]>([]);
  const [inputValue, setInputValue] = useState("");
  const [result, setResult] = useState("");
  const [wasm, setWasm] = useState<any>(null);
  const [activeLanguageTab, setActiveLanguageTab] = useState("rust");

  // Interactive visualization states
  const [animationList, setAnimationList] = useState<number[]>([10, 25, 8]);
  const [searchValue, setSearchValue] = useState("");
  const [insertValue, setInsertValue] = useState("");
  const [highlightedIndex, setHighlightedIndex] = useState<number | null>(null);
  const [animationStep, setAnimationStep] = useState<string>("");
  const [isAnimating, setIsAnimating] = useState(false);

  // Initialize WASM
  useEffect(() => {
    async function init() {
      try {
        const wasmInstance = await initRustWasm();
        const newLinkedList = wasmInstance.dataStructures.createLinkedList();
        setRustLinkedList(newLinkedList);
        setWasm(wasmInstance);
        setWasmReady(true);
        setResult("‚úÖ Rust WASM Linked List ƒë√£ s·∫µn s√†ng!");
      } catch (error) {
        console.error("Failed to initialize WASM:", error);
        setResult("‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o Rust WASM");
      }
    }
    init();
  }, []);

  // Update display from Rust linked list
  const updateDisplayFromRustList = () => {
    if (rustLinkedList) {
      try {
        const listArray = Array.from(rustLinkedList.to_array()) as number[];
        setListDisplay(listArray);
      } catch (error) {
        console.error("Error updating display:", error);
      }
    }
  };

  const addToHead = () => {
    const value = parseInt(inputValue);
    if (!isNaN(value)) {
      if (wasmReady && rustLinkedList) {
        try {
          rustLinkedList.push_front(value);
          const listSize = rustLinkedList.len();
          setResult(`ü¶Ä ƒê√£ th√™m ${value} v√†o ƒë·∫ßu danh s√°ch. K√≠ch th∆∞·ªõc: ${listSize}`);
          updateDisplayFromRustList();
          setInputValue("");
        } catch (error) {
          setResult("‚ùå Rust WASM addToHead failed: " + error);
        }
      } else {
        setResult("‚ùå WASM ch∆∞a s·∫µn s√†ng");
      }
    }
  };

  const addToTail = () => {
    const value = parseInt(inputValue);
    if (!isNaN(value)) {
      if (wasmReady && rustLinkedList) {
        try {
          rustLinkedList.push_back(value);
          const listSize = rustLinkedList.len();
          setResult(`ü¶Ä ƒê√£ th√™m ${value} v√†o cu·ªëi danh s√°ch. K√≠ch th∆∞·ªõc: ${listSize}`);
          updateDisplayFromRustList();
          setInputValue("");
        } catch (error) {
          setResult("‚ùå Rust WASM addToTail failed: " + error);
        }
      } else {
        setResult("‚ùå WASM ch∆∞a s·∫µn s√†ng");
      }
    }
  };

  const removeHead = () => {
    if (wasmReady && rustLinkedList) {
      try {
        const removed = rustLinkedList.pop_front();
        const listSize = rustLinkedList.len();
        if (removed !== null && removed !== undefined) {
          setResult(`ü¶Ä ƒê√£ x√≥a ph·∫ßn t·ª≠ ƒë·∫ßu: ${removed}. K√≠ch th∆∞·ªõc: ${listSize}`);
        } else {
          setResult(`ü¶Ä Danh s√°ch tr·ªëng, kh√¥ng th·ªÉ x√≥a`);
        }
        updateDisplayFromRustList();
      } catch (error) {
        setResult("‚ùå Rust WASM removeHead failed: " + error);
      }
    } else {
      setResult("‚ùå WASM ch∆∞a s·∫µn s√†ng");
    }
  };

  const removeTail = () => {
    if (wasmReady && rustLinkedList) {
      try {
        const removed = rustLinkedList.pop_back();
        const listSize = rustLinkedList.len();
        if (removed !== null && removed !== undefined) {
          setResult(`ü¶Ä ƒê√£ x√≥a ph·∫ßn t·ª≠ cu·ªëi: ${removed}. K√≠ch th∆∞·ªõc: ${listSize}`);
        } else {
          setResult(`ü¶Ä Danh s√°ch tr·ªëng, kh√¥ng th·ªÉ x√≥a`);
        }
        updateDisplayFromRustList();
      } catch (error) {
        setResult("‚ùå Rust WASM removeTail failed: " + error);
      }
    } else {
      setResult("‚ùå WASM ch∆∞a s·∫µn s√†ng");
    }
  };

  const clear = () => {
    if (wasmReady && rustLinkedList) {
      try {
        rustLinkedList.clear();
        setResult("ü¶Ä ƒê√£ x√≥a to√†n b·ªô danh s√°ch");
        updateDisplayFromRustList();
      } catch (error) {
        setResult("‚ùå Rust WASM clear failed: " + error);
      }
    } else {
      setResult("‚ùå WASM ch∆∞a s·∫µn s√†ng");
    }
  };

  // Animation functions for interactive visualization
  const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

  const animateSearch = async () => {
    const searchVal = parseInt(searchValue);
    if (isNaN(searchVal)) {
      setAnimationStep("‚ùå Gi√° tr·ªã t√¨m ki·∫øm kh√¥ng h·ª£p l·ªá!");
      return;
    }

    setIsAnimating(true);
    setAnimationStep(`üîç B·∫Øt ƒë·∫ßu t√¨m ki·∫øm gi√° tr·ªã ${searchVal} trong linked list...`);
    await sleep(1000);

    // Traverse the linked list
    for (let i = 0; i < animationList.length; i++) {
      setHighlightedIndex(i);
      setAnimationStep(`üîç Node ${i}: ${animationList[i]} ${animationList[i] === searchVal ? '= ‚úÖ' : '‚â†'} ${searchVal}`);
      await sleep(1200);

      if (animationList[i] === searchVal) {
        setAnimationStep(`üéâ T√¨m th·∫•y ${searchVal} t·∫°i node ${i}! (ƒê·ªô ph·ª©c t·∫°p: O(n))`);
        await sleep(2000);
        setHighlightedIndex(null);
        setIsAnimating(false);
        return;
      }
    }

    setAnimationStep(`‚ùå Kh√¥ng t√¨m th·∫•y ${searchVal} trong linked list! (ƒê√£ duy·ªát ${animationList.length} nodes)`);
    await sleep(2000);
    setHighlightedIndex(null);
    setIsAnimating(false);
  };

  const animateInsertHead = async () => {
    const newValue = parseInt(insertValue);
    if (isNaN(newValue)) return;

    setIsAnimating(true);
    setAnimationStep(`‚ûï Th√™m ${newValue} v√†o ƒë·∫ßu linked list...`);
    await sleep(1000);

    setAnimationList([newValue, ...animationList]);
    setHighlightedIndex(0);
    setAnimationStep(`‚úÖ ƒê√£ th√™m ${newValue} v√†o ƒë·∫ßu! K√≠ch th∆∞·ªõc: ${animationList.length + 1} (ƒê·ªô ph·ª©c t·∫°p: O(1))`);
    await sleep(2000);

    setHighlightedIndex(null);
    setIsAnimating(false);
    setInsertValue("");
  };

  const animateInsertTail = async () => {
    const newValue = parseInt(insertValue);
    if (isNaN(newValue)) return;

    setIsAnimating(true);
    setAnimationStep(`‚ûï Th√™m ${newValue} v√†o cu·ªëi linked list...`);

    // Show traversal to end
    for (let i = 0; i < animationList.length; i++) {
      setHighlightedIndex(i);
      setAnimationStep(`üö∂ Duy·ªát ƒë·∫øn node ${i} ƒë·ªÉ t√¨m cu·ªëi list...`);
      await sleep(600);
    }

    setAnimationList([...animationList, newValue]);
    setHighlightedIndex(animationList.length);
    setAnimationStep(`‚úÖ ƒê√£ th√™m ${newValue} v√†o cu·ªëi! K√≠ch th∆∞·ªõc: ${animationList.length + 1} (ƒê·ªô ph·ª©c t·∫°p: O(n))`);
    await sleep(2000);

    setHighlightedIndex(null);
    setIsAnimating(false);
    setInsertValue("");
  };

  const animateRemoveHead = async () => {
    if (animationList.length === 0) {
      setAnimationStep("‚ùå Linked list ƒë√£ r·ªóng!");
      return;
    }

    setIsAnimating(true);
    const removedValue = animationList[0];

    setHighlightedIndex(0);
    setAnimationStep(`‚ûñ X√≥a node ƒë·∫ßu: ${removedValue}...`);
    await sleep(1000);

    setAnimationList(animationList.slice(1));
    setAnimationStep(`‚úÖ ƒê√£ x√≥a ${removedValue}! K√≠ch th∆∞·ªõc: ${animationList.length - 1} (ƒê·ªô ph·ª©c t·∫°p: O(1))`);
    await sleep(2000);

    setHighlightedIndex(null);
    setIsAnimating(false);
  };

  const animateRemoveTail = async () => {
    if (animationList.length === 0) {
      setAnimationStep("‚ùå Linked list ƒë√£ r·ªóng!");
      return;
    }

    setIsAnimating(true);
    const lastIndex = animationList.length - 1;
    const removedValue = animationList[lastIndex];

    // Show traversal to find the second-to-last node
    for (let i = 0; i < lastIndex; i++) {
      setHighlightedIndex(i);
      setAnimationStep(`üö∂ Duy·ªát ƒë·∫øn node ${i} ƒë·ªÉ t√¨m node cu·ªëi...`);
      await sleep(600);
    }

    setHighlightedIndex(lastIndex);
    setAnimationStep(`‚ûñ X√≥a node cu·ªëi: ${removedValue}...`);
    await sleep(1000);

    setAnimationList(animationList.slice(0, -1));
    setAnimationStep(`‚úÖ ƒê√£ x√≥a ${removedValue}! K√≠ch th∆∞·ªõc: ${animationList.length - 1} (ƒê·ªô ph·ª©c t·∫°p: O(n))`);
    await sleep(2000);

    setHighlightedIndex(null);
    setIsAnimating(false);
  };

  const resetLinkedList = () => {
    setAnimationList([10, 25, 8]);
    setHighlightedIndex(null);
    setAnimationStep("");
  };

  return (
    <div className="space-y-6">
      <div className="bg-white dark:bg-slate-800 rounded-lg p-6 border">
        <h3 className="text-xl font-semibold mb-4 flex items-center gap-2">
          <List className="h-5 w-5" />
          ü¶Ä Rust WASM Danh S√°ch Li√™n K·∫øt
        </h3>

        {/* ƒê·ªãnh nghƒ©a v√† gi·∫£i th√≠ch c∆° b·∫£n */}
        <div className="bg-lime-50 dark:bg-lime-900/20 p-4 rounded-lg mb-4 border-l-4 border-lime-500">
          <h4 className="font-semibold text-lime-800 dark:text-lime-300 mb-2">üîó Danh S√°ch Li√™n K·∫øt l√† g√¨?</h4>
          <p className="text-gray-700 dark:text-gray-300 mb-3">
            <strong>Linked List (Danh S√°ch Li√™n K·∫øt)</strong> l√† c·∫•u tr√∫c d·ªØ li·ªáu tuy·∫øn t√≠nh trong ƒë√≥ c√°c ph·∫ßn t·ª≠ (node) ƒë∆∞·ª£c l∆∞u tr·ªØ trong c√°c v·ªã tr√≠ b·ªô nh·ªõ kh√¥ng li√™n ti·∫øp.
            M·ªói node ch·ª©a d·ªØ li·ªáu v√† pointer tr·ªè ƒë·∫øn node ti·∫øp theo.
          </p>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
            <div className="bg-white dark:bg-slate-800 p-3 rounded">
              <strong className="text-green-600 dark:text-green-400">‚úÖ ∆Øu ƒëi·ªÉm:</strong>
              <ul className="mt-1 list-disc list-inside text-gray-600 dark:text-gray-300">
                <li>K√≠ch th∆∞·ªõc ƒë·ªông</li>
                <li>Th√™m/x√≥a ƒë·∫ßu nhanh O(1)</li>
                <li>S·ª≠ d·ª•ng b·ªô nh·ªõ hi·ªáu qu·∫£</li>
                <li>Kh√¥ng c·∫ßn bi·∫øt tr∆∞·ªõc k√≠ch th∆∞·ªõc</li>
              </ul>
            </div>
            <div className="bg-white dark:bg-slate-800 p-3 rounded">
              <strong className="text-red-600 dark:text-red-400">‚ùå Nh∆∞·ª£c ƒëi·ªÉm:</strong>
              <ul className="mt-1 list-disc list-inside text-gray-600 dark:text-gray-300">
                <li>Truy c·∫≠p ch·∫≠m O(n)</li>
                <li>T·ªën b·ªô nh·ªõ cho pointer</li>
                <li>Kh√¥ng cache-friendly</li>
                <li>Kh√¥ng th·ªÉ binary search</li>
              </ul>
            </div>
          </div>
        </div>

        <div className="bg-fuchsia-50 dark:bg-fuchsia-900/20 p-4 rounded-lg mb-4 border-l-4 border-fuchsia-500">
          <h4 className="font-semibold text-fuchsia-800 dark:text-fuchsia-300 mb-2">üéØ Khi n√†o d√πng Linked List?</h4>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
            <div>
              <strong className="text-blue-600 dark:text-blue-400">üé™ ·ª®ng d·ª•ng th·ª±c t·∫ø:</strong>
              <ul className="mt-1 text-gray-600 dark:text-gray-300">
                <li>‚Ä¢ Undo/Redo trong editor</li>
                <li>‚Ä¢ Browser history</li>
                <li>‚Ä¢ Music playlist</li>
                <li>‚Ä¢ Implement Stack/Queue</li>
              </ul>
            </div>
            <div>
              <strong className="text-purple-600 dark:text-purple-400">‚ö° So v·ªõi Array:</strong>
              <ul className="mt-1 text-gray-600 dark:text-gray-300">
                <li>‚Ä¢ Array: Truy c·∫≠p nhanh, th√™m/x√≥a ch·∫≠m</li>
                <li>‚Ä¢ Linked List: Truy c·∫≠p ch·∫≠m, th√™m/x√≥a nhanh</li>
              </ul>
            </div>
          </div>
        </div>

        <div className="space-y-4">
          {/* Interactive Linked List Visualization */}
          <div className="bg-gradient-to-r from-green-50 to-teal-50 dark:from-green-900/20 dark:to-teal-900/20 p-6 rounded-lg border-2 border-green-200 dark:border-green-800">
            <h4 className="font-semibold text-green-800 dark:text-green-300 mb-4 flex items-center gap-2">
              üéÆ Minh H·ªça T∆∞∆°ng T√°c - Linked List Operations
            </h4>

            {/* Linked List Visualization */}
            <div className="mb-6">
              <div className="flex items-center justify-center mb-4 overflow-x-auto">
                <div className="flex items-center gap-4 min-w-max">
                  {/* HEAD pointer */}
                  {animationList.length > 0 && (
                    <div className="flex flex-col items-center">
                      <div className="text-xs text-gray-500 dark:text-gray-400 mb-1 h-4">HEAD</div>
                      <div className="bg-orange-500 text-white px-3 py-2 rounded font-bold text-sm">
                        ‚Üí
                      </div>
                    </div>
                  )}

                  {/* Linked List Nodes */}
                  {animationList.map((value, index) => (
                    <div key={`${index}-${value}`} className="flex items-center gap-2">
                      {/* Node */}
                      <div className="flex flex-col items-center">
                        <div className="text-xs text-gray-500 dark:text-gray-400 mb-1 h-4">
                          Node {index}
                        </div>
                        <div
                          className={`flex items-center border-2 rounded-lg transition-all duration-500 ${
                            highlightedIndex === index
                              ? "border-red-500 scale-110 shadow-lg"
                              : "border-green-300 dark:border-green-600"
                          }`}
                        >
                          {/* Data part */}
                          <div
                            className={`px-4 py-3 rounded-l-lg font-bold text-lg ${
                              highlightedIndex === index
                                ? "bg-yellow-400 animate-pulse"
                                : "bg-green-100 dark:bg-green-800"
                            }`}
                          >
                            {value}
                          </div>
                          {/* Pointer part */}
                          <div
                            className={`px-2 py-3 rounded-r-lg text-sm font-mono ${
                              highlightedIndex === index
                                ? "bg-yellow-300"
                                : "bg-green-200 dark:bg-green-700"
                            }`}
                          >
                            {index < animationList.length - 1 ? "‚Üí" : "‚àÖ"}
                          </div>
                        </div>
                      </div>

                      {/* Arrow between nodes */}
                      {index < animationList.length - 1 && (
                        <div className="text-green-500 text-2xl">‚Üí</div>
                      )}
                    </div>
                  ))}

                  {/* NULL at the end */}
                  {animationList.length > 0 && (
                    <div className="flex flex-col items-center">
                      <div className="text-xs text-gray-500 dark:text-gray-400 mb-1 h-4">NULL</div>
                      <div className="bg-red-500 text-white px-3 py-2 rounded font-bold text-sm">
                        ‚àÖ
                      </div>
                    </div>
                  )}

                  {animationList.length === 0 && (
                    <div className="text-gray-500 italic text-center p-8">
                      Linked List r·ªóng - H√£y th√™m node ƒë·ªÉ b·∫Øt ƒë·∫ßu
                    </div>
                  )}
                </div>
              </div>

              {/* Animation status */}
              {animationStep && (
                <div className="bg-orange-100 dark:bg-orange-900/30 border border-orange-300 dark:border-orange-700 rounded-lg p-3 mb-4">
                  <div className="font-medium text-orange-800 dark:text-orange-300">
                    {animationStep}
                  </div>
                </div>
              )}

              {/* List info */}
              <div className="grid grid-cols-3 gap-4 text-sm text-gray-600 dark:text-gray-400 mb-4">
                <div className="bg-white dark:bg-slate-800 p-3 rounded">
                  <strong>Nodes:</strong> {animationList.length}
                </div>
                <div className="bg-white dark:bg-slate-800 p-3 rounded">
                  <strong>Head:</strong> {animationList.length > 0 ? animationList[0] : "NULL"}
                </div>
                <div className="bg-white dark:bg-slate-800 p-3 rounded">
                  <strong>Tail:</strong> {animationList.length > 0 ? animationList[animationList.length - 1] : "NULL"}
                </div>
              </div>
            </div>

            {/* Interactive Controls */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              {/* Search */}
              <div className="bg-white dark:bg-slate-800 p-4 rounded-lg border">
                <h5 className="font-medium text-blue-600 dark:text-blue-400 mb-2">üîç T√¨m Ki·∫øm (O(n))</h5>
                <div className="space-y-2">
                  <input
                    type="number"
                    value={searchValue}
                    onChange={(e) => setSearchValue(e.target.value)}
                    placeholder="Nh·∫≠p gi√° tr·ªã"
                    className="w-full px-2 py-1 text-sm border rounded dark:bg-slate-700 dark:border-slate-600"
                    disabled={isAnimating}
                  />
                  <button
                    onClick={animateSearch}
                    disabled={isAnimating}
                    className="w-full px-3 py-2 text-sm bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50"
                  >
                    T√¨m ki·∫øm
                  </button>
                </div>
              </div>

              {/* Insert at Head */}
              <div className="bg-white dark:bg-slate-800 p-4 rounded-lg border">
                <h5 className="font-medium text-green-600 dark:text-green-400 mb-2">‚ûï Th√™m ƒê·∫ßu (O(1))</h5>
                <div className="space-y-2">
                  <input
                    type="number"
                    value={insertValue}
                    onChange={(e) => setInsertValue(e.target.value)}
                    placeholder="Nh·∫≠p gi√° tr·ªã"
                    className="w-full px-2 py-1 text-sm border rounded dark:bg-slate-700 dark:border-slate-600"
                    disabled={isAnimating}
                  />
                  <button
                    onClick={animateInsertHead}
                    disabled={isAnimating}
                    className="w-full px-3 py-2 text-sm bg-green-500 text-white rounded hover:bg-green-600 disabled:opacity-50"
                  >
                    Th√™m ƒë·∫ßu
                  </button>
                </div>
              </div>

              {/* Insert at Tail */}
              <div className="bg-white dark:bg-slate-800 p-4 rounded-lg border">
                <h5 className="font-medium text-purple-600 dark:text-purple-400 mb-2">‚ûï Th√™m Cu·ªëi (O(n))</h5>
                <div className="space-y-2">
                  <button
                    onClick={animateInsertTail}
                    disabled={isAnimating || !insertValue}
                    className="w-full px-3 py-2 text-sm bg-purple-500 text-white rounded hover:bg-purple-600 disabled:opacity-50"
                  >
                    Th√™m cu·ªëi
                  </button>
                  <button
                    onClick={animateRemoveHead}
                    disabled={isAnimating}
                    className="w-full px-3 py-2 text-sm bg-red-500 text-white rounded hover:bg-red-600 disabled:opacity-50"
                  >
                    ‚ûñ X√≥a ƒë·∫ßu
                  </button>
                </div>
              </div>

              {/* Remove and Reset */}
              <div className="bg-white dark:bg-slate-800 p-4 rounded-lg border">
                <h5 className="font-medium text-red-600 dark:text-red-400 mb-2">üõ†Ô∏è ƒêi·ªÅu Khi·ªÉn</h5>
                <div className="space-y-2">
                  <button
                    onClick={animateRemoveTail}
                    disabled={isAnimating}
                    className="w-full px-3 py-2 text-sm bg-orange-500 text-white rounded hover:bg-orange-600 disabled:opacity-50"
                  >
                    ‚ûñ X√≥a cu·ªëi
                  </button>
                  <button
                    onClick={resetLinkedList}
                    disabled={isAnimating}
                    className="w-full px-3 py-2 text-sm bg-gray-500 text-white rounded hover:bg-gray-600 disabled:opacity-50"
                  >
                    üîÑ Reset
                  </button>
                </div>
              </div>
            </div>

            {/* Operation Explanations */}
            <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
              <div className="bg-green-50 dark:bg-green-900/20 p-3 rounded border border-green-200 dark:border-green-800">
                <strong className="text-green-700 dark:text-green-300">Th√™m v√†o ƒë·∫ßu O(1):</strong>
                <p className="text-gray-600 dark:text-gray-400 mt-1">
                  Ch·ªâ c·∫ßn t·∫°o node m·ªõi v√† c·∫≠p nh·∫≠t pointer HEAD, kh√¥ng ph·ª• thu·ªôc v√†o k√≠ch th∆∞·ªõc list.
                </p>
              </div>
              <div className="bg-blue-50 dark:bg-blue-900/20 p-3 rounded border border-blue-200 dark:border-blue-800">
                <strong className="text-blue-700 dark:text-blue-300">T√¨m ki·∫øm/Th√™m cu·ªëi O(n):</strong>
                <p className="text-gray-600 dark:text-gray-400 mt-1">
                  Ph·∫£i duy·ªát t·ª´ ƒë·∫ßu ƒë·∫øn cu·ªëi ƒë·ªÉ t√¨m v·ªã tr√≠ c·∫ßn thi·∫øt. Tr∆∞·ªùng h·ª£p x·∫•u nh·∫•t: n l·∫ßn duy·ªát.
                </p>
              </div>
            </div>
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">C·∫•u Tr√∫c Danh S√°ch Li√™n K·∫øt:</h4>
            <MermaidDiagram
              chart={`
                graph LR
                    subgraph "Danh S√°ch Li√™n K·∫øt ƒê∆°n"
                        HEAD["HEAD"] --> A
                        A["Node 1<br/>Data: 10<br/>Next: ‚Üí"] --> B["Node 2<br/>Data: 20<br/>Next: ‚Üí"]
                        B --> C["Node 3<br/>Data: 30<br/>Next: NULL"]
                        C --> NULL1[NULL]
                        style NULL1 fill:#ffcdd2
                    end

                    subgraph "C√°c Thao T√°c"
                        INSERT["Th√™m v√†o ƒë·∫ßu"] -.-> HEAD
                        DELETE["X√≥a node"] -.-> B
                        SEARCH["T√¨m ki·∫øm"] -.-> A
                    end
              `}
              className="mb-4"
            />
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">Danh S√°ch T∆∞∆°ng T√°c:</h4>
            <div className="flex gap-2 mb-3 flex-wrap">
              <input
                type="number"
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                placeholder="Nh·∫≠p s·ªë"
                className="px-3 py-2 border rounded dark:bg-slate-600 dark:border-slate-500"
              />
              <button
                onClick={addToHead}
                disabled={!wasmReady}
                className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 disabled:opacity-50"
              >
                ü¶Ä Th√™m v√†o ƒë·∫ßu
              </button>
              <button
                onClick={addToTail}
                disabled={!wasmReady}
                className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50"
              >
                ü¶Ä Th√™m v√†o cu·ªëi
              </button>
              <button
                onClick={removeHead}
                disabled={!wasmReady}
                className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 disabled:opacity-50"
              >
                ü¶Ä X√≥a ƒë·∫ßu
              </button>
              <button
                onClick={removeTail}
                disabled={!wasmReady}
                className="px-4 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 disabled:opacity-50"
              >
                ü¶Ä X√≥a cu·ªëi
              </button>
              <button
                onClick={clear}
                disabled={!wasmReady}
                className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 disabled:opacity-50"
              >
                üßπ X√≥a t·∫•t c·∫£
              </button>
            </div>

            {result && (
              <div className="mb-3 p-3 bg-orange-50 dark:bg-orange-900/20 rounded">
                <strong>K·∫øt qu·∫£:</strong> {result}
              </div>
            )}
            <div className="flex items-center gap-2 text-sm overflow-x-auto">
              {listDisplay.length === 0 ? (
                <div className="text-gray-500 italic">Danh s√°ch r·ªóng</div>
              ) : (
                <>
                  <div className="bg-orange-500 text-white px-2 py-1 rounded text-xs">ü¶Ä HEAD</div>
                  {listDisplay.map((value, index) => (
                    <div key={index} className="flex items-center gap-2">
                      <div className="border-2 border-orange-500 p-2 rounded bg-orange-50 dark:bg-orange-900">
                        <div className="text-xs text-gray-600 dark:text-gray-300">Data: {value}</div>
                        <div className="text-xs text-gray-600 dark:text-gray-300">
                          Next: {index < listDisplay.length - 1 ? "‚Üí" : "NULL"}
                        </div>
                      </div>
                      {index < listDisplay.length - 1 && <span className="text-orange-500">‚Üí</span>}
                    </div>
                  ))}
                  <span className="text-red-500">NULL</span>
                </>
              )}
            </div>
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-4">C√†i ƒê·∫∑t:</h4>

            {/* Language Tabs */}
            <div className="mb-4">
              <div className="border-b border-gray-200 dark:border-gray-600">
                <nav className="-mb-px flex space-x-8">
                  <button
                    onClick={() => setActiveLanguageTab("rust")}
                    className={`py-2 px-1 border-b-2 font-medium text-sm ${
                      activeLanguageTab === "rust"
                        ? "border-orange-500 text-orange-600 dark:text-orange-400"
                        : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300"
                    }`}
                  >
                    Rust
                  </button>
                  <button
                    onClick={() => setActiveLanguageTab("cpp")}
                    className={`py-2 px-1 border-b-2 font-medium text-sm ${
                      activeLanguageTab === "cpp"
                        ? "border-blue-500 text-blue-600 dark:text-blue-400"
                        : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300"
                    }`}
                  >
                    C++
                  </button>
                  <button
                    onClick={() => setActiveLanguageTab("python")}
                    className={`py-2 px-1 border-b-2 font-medium text-sm ${
                      activeLanguageTab === "python"
                        ? "border-green-500 text-green-600 dark:text-green-400"
                        : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300"
                    }`}
                  >
                    Python
                  </button>
                </nav>
              </div>
            </div>

            {/* Language-specific Code */}
            {activeLanguageTab === "rust" && (
              <RustCodeEditor
              code={`#[derive(Debug)]
struct Node<T> {
    data: T,
    next: Option<Box<Node<T>>>,
}

#[derive(Debug)]
struct LinkedList<T> {
    head: Option<Box<Node<T>>>,
    size: usize,
}

impl<T> LinkedList<T> {
    fn new() -> Self {
        LinkedList { head: None, size: 0 }
    }

    fn push_front(&mut self, data: T) {
        let new_node = Box::new(Node {
            data,
            next: self.head.take(),
        });
        self.head = Some(new_node);
        self.size += 1;
    }

    fn pop_front(&mut self) -> Option<T> {
        self.head.take().map(|node| {
            self.head = node.next;
            self.size -= 1;
            node.data
        })
    }

    fn push_back(&mut self, data: T) {
        let new_node = Box::new(Node {
            data,
            next: None,
        });

        if self.head.is_none() {
            self.head = Some(new_node);
        } else {
            let mut current = self.head.as_mut().unwrap();
            while current.next.is_some() {
                current = current.next.as_mut().unwrap();
            }
            current.next = Some(new_node);
        }
        self.size += 1;
    }

    fn display(&self) -> Vec<&T> {
        let mut result = Vec::new();
        let mut current = &self.head;

        while let Some(node) = current {
            result.push(&node.data);
            current = &node.next;
        }

        result
    }
}`}
                height="350px"
              />
            )}

            {activeLanguageTab === "cpp" && (
              <CppCodeEditor
                code={`#include <iostream>
#include <memory>

template<typename T>
class LinkedList {
private:
    struct Node {
        T data;
        std::unique_ptr<Node> next;

        Node(const T& value) : data(value), next(nullptr) {}
    };

    std::unique_ptr<Node> head;
    size_t size;

public:
    LinkedList() : head(nullptr), size(0) {}

    // Th√™m v√†o ƒë·∫ßu danh s√°ch
    void push_front(const T& data) {
        auto new_node = std::make_unique<Node>(data);
        new_node->next = std::move(head);
        head = std::move(new_node);
        size++;
    }

    // X√≥a ph·∫ßn t·ª≠ ƒë·∫ßu
    void pop_front() {
        if (head) {
            head = std::move(head->next);
            size--;
        }
    }

    // Th√™m v√†o cu·ªëi danh s√°ch
    void push_back(const T& data) {
        auto new_node = std::make_unique<Node>(data);

        if (!head) {
            head = std::move(new_node);
        } else {
            Node* current = head.get();
            while (current->next) {
                current = current->next.get();
            }
            current->next = std::move(new_node);
        }
        size++;
    }

    // Hi·ªÉn th·ªã danh s√°ch
    void display() const {
        Node* current = head.get();
        std::cout << "HEAD -> ";
        while (current) {
            std::cout << current->data << " -> ";
            current = current->next.get();
        }
        std::cout << "NULL" << std::endl;
    }

    bool empty() const { return head == nullptr; }
    size_t length() const { return size; }
};`}
                height="350px"
              />
            )}

            {activeLanguageTab === "python" && (
              <PythonCodeEditor
                code={`class Node:
    """Node class cho Linked List"""
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    """C√†i ƒë·∫∑t Linked List ƒë∆°n gi·∫£n"""

    def __init__(self):
        self.head = None
        self.size = 0

    def push_front(self, data):
        """Th√™m ph·∫ßn t·ª≠ v√†o ƒë·∫ßu danh s√°ch"""
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node
        self.size += 1

    def pop_front(self):
        """X√≥a v√† tr·∫£ v·ªÅ ph·∫ßn t·ª≠ ƒë·∫ßu"""
        if not self.head:
            return None

        data = self.head.data
        self.head = self.head.next
        self.size -= 1
        return data

    def push_back(self, data):
        """Th√™m ph·∫ßn t·ª≠ v√†o cu·ªëi danh s√°ch"""
        new_node = Node(data)

        if not self.head:
            self.head = new_node
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_node

        self.size += 1

    def pop_back(self):
        """X√≥a v√† tr·∫£ v·ªÅ ph·∫ßn t·ª≠ cu·ªëi"""
        if not self.head:
            return None

        if not self.head.next:
            data = self.head.data
            self.head = None
            self.size -= 1
            return data

        current = self.head
        while current.next.next:
            current = current.next

        data = current.next.data
        current.next = None
        self.size -= 1
        return data

    def display(self):
        """Hi·ªÉn th·ªã danh s√°ch"""
        result = []
        current = self.head

        while current:
            result.append(current.data)
            current = current.next

        return result

    def is_empty(self):
        return self.head is None

    def __len__(self):
        return self.size

# S·ª≠ d·ª•ng:
# ll = LinkedList()
# ll.push_front(1)
# ll.push_back(2)
# print(ll.display())  # [1, 2]`}
                height="350px"
              />
            )}
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">ƒê·ªô Ph·ª©c T·∫°p:</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
              <div>
                <strong>Truy c·∫≠p:</strong> O(n)
              </div>
              <div>
                <strong>T√¨m ki·∫øm:</strong> O(n)
              </div>
              <div>
                <strong>Th√™m v√†o ƒë·∫ßu:</strong> O(1)
              </div>
              <div>
                <strong>X√≥a ƒë·∫ßu:</strong> O(1)
              </div>
              <div>
                <strong>Th√™m v√†o gi·ªØa:</strong> O(n)
              </div>
              <div>
                <strong>X√≥a ·ªü gi·ªØa:</strong> O(n)
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}