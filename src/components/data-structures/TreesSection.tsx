"use client";

import { useState, useEffect } from "react";
import { TreePine } from "lucide-react";
import { MermaidDiagram } from "~/components/common/MermaidDiagram";
import { RustCodeEditor } from "~/components/common/RustCodeEditor";
import { initRustWasm } from "~/lib/rust-wasm-helper";

export function TreesSection() {
  const [rustBST, setRustBST] = useState<any>(null);
  const [wasmReady, setWasmReady] = useState(false);
  const [treeDisplay, setTreeDisplay] = useState<number[]>([]);
  const [inputValue, setInputValue] = useState("");
  const [searchValue, setSearchValue] = useState("");
  const [result, setResult] = useState("");
  const [wasm, setWasm] = useState<any>(null);

  // Initialize WASM
  useEffect(() => {
    async function init() {
      try {
        const wasmInstance = await initRustWasm();
        const newBST = wasmInstance.dataStructures.createBST();
        setRustBST(newBST);
        setWasm(wasmInstance);
        setWasmReady(true);
        setResult("‚úÖ Rust WASM Binary Search Tree ƒë√£ s·∫µn s√†ng!");
      } catch (error) {
        console.error("Failed to initialize WASM:", error);
        setResult("‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o Rust WASM");
      }
    }
    init();
  }, []);

  // Update display from Rust BST
  const updateDisplayFromRustBST = () => {
    if (rustBST) {
      try {
        const inorderArray = Array.from(rustBST.inorderTraversal()) as number[];
        setTreeDisplay(inorderArray);
      } catch (error) {
        console.error("Error updating display:", error);
      }
    }
  };

  const insertValue = () => {
    const value = parseInt(inputValue);
    if (!isNaN(value)) {
      if (wasmReady && rustBST) {
        try {
          rustBST.insert(value);
          const treeSize = rustBST.size();
          setResult(`ü¶Ä ƒê√£ th√™m ${value} v√†o c√¢y. K√≠ch th∆∞·ªõc: ${treeSize}`);
          updateDisplayFromRustBST();
          setInputValue("");
        } catch (error) {
          setResult("‚ùå Rust WASM insert failed: " + error);
        }
      } else {
        setResult("‚ùå WASM ch∆∞a s·∫µn s√†ng");
      }
    }
  };

  const searchInTree = () => {
    const value = parseInt(searchValue);
    if (!isNaN(value)) {
      if (wasmReady && rustBST) {
        try {
          const found = rustBST.search(value);
          if (found) {
            setResult(`ü¶Ä T√¨m th·∫•y ${value} trong c√¢y`);
          } else {
            setResult(`ü¶Ä Kh√¥ng t√¨m th·∫•y ${value} trong c√¢y`);
          }
        } catch (error) {
          setResult("‚ùå Rust WASM search failed: " + error);
        }
      } else {
        setResult("‚ùå WASM ch∆∞a s·∫µn s√†ng");
      }
    }
  };

  const removeValue = () => {
    const value = parseInt(searchValue);
    if (!isNaN(value)) {
      if (wasmReady && rustBST) {
        try {
          const removed = rustBST.remove(value);
          const treeSize = rustBST.size();
          if (removed) {
            setResult(`ü¶Ä ƒê√£ x√≥a ${value} kh·ªèi c√¢y. K√≠ch th∆∞·ªõc: ${treeSize}`);
          } else {
            setResult(`ü¶Ä Kh√¥ng t√¨m th·∫•y ${value} ƒë·ªÉ x√≥a`);
          }
          updateDisplayFromRustBST();
        } catch (error) {
          setResult("‚ùå Rust WASM remove failed: " + error);
        }
      } else {
        setResult("‚ùå WASM ch∆∞a s·∫µn s√†ng");
      }
    }
  };

  const clear = () => {
    if (wasmReady && rustBST) {
      try {
        rustBST.clear();
        setResult("ü¶Ä ƒê√£ x√≥a to√†n b·ªô c√¢y");
        updateDisplayFromRustBST();
      } catch (error) {
        setResult("‚ùå Rust WASM clear failed: " + error);
      }
    } else {
      setResult("‚ùå WASM ch∆∞a s·∫µn s√†ng");
    }
  };

  return (
    <div className="space-y-6">
      <div className="bg-white dark:bg-slate-800 rounded-lg p-6 border">
        <h3 className="text-xl font-semibold mb-4 flex items-center gap-2">
          <TreePine className="h-5 w-5" />
          ü¶Ä Rust WASM C√¢y T√¨m Ki·∫øm Nh·ªã Ph√¢n
        </h3>
        <p className="text-gray-600 dark:text-gray-300 mb-4">
          Demo t∆∞∆°ng t√°c C√¢y T√¨m Ki·∫øm Nh·ªã Ph√¢n s·ª≠ d·ª•ng Rust WASM. BST ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a l√† c·∫•u tr√∫c d·ªØ li·ªáu ph√¢n c·∫•p cho ph√©p t√¨m ki·∫øm, th√™m v√† x√≥a hi·ªáu qu·∫£ v·ªõi ƒë·ªô ph·ª©c t·∫°p O(log n).
        </p>

        <div className="space-y-4">
          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">C·∫•u Tr√∫c C√¢y Nh·ªã Ph√¢n:</h4>
            <MermaidDiagram
              chart={`
                graph TD
                    subgraph "C√¢y T√¨m Ki·∫øm Nh·ªã Ph√¢n"
                        A[50] --> B[30]
                        A --> C[70]
                        B --> D[20]
                        B --> E[40]
                        C --> F[60]
                        C --> G[80]
                        D --> D1[10]
                        D --> D2[25]
                        E --> E1[35]
                        E --> E2[45]

                        style A fill:#4CAF50,color:#fff
                        style B fill:#2196F3,color:#fff
                        style C fill:#2196F3,color:#fff
                        style D fill:#FF9800,color:#fff
                        style E fill:#FF9800,color:#fff
                        style F fill:#FF9800,color:#fff
                        style G fill:#FF9800,color:#fff
                    end

                    subgraph "Quy T·∫Øc BST"
                        ROOT["G·ªëc: 50"]
                        LEFT["Tr√°i ‚â§ Cha"]
                        RIGHT["Ph·∫£i ‚â• Cha"]
                        ROOT -.-> LEFT
                        ROOT -.-> RIGHT
                    end
              `}
              className="mb-4"
            />
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">C√¢y T∆∞∆°ng T√°c:</h4>
            <div className="flex gap-2 mb-3 flex-wrap">
              <input
                type="number"
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                placeholder="Nh·∫≠p s·ªë ƒë·ªÉ th√™m"
                className="px-3 py-2 border rounded dark:bg-slate-600 dark:border-slate-500"
              />
              <button
                onClick={insertValue}
                disabled={!wasmReady}
                className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 disabled:opacity-50"
              >
                ü¶Ä Th√™m
              </button>
              <input
                type="number"
                value={searchValue}
                onChange={(e) => setSearchValue(e.target.value)}
                placeholder="Nh·∫≠p s·ªë ƒë·ªÉ t√¨m/x√≥a"
                className="px-3 py-2 border rounded dark:bg-slate-600 dark:border-slate-500"
              />
              <button
                onClick={searchInTree}
                disabled={!wasmReady}
                className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50"
              >
                ü¶Ä T√¨m ki·∫øm
              </button>
              <button
                onClick={removeValue}
                disabled={!wasmReady}
                className="px-4 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 disabled:opacity-50"
              >
                ü¶Ä X√≥a
              </button>
              <button
                onClick={clear}
                disabled={!wasmReady}
                className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 disabled:opacity-50"
              >
                üßπ X√≥a h·∫øt
              </button>
            </div>

            {result && (
              <div className="mb-3 p-3 bg-orange-50 dark:bg-orange-900/20 rounded">
                <strong>K·∫øt qu·∫£:</strong> {result}
              </div>
            )}

            <div className="mb-3">
              <strong>ü¶Ä Duy·ªát theo th·ª© t·ª± (Inorder):</strong>
              <div className="flex gap-1 flex-wrap mt-1">
                {treeDisplay.length > 0 ? (
                  treeDisplay.map((value, index) => (
                    <span key={index} className="px-2 py-1 bg-orange-100 dark:bg-orange-900 rounded text-sm">
                      {value}
                    </span>
                  ))
                ) : (
                  <span className="text-gray-500 italic">C√¢y r·ªóng</span>
                )}
              </div>
            </div>
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">Thu·ªôc T√≠nh C√¢y T√¨m Ki·∫øm Nh·ªã Ph√¢n:</h4>
            <ul className="list-disc list-inside space-y-1 text-sm">
              <li>Gi√° tr·ªã con tr√°i ‚â§ Gi√° tr·ªã cha</li>
              <li>Gi√° tr·ªã con ph·∫£i ‚â• Gi√° tr·ªã cha</li>
              <li>C·∫£ c√¢y con tr√°i v√† ph·∫£i ƒë·ªÅu l√† BST</li>
              <li>Duy·ªát theo th·ª© t·ª± cho d√£y ƒë√£ s·∫Øp x·∫øp</li>
            </ul>
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">C√†i ƒê·∫∑t Rust:</h4>
            <RustCodeEditor
              code={`#[derive(Debug)]
struct TreeNode<T> {
    value: T,
    left: Option<Box<TreeNode<T>>>,
    right: Option<Box<TreeNode<T>>>,
}

#[derive(Debug)]
struct BinarySearchTree<T: Ord> {
    root: Option<Box<TreeNode<T>>>,
    size: usize,
}

impl<T: Ord> TreeNode<T> {
    fn new(value: T) -> Self {
        TreeNode {
            value,
            left: None,
            right: None,
        }
    }

    fn insert(&mut self, value: T) {
        if value <= self.value {
            match &mut self.left {
                Some(left) => left.insert(value),
                None => self.left = Some(Box::new(TreeNode::new(value))),
            }
        } else {
            match &mut self.right {
                Some(right) => right.insert(value),
                None => self.right = Some(Box::new(TreeNode::new(value))),
            }
        }
    }

    fn search(&self, value: &T) -> bool {
        match value.cmp(&self.value) {
            std::cmp::Ordering::Equal => true,
            std::cmp::Ordering::Less => {
                self.left.as_ref().map_or(false, |left| left.search(value))
            }
            std::cmp::Ordering::Greater => {
                self.right.as_ref().map_or(false, |right| right.search(value))
            }
        }
    }

    fn inorder_traversal(&self, result: &mut Vec<&T>) {
        if let Some(left) = &self.left {
            left.inorder_traversal(result);
        }
        result.push(&self.value);
        if let Some(right) = &self.right {
            right.inorder_traversal(result);
        }
    }

    fn find_min(&self) -> &T {
        match &self.left {
            Some(left) => left.find_min(),
            None => &self.value,
        }
    }
}

impl<T: Ord> BinarySearchTree<T> {
    fn new() -> Self {
        BinarySearchTree {
            root: None,
            size: 0,
        }
    }

    fn insert(&mut self, value: T) {
        match &mut self.root {
            Some(root) => root.insert(value),
            None => self.root = Some(Box::new(TreeNode::new(value))),
        }
        self.size += 1;
    }

    fn search(&self, value: &T) -> bool {
        match &self.root {
            Some(root) => root.search(value),
            None => false,
        }
    }
}`}
              height="400px"
            />
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">ƒê·ªô Ph·ª©c T·∫°p:</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
              <div>
                <strong>T√¨m ki·∫øm (c√¢n b·∫±ng):</strong> O(log n)
              </div>
              <div>
                <strong>T√¨m ki·∫øm (x·∫•u nh·∫•t):</strong> O(n)
              </div>
              <div>
                <strong>Th√™m (c√¢n b·∫±ng):</strong> O(log n)
              </div>
              <div>
                <strong>Th√™m (x·∫•u nh·∫•t):</strong> O(n)
              </div>
              <div>
                <strong>X√≥a (c√¢n b·∫±ng):</strong> O(log n)
              </div>
              <div>
                <strong>X√≥a (x·∫•u nh·∫•t):</strong> O(n)
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}