"use client";

import { useState, useEffect } from "react";
import { TreePine } from "lucide-react";
import { MermaidDiagram } from "~/components/common/MermaidDiagram";
import { RustCodeEditor } from "~/components/common/RustCodeEditor";
import { CppCodeEditor } from "~/components/common/CppCodeEditor";
import { PythonCodeEditor } from "~/components/common/PythonCodeEditor";
import { initRustWasm } from "~/lib/rust-wasm-helper";

export function TreesSection() {
  const [rustBST, setRustBST] = useState<any>(null);
  const [wasmReady, setWasmReady] = useState(false);
  const [treeDisplay, setTreeDisplay] = useState<number[]>([]);
  const [inputValue, setInputValue] = useState("");
  const [searchValue, setSearchValue] = useState("");
  const [result, setResult] = useState("");
  const [wasm, setWasm] = useState<any>(null);
  const [activeLanguageTab, setActiveLanguageTab] = useState("rust");

  // Initialize WASM
  useEffect(() => {
    async function init() {
      try {
        const wasmInstance = await initRustWasm();
        const newBST = wasmInstance.dataStructures.createBST();
        setRustBST(newBST);
        setWasm(wasmInstance);
        setWasmReady(true);
        setResult("‚úÖ Rust WASM Binary Search Tree ƒë√£ s·∫µn s√†ng!");
      } catch (error) {
        console.error("Failed to initialize WASM:", error);
        setResult("‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o Rust WASM");
      }
    }
    init();
  }, []);

  // Update display from Rust BST
  const updateDisplayFromRustBST = () => {
    if (rustBST) {
      try {
        const inorderArray = Array.from(rustBST.inorder_traversal()) as number[];
        setTreeDisplay(inorderArray);
      } catch (error) {
        console.error("Error updating display:", error);
      }
    }
  };

  const insertValue = () => {
    const value = parseInt(inputValue);
    if (!isNaN(value)) {
      if (wasmReady && rustBST) {
        try {
          rustBST.insert(value);
          const treeSize = rustBST.len();
          setResult(`ü¶Ä ƒê√£ th√™m ${value} v√†o c√¢y. K√≠ch th∆∞·ªõc: ${treeSize}`);
          updateDisplayFromRustBST();
          setInputValue("");
        } catch (error) {
          setResult("‚ùå Rust WASM insert failed: " + error);
        }
      } else {
        setResult("‚ùå WASM ch∆∞a s·∫µn s√†ng");
      }
    }
  };

  const searchInTree = () => {
    const value = parseInt(searchValue);
    if (!isNaN(value)) {
      if (wasmReady && rustBST) {
        try {
          const found = rustBST.search(value);
          if (found) {
            setResult(`ü¶Ä T√¨m th·∫•y ${value} trong c√¢y`);
          } else {
            setResult(`ü¶Ä Kh√¥ng t√¨m th·∫•y ${value} trong c√¢y`);
          }
        } catch (error) {
          setResult("‚ùå Rust WASM search failed: " + error);
        }
      } else {
        setResult("‚ùå WASM ch∆∞a s·∫µn s√†ng");
      }
    }
  };

  const removeValue = () => {
    const value = parseInt(searchValue);
    if (!isNaN(value)) {
      if (wasmReady && rustBST) {
        try {
          const removed = rustBST.remove(value);
          const treeSize = rustBST.len();
          if (removed) {
            setResult(`ü¶Ä ƒê√£ x√≥a ${value} kh·ªèi c√¢y. K√≠ch th∆∞·ªõc: ${treeSize}`);
          } else {
            setResult(`ü¶Ä Kh√¥ng t√¨m th·∫•y ${value} ƒë·ªÉ x√≥a`);
          }
          updateDisplayFromRustBST();
        } catch (error) {
          setResult("‚ùå Rust WASM remove failed: " + error);
        }
      } else {
        setResult("‚ùå WASM ch∆∞a s·∫µn s√†ng");
      }
    }
  };

  const clear = () => {
    if (wasmReady && rustBST) {
      try {
        rustBST.clear();
        setResult("ü¶Ä ƒê√£ x√≥a to√†n b·ªô c√¢y");
        updateDisplayFromRustBST();
      } catch (error) {
        setResult("‚ùå Rust WASM clear failed: " + error);
      }
    } else {
      setResult("‚ùå WASM ch∆∞a s·∫µn s√†ng");
    }
  };

  return (
    <div className="space-y-6">
      <div className="bg-white dark:bg-slate-800 rounded-lg p-6 border">
        <h3 className="text-xl font-semibold mb-4 flex items-center gap-2">
          <TreePine className="h-5 w-5" />
          ü¶Ä Rust WASM C√¢y T√¨m Ki·∫øm Nh·ªã Ph√¢n
        </h3>

        {/* ƒê·ªãnh nghƒ©a v√† gi·∫£i th√≠ch c∆° b·∫£n */}
        <div className="bg-green-50 dark:bg-green-900/20 p-4 rounded-lg mb-4 border-l-4 border-green-500">
          <h4 className="font-semibold text-green-800 dark:text-green-300 mb-2">üå≥ C√¢y l√† g√¨?</h4>
          <p className="text-gray-700 dark:text-gray-300 mb-3">
            <strong>C√¢y (Tree)</strong> l√† c·∫•u tr√∫c d·ªØ li·ªáu ph√¢n c·∫•p g·ªìm c√°c n√∫t (node) ƒë∆∞·ª£c k·∫øt n·ªëi b·ªüi c√°c c·∫°nh (edge).
            M·ªói c√¢y c√≥ m·ªôt n√∫t g·ªëc (root) v√† c√°c n√∫t con t·∫°o th√†nh c·∫•u tr√∫c ph√¢n nh√°nh.
          </p>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-3 text-sm">
            <div className="bg-white dark:bg-slate-800 p-3 rounded">
              <strong className="text-blue-600 dark:text-blue-400">üìù Thu·∫≠t ng·ªØ:</strong>
              <ul className="mt-1 text-gray-600 dark:text-gray-300">
                <li>‚Ä¢ Root: N√∫t g·ªëc</li>
                <li>‚Ä¢ Leaf: N√∫t l√°</li>
                <li>‚Ä¢ Parent/Child: Cha/Con</li>
                <li>‚Ä¢ Height: Chi·ªÅu cao</li>
              </ul>
            </div>
            <div className="bg-white dark:bg-slate-800 p-3 rounded">
              <strong className="text-green-600 dark:text-green-400">‚úÖ ∆Øu ƒëi·ªÉm:</strong>
              <ul className="mt-1 text-gray-600 dark:text-gray-300">
                <li>‚Ä¢ T√¨m ki·∫øm nhanh</li>
                <li>‚Ä¢ S·∫Øp x·∫øp t·ª± ƒë·ªông</li>
                <li>‚Ä¢ Duy·ªát c√≥ th·ª© t·ª±</li>
              </ul>
            </div>
            <div className="bg-white dark:bg-slate-800 p-3 rounded">
              <strong className="text-orange-600 dark:text-orange-400">‚ö†Ô∏è L∆∞u √Ω:</strong>
              <ul className="mt-1 text-gray-600 dark:text-gray-300">
                <li>‚Ä¢ C√≥ th·ªÉ m·∫•t c√¢n b·∫±ng</li>
                <li>‚Ä¢ T·ªën b·ªô nh·ªõ pointer</li>
                <li>‚Ä¢ Ph·ª©c t·∫°p h∆°n m·∫£ng</li>
              </ul>
            </div>
          </div>
        </div>

        <div className="bg-purple-50 dark:bg-purple-900/20 p-4 rounded-lg mb-4 border-l-4 border-purple-500">
          <h4 className="font-semibold text-purple-800 dark:text-purple-300 mb-2">üîç C√¢y T√¨m Ki·∫øm Nh·ªã Ph√¢n (BST)</h4>
          <p className="text-gray-700 dark:text-gray-300 mb-2">
            <strong>BST</strong> l√† c√¢y nh·ªã ph√¢n ƒë·∫∑c bi·ªát v·ªõi quy t·∫Øc:
            <span className="font-mono bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded mx-1">tr√°i &lt; g·ªëc &lt; ph·∫£i</span>
          </p>
          <div className="text-sm text-gray-600 dark:text-gray-400">
            M·ªói n√∫t c√≥ t·ªëi ƒëa 2 con: con tr√°i ch·ª©a gi√° tr·ªã nh·ªè h∆°n, con ph·∫£i ch·ª©a gi√° tr·ªã l·ªõn h∆°n n√∫t cha.
          </div>
        </div>

        <div className="space-y-4">
          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">C·∫•u Tr√∫c C√¢y Nh·ªã Ph√¢n:</h4>
            <MermaidDiagram
              chart={`
                graph TD
                    subgraph "C√¢y T√¨m Ki·∫øm Nh·ªã Ph√¢n"
                        A[50] --> B[30]
                        A --> C[70]
                        B --> D[20]
                        B --> E[40]
                        C --> F[60]
                        C --> G[80]
                        D --> D1[10]
                        D --> D2[25]
                        E --> E1[35]
                        E --> E2[45]

                        style A fill:#4CAF50,color:#fff
                        style B fill:#2196F3,color:#fff
                        style C fill:#2196F3,color:#fff
                        style D fill:#FF9800,color:#fff
                        style E fill:#FF9800,color:#fff
                        style F fill:#FF9800,color:#fff
                        style G fill:#FF9800,color:#fff
                    end

                    subgraph "Quy T·∫Øc BST"
                        ROOT["G·ªëc: 50"]
                        LEFT["Tr√°i ‚â§ Cha"]
                        RIGHT["Ph·∫£i ‚â• Cha"]
                        ROOT -.-> LEFT
                        ROOT -.-> RIGHT
                    end
              `}
              className="mb-4"
            />
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">C√¢y T∆∞∆°ng T√°c:</h4>
            <div className="flex gap-2 mb-3 flex-wrap">
              <input
                type="number"
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                placeholder="Nh·∫≠p s·ªë ƒë·ªÉ th√™m"
                className="px-3 py-2 border rounded dark:bg-slate-600 dark:border-slate-500"
              />
              <button
                onClick={insertValue}
                disabled={!wasmReady}
                className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 disabled:opacity-50"
              >
                ü¶Ä Th√™m
              </button>
              <input
                type="number"
                value={searchValue}
                onChange={(e) => setSearchValue(e.target.value)}
                placeholder="Nh·∫≠p s·ªë ƒë·ªÉ t√¨m/x√≥a"
                className="px-3 py-2 border rounded dark:bg-slate-600 dark:border-slate-500"
              />
              <button
                onClick={searchInTree}
                disabled={!wasmReady}
                className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50"
              >
                ü¶Ä T√¨m ki·∫øm
              </button>
              <button
                onClick={removeValue}
                disabled={!wasmReady}
                className="px-4 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 disabled:opacity-50"
              >
                ü¶Ä X√≥a
              </button>
              <button
                onClick={clear}
                disabled={!wasmReady}
                className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 disabled:opacity-50"
              >
                üßπ X√≥a h·∫øt
              </button>
            </div>

            {result && (
              <div className="mb-3 p-3 bg-orange-50 dark:bg-orange-900/20 rounded">
                <strong>K·∫øt qu·∫£:</strong> {result}
              </div>
            )}

            <div className="mb-3">
              <strong>ü¶Ä Duy·ªát theo th·ª© t·ª± (Inorder):</strong>
              <div className="flex gap-1 flex-wrap mt-1">
                {treeDisplay.length > 0 ? (
                  treeDisplay.map((value, index) => (
                    <span key={index} className="px-2 py-1 bg-orange-100 dark:bg-orange-900 rounded text-sm">
                      {value}
                    </span>
                  ))
                ) : (
                  <span className="text-gray-500 italic">C√¢y r·ªóng</span>
                )}
              </div>
            </div>
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">Thu·ªôc T√≠nh C√¢y T√¨m Ki·∫øm Nh·ªã Ph√¢n:</h4>
            <ul className="list-disc list-inside space-y-1 text-sm">
              <li>Gi√° tr·ªã con tr√°i ‚â§ Gi√° tr·ªã cha</li>
              <li>Gi√° tr·ªã con ph·∫£i ‚â• Gi√° tr·ªã cha</li>
              <li>C·∫£ c√¢y con tr√°i v√† ph·∫£i ƒë·ªÅu l√† BST</li>
              <li>Duy·ªát theo th·ª© t·ª± cho d√£y ƒë√£ s·∫Øp x·∫øp</li>
            </ul>
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-4">C√†i ƒê·∫∑t:</h4>

            {/* Language Tabs */}
            <div className="mb-4">
              <div className="border-b border-gray-200 dark:border-gray-600">
                <nav className="-mb-px flex space-x-8">
                  <button
                    onClick={() => setActiveLanguageTab("rust")}
                    className={`py-2 px-1 border-b-2 font-medium text-sm ${
                      activeLanguageTab === "rust"
                        ? "border-orange-500 text-orange-600 dark:text-orange-400"
                        : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300"
                    }`}
                  >
                    Rust
                  </button>
                  <button
                    onClick={() => setActiveLanguageTab("cpp")}
                    className={`py-2 px-1 border-b-2 font-medium text-sm ${
                      activeLanguageTab === "cpp"
                        ? "border-blue-500 text-blue-600 dark:text-blue-400"
                        : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300"
                    }`}
                  >
                    C++
                  </button>
                  <button
                    onClick={() => setActiveLanguageTab("python")}
                    className={`py-2 px-1 border-b-2 font-medium text-sm ${
                      activeLanguageTab === "python"
                        ? "border-green-500 text-green-600 dark:text-green-400"
                        : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300"
                    }`}
                  >
                    Python
                  </button>
                </nav>
              </div>
            </div>

            {/* Language-specific Code */}
            {activeLanguageTab === "rust" && (
              <RustCodeEditor
                code={`#[derive(Debug)]
struct TreeNode<T> {
    value: T,
    left: Option<Box<TreeNode<T>>>,
    right: Option<Box<TreeNode<T>>>,
}

#[derive(Debug)]
struct BinarySearchTree<T: Ord> {
    root: Option<Box<TreeNode<T>>>,
    size: usize,
}

impl<T: Ord> TreeNode<T> {
    fn new(value: T) -> Self {
        TreeNode {
            value,
            left: None,
            right: None,
        }
    }

    fn insert(&mut self, value: T) {
        if value <= self.value {
            match &mut self.left {
                Some(left) => left.insert(value),
                None => self.left = Some(Box::new(TreeNode::new(value))),
            }
        } else {
            match &mut self.right {
                Some(right) => right.insert(value),
                None => self.right = Some(Box::new(TreeNode::new(value))),
            }
        }
    }

    fn search(&self, value: &T) -> bool {
        match value.cmp(&self.value) {
            std::cmp::Ordering::Equal => true,
            std::cmp::Ordering::Less => {
                self.left.as_ref().map_or(false, |left| left.search(value))
            }
            std::cmp::Ordering::Greater => {
                self.right.as_ref().map_or(false, |right| right.search(value))
            }
        }
    }

    fn inorder_traversal(&self, result: &mut Vec<&T>) {
        if let Some(left) = &self.left {
            left.inorder_traversal(result);
        }
        result.push(&self.value);
        if let Some(right) = &self.right {
            right.inorder_traversal(result);
        }
    }
}`}
                height="400px"
              />
            )}

            {activeLanguageTab === "cpp" && (
              <CppCodeEditor
                code={`#include <memory>
#include <iostream>
#include <vector>

template<typename T>
struct TreeNode {
    T value;
    std::unique_ptr<TreeNode<T>> left;
    std::unique_ptr<TreeNode<T>> right;

    TreeNode(T val) : value(val), left(nullptr), right(nullptr) {}
};

template<typename T>
class BinarySearchTree {
private:
    std::unique_ptr<TreeNode<T>> root;
    size_t size;

    void insertHelper(std::unique_ptr<TreeNode<T>>& node, T value) {
        if (!node) {
            node = std::make_unique<TreeNode<T>>(value);
            return;
        }

        if (value <= node->value) {
            insertHelper(node->left, value);
        } else {
            insertHelper(node->right, value);
        }
    }

    bool searchHelper(const std::unique_ptr<TreeNode<T>>& node, T value) const {
        if (!node) return false;

        if (value == node->value) return true;
        else if (value < node->value) return searchHelper(node->left, value);
        else return searchHelper(node->right, value);
    }

    void inorderHelper(const std::unique_ptr<TreeNode<T>>& node, std::vector<T>& result) const {
        if (!node) return;

        inorderHelper(node->left, result);
        result.push_back(node->value);
        inorderHelper(node->right, result);
    }

public:
    BinarySearchTree() : root(nullptr), size(0) {}

    void insert(T value) {
        insertHelper(root, value);
        size++;
    }

    bool search(T value) const {
        return searchHelper(root, value);
    }

    std::vector<T> inorderTraversal() const {
        std::vector<T> result;
        inorderHelper(root, result);
        return result;
    }

    size_t getSize() const { return size; }
};`}
                height="400px"
              />
            )}

            {activeLanguageTab === "python" && (
              <PythonCodeEditor
                code={`class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

class BinarySearchTree:
    def __init__(self):
        self.root = None
        self.size = 0

    def insert(self, value):
        """Th√™m gi√° tr·ªã v√†o c√¢y"""
        if self.root is None:
            self.root = TreeNode(value)
        else:
            self._insert_helper(self.root, value)
        self.size += 1

    def _insert_helper(self, node, value):
        if value <= node.value:
            if node.left is None:
                node.left = TreeNode(value)
            else:
                self._insert_helper(node.left, value)
        else:
            if node.right is None:
                node.right = TreeNode(value)
            else:
                self._insert_helper(node.right, value)

    def search(self, value):
        """T√¨m ki·∫øm gi√° tr·ªã trong c√¢y"""
        return self._search_helper(self.root, value)

    def _search_helper(self, node, value):
        if node is None:
            return False

        if value == node.value:
            return True
        elif value < node.value:
            return self._search_helper(node.left, value)
        else:
            return self._search_helper(node.right, value)

    def inorder_traversal(self):
        """Duy·ªát c√¢y theo th·ª© t·ª± (in-order)"""
        result = []
        self._inorder_helper(self.root, result)
        return result

    def _inorder_helper(self, node, result):
        if node is not None:
            self._inorder_helper(node.left, result)
            result.append(node.value)
            self._inorder_helper(node.right, result)

    def remove(self, value):
        """X√≥a gi√° tr·ªã kh·ªèi c√¢y"""
        self.root, removed = self._remove_helper(self.root, value)
        if removed:
            self.size -= 1
        return removed

    def _remove_helper(self, node, value):
        if node is None:
            return None, False

        if value < node.value:
            node.left, removed = self._remove_helper(node.left, value)
            return node, removed
        elif value > node.value:
            node.right, removed = self._remove_helper(node.right, value)
            return node, removed
        else:
            # T√¨m th·∫•y node c·∫ßn x√≥a
            if node.left is None:
                return node.right, True
            elif node.right is None:
                return node.left, True
            else:
                # Node c√≥ 2 con
                min_node = self._find_min(node.right)
                node.value = min_node.value
                node.right, _ = self._remove_helper(node.right, min_node.value)
                return node, True

    def _find_min(self, node):
        while node.left is not None:
            node = node.left
        return node

    def get_size(self):
        return self.size

    def is_empty(self):
        return self.size == 0`}
                height="400px"
              />
            )}
          </div>

          <div className="bg-gray-50 dark:bg-slate-700 p-4 rounded border">
            <h4 className="font-medium mb-2">ƒê·ªô Ph·ª©c T·∫°p:</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
              <div>
                <strong>T√¨m ki·∫øm (c√¢n b·∫±ng):</strong> O(log n)
              </div>
              <div>
                <strong>T√¨m ki·∫øm (x·∫•u nh·∫•t):</strong> O(n)
              </div>
              <div>
                <strong>Th√™m (c√¢n b·∫±ng):</strong> O(log n)
              </div>
              <div>
                <strong>Th√™m (x·∫•u nh·∫•t):</strong> O(n)
              </div>
              <div>
                <strong>X√≥a (c√¢n b·∫±ng):</strong> O(log n)
              </div>
              <div>
                <strong>X√≥a (x·∫•u nh·∫•t):</strong> O(n)
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}