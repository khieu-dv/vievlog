/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export const main: () => void;
export const bevy_process_image: (a: number, b: number, c: number, d: number, e: number) => [number, number];
export const bevy_process_image_multi: (a: number, b: number, c: number, d: number) => [number, number];
export const bevy_create_animated_effect: (a: number, b: number, c: number, d: number, e: number, f: number) => any;
export const bevy_get_effect_presets: () => any;
export const bevy_apply_preset: (a: number, b: number, c: number, d: number) => [number, number];
export const bevy_process_rgba_image: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => [number, number];
export const bevy_resize_image: (a: number, b: number, c: number, d: number, e: number, f: number) => [number, number];
export const dijkstra_shortest_path: (a: any, b: any, c: number, d: number) => any;
export const bfs_graph_traversal: (a: any, b: number) => any;
export const dfs_graph_traversal: (a: any, b: number) => any;
export const topological_sort: (a: any, b: any) => any;
export const has_cycle_directed: (a: any, b: any) => number;
export const strongly_connected_components: (a: any, b: any) => any;
export const minimum_spanning_tree_kruskal: (a: any, b: any) => any;
export const __wbg_linkedlist_free: (a: number, b: number) => void;
export const linkedlist_push_front: (a: number, b: number) => void;
export const linkedlist_push_back: (a: number, b: number) => void;
export const linkedlist_pop_front: (a: number) => number;
export const linkedlist_pop_back: (a: number) => number;
export const linkedlist_get: (a: number, b: number) => number;
export const linkedlist_insert: (a: number, b: number, c: number) => number;
export const linkedlist_remove: (a: number, b: number) => number;
export const linkedlist_contains: (a: number, b: number) => number;
export const linkedlist_index_of: (a: number, b: number) => number;
export const linkedlist_len: (a: number) => number;
export const linkedlist_is_empty: (a: number) => number;
export const linkedlist_clear: (a: number) => void;
export const linkedlist_reverse: (a: number) => void;
export const linkedlist_to_array: (a: number) => any;
export const linkedlist_from_array: (a: any) => number;
export const __wbg_doublylinkedlist_free: (a: number, b: number) => void;
export const doublylinkedlist_new: () => number;
export const doublylinkedlist_push_front: (a: number, b: number) => void;
export const doublylinkedlist_push_back: (a: number, b: number) => void;
export const doublylinkedlist_pop_front: (a: number) => number;
export const doublylinkedlist_len: (a: number) => number;
export const doublylinkedlist_is_empty: (a: number) => number;
export const doublylinkedlist_to_array: (a: number) => any;
export const __wbg_binaryheap_free: (a: number, b: number) => void;
export const binaryheap_new: (a: number) => number;
export const binaryheap_with_capacity: (a: number, b: number) => number;
export const binaryheap_insert: (a: number, b: number) => void;
export const binaryheap_extract: (a: number) => number;
export const binaryheap_peek: (a: number) => number;
export const binaryheap_is_empty: (a: number) => number;
export const binaryheap_len: (a: number) => number;
export const binaryheap_capacity: (a: number) => number;
export const binaryheap_clear: (a: number) => void;
export const binaryheap_is_max_heap: (a: number) => number;
export const binaryheap_change_heap_type: (a: number, b: number) => void;
export const binaryheap_build_heap: (a: number, b: number, c: number) => void;
export const binaryheap_to_array: (a: number) => any;
export const binaryheap_from_array: (a: any, b: number) => number;
export const binaryheap_is_valid_heap: (a: number) => number;
export const binaryheap_get_parent: (a: number, b: number) => number;
export const binaryheap_get_left_child: (a: number, b: number) => number;
export const binaryheap_get_right_child: (a: number, b: number) => number;
export const binaryheap_height: (a: number) => number;
export const heap_sort_heaps: (a: number, b: number) => any;
export const priorityqueueheap_peek: (a: number) => number;
export const priorityqueueheap_is_empty: (a: number) => number;
export const priorityqueueheap_len: (a: number) => number;
export const priorityqueueheap_to_array: (a: number) => any;
export const __wbg_medianfinder_free: (a: number, b: number) => void;
export const medianfinder_new: () => number;
export const medianfinder_add_number: (a: number, b: number) => void;
export const medianfinder_find_median: (a: number) => number;
export const medianfinder_len: (a: number) => number;
export const medianfinder_is_empty: (a: number) => number;
export const find_k_largest: (a: number, b: number, c: number) => any;
export const find_k_smallest: (a: number, b: number, c: number) => any;
export const is_heap: (a: number, b: number, c: number) => number;
export const merge_k_sorted_arrays: (a: any) => any;
export const benchmark_heap_operations: (a: number, b: number, c: number, d: number) => number;
export const stack_with_capacity: (a: number) => number;
export const stack_push: (a: number, b: number) => void;
export const stack_peek: (a: number) => number;
export const stack_from_array: (a: any) => number;
export const __wbg_stringstack_free: (a: number, b: number) => void;
export const stringstack_push: (a: number, b: number, c: number) => void;
export const stringstack_pop: (a: number) => [number, number];
export const stringstack_peek: (a: number) => [number, number];
export const stringstack_is_empty: (a: number) => number;
export const stringstack_len: (a: number) => number;
export const stringstack_clear: (a: number) => void;
export const stringstack_to_array: (a: number) => any;
export const __wbg_minstack_free: (a: number, b: number) => void;
export const minstack_new: () => number;
export const minstack_push: (a: number, b: number) => void;
export const minstack_pop: (a: number) => number;
export const minstack_peek: (a: number) => number;
export const minstack_get_min: (a: number) => number;
export const minstack_is_empty: (a: number) => number;
export const minstack_len: (a: number) => number;
export const minstack_to_array: (a: number) => any;
export const is_balanced_parentheses: (a: number, b: number) => number;
export const evaluate_postfix: (a: number, b: number) => [number, number, number];
export const infix_to_postfix: (a: number, b: number) => [number, number];
export const reverse_string: (a: number, b: number) => [number, number];
export const is_palindrome_stack: (a: number, b: number) => number;
export const next_greater_elements: (a: number, b: number) => any;
export const calculate_stock_spans: (a: number, b: number) => any;
export const largest_rectangle_area: (a: number, b: number) => number;
export const benchmark_stack_operations: (a: number, b: number, c: number) => number;
export const __wbg_hashtable_free: (a: number, b: number) => void;
export const hashtable_new: (a: number) => number;
export const hashtable_insert: (a: number, b: number, c: number, d: number, e: number) => number;
export const hashtable_get: (a: number, b: number, c: number) => [number, number];
export const hashtable_remove: (a: number, b: number, c: number) => [number, number];
export const hashtable_contains_key: (a: number, b: number, c: number) => number;
export const hashtable_len: (a: number) => number;
export const hashtable_capacity: (a: number) => number;
export const hashtable_is_empty: (a: number) => number;
export const hashtable_clear: (a: number) => void;
export const hashtable_load_factor: (a: number) => number;
export const hashtable_keys: (a: number) => any;
export const hashtable_values: (a: number) => any;
export const hashtable_entries: (a: number) => any;
export const hashtable_bucket_sizes: (a: number) => any;
export const hashtable_max_bucket_size: (a: number) => number;
export const __wbg_simplehashmap_free: (a: number, b: number) => void;
export const simplehashmap_insert: (a: number, b: number, c: number, d: number, e: number) => [number, number];
export const simplehashmap_get: (a: number, b: number, c: number) => [number, number];
export const simplehashmap_remove: (a: number, b: number, c: number) => [number, number];
export const simplehashmap_contains_key: (a: number, b: number, c: number) => number;
export const simplehashmap_len: (a: number) => number;
export const simplehashmap_is_empty: (a: number) => number;
export const simplehashmap_clear: (a: number) => void;
export const simplehashmap_keys: (a: number) => any;
export const simplehashmap_values: (a: number) => any;
export const simplehashmap_entries: (a: number) => any;
export const __wbg_inthashmap_free: (a: number, b: number) => void;
export const inthashmap_new: () => number;
export const inthashmap_insert: (a: number, b: number, c: number) => number;
export const inthashmap_get: (a: number, b: number) => number;
export const inthashmap_remove: (a: number, b: number) => number;
export const inthashmap_contains_key: (a: number, b: number) => number;
export const inthashmap_len: (a: number) => number;
export const inthashmap_is_empty: (a: number) => number;
export const inthashmap_clear: (a: number) => void;
export const inthashmap_keys: (a: number) => any;
export const inthashmap_values: (a: number) => any;
export const inthashmap_entries: (a: number) => any;
export const inthashmap_from_arrays: (a: any, b: any) => number;
export const hash_string: (a: number, b: number) => bigint;
export const hash_string_with_modulo: (a: number, b: number, c: number) => number;
export const simple_hash: (a: number, b: number, c: number) => number;
export const benchmark_hash_operations: (a: number, b: number, c: number) => number;
export const __wbg_treenode_free: (a: number, b: number) => void;
export const treenode_new: (a: number) => number;
export const treenode_get_value: (a: number) => number;
export const treenode_set_value: (a: number, b: number) => void;
export const __wbg_binarysearchtree_free: (a: number, b: number) => void;
export const binarysearchtree_insert: (a: number, b: number) => void;
export const binarysearchtree_search: (a: number, b: number) => number;
export const binarysearchtree_remove: (a: number, b: number) => number;
export const binarysearchtree_find_min: (a: number) => number;
export const binarysearchtree_find_max: (a: number) => number;
export const binarysearchtree_height: (a: number) => number;
export const binarysearchtree_len: (a: number) => number;
export const binarysearchtree_is_empty: (a: number) => number;
export const binarysearchtree_clear: (a: number) => void;
export const binarysearchtree_inorder_traversal: (a: number) => any;
export const binarysearchtree_preorder_traversal: (a: number) => any;
export const binarysearchtree_postorder_traversal: (a: number) => any;
export const binarysearchtree_level_order_traversal: (a: number) => any;
export const binarysearchtree_is_valid_bst: (a: number) => number;
export const binarysearchtree_from_array: (a: any) => number;
export const __wbg_avltree_free: (a: number, b: number) => void;
export const avltree_new: () => number;
export const avltree_insert: (a: number, b: number) => void;
export const avltree_search: (a: number, b: number) => number;
export const avltree_len: (a: number) => number;
export const avltree_height: (a: number) => number;
export const avltree_inorder_traversal: (a: number) => any;
export const fibonacci_memo: (a: number) => bigint;
export const knapsack_01: (a: any, b: any, c: number) => any;
export const longest_common_subsequence: (a: number, b: number, c: number, d: number) => any;
export const coin_change_min: (a: any, b: number) => any;
export const edit_distance: (a: number, b: number, c: number, d: number) => number;
export const longest_increasing_subsequence: (a: any) => any;
export const maximum_subarray_sum: (a: any) => any;
export const house_robber: (a: any) => number;
export const climbing_stairs: (a: number) => bigint;
export const unique_paths: (a: number, b: number) => bigint;
export const word_break: (a: number, b: number, c: any) => number;
export const min_palindrome_cuts: (a: number, b: number) => number;
export const matrix_chain_multiplication: (a: any) => number;
export const bevy_generate_ken_burns: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => any;
export const bevy_generate_transition: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => any;
export const bevy_generate_slideshow: (a: any, b: number, c: number, d: number, e: number) => any;
export const bevy_generate_parallax: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => any;
export const bubble_sort: (a: number, b: number) => any;
export const bubble_sort_with_steps: (a: number, b: number) => any;
export const selection_sort: (a: number, b: number) => any;
export const insertion_sort: (a: number, b: number) => any;
export const quick_sort: (a: number, b: number) => any;
export const merge_sort: (a: number, b: number) => any;
export const heap_sort: (a: number, b: number) => any;
export const counting_sort: (a: number, b: number) => any;
export const radix_sort: (a: number, b: number) => any;
export const bucket_sort: (a: number, b: number, c: number) => any;
export const shell_sort: (a: number, b: number) => any;
export const cocktail_sort: (a: number, b: number) => any;
export const is_sorted: (a: number, b: number) => number;
export const generate_random_array: (a: number, b: number) => any;
export const generate_sorted_array: (a: number) => any;
export const generate_reverse_sorted_array: (a: number) => any;
export const generate_nearly_sorted_array: (a: number, b: number) => any;
export const benchmark_sort: (a: number, b: number, c: number, d: number) => number;
export const compare_sorting_algorithms: (a: number, b: number) => any;
export const queue_with_capacity: (a: number) => number;
export const queue_enqueue: (a: number, b: number) => void;
export const queue_contains: (a: number, b: number) => number;
export const queue_from_array: (a: any) => number;
export const __wbg_circularqueue_free: (a: number, b: number) => void;
export const circularqueue_new: (a: number) => number;
export const circularqueue_enqueue: (a: number, b: number) => number;
export const circularqueue_dequeue: (a: number) => number;
export const circularqueue_front: (a: number) => number;
export const circularqueue_rear: (a: number) => number;
export const circularqueue_is_empty: (a: number) => number;
export const circularqueue_is_full: (a: number) => number;
export const circularqueue_len: (a: number) => number;
export const circularqueue_capacity: (a: number) => number;
export const circularqueue_clear: (a: number) => void;
export const circularqueue_get_front_index: (a: number) => number;
export const circularqueue_get_rear_index: (a: number) => number;
export const circularqueue_to_array: (a: number) => any;
export const circularqueue_get_raw_data: (a: number) => any;
export const __wbg_priorityqueue_free: (a: number, b: number) => void;
export const priorityqueue_new: () => number;
export const priorityqueue_enqueue: (a: number, b: number, c: number) => void;
export const priorityqueue_dequeue: (a: number) => number;
export const priorityqueue_peek: (a: number) => number;
export const priorityqueue_peek_priority: (a: number) => number;
export const priorityqueue_is_empty: (a: number) => number;
export const priorityqueue_len: (a: number) => number;
export const priorityqueue_clear: (a: number) => void;
export const priorityqueue_to_array: (a: number) => any;
export const deque_new: () => number;
export const deque_push_front: (a: number, b: number) => void;
export const deque_push_back: (a: number, b: number) => void;
export const deque_pop_front: (a: number) => number;
export const deque_pop_back: (a: number) => number;
export const deque_front: (a: number) => number;
export const deque_back: (a: number) => number;
export const deque_is_empty: (a: number) => number;
export const deque_len: (a: number) => number;
export const deque_clear: (a: number) => void;
export const deque_to_array: (a: number) => any;
export const bfs_traversal: (a: any, b: number) => any;
export const level_order_traversal: (a: any) => any;
export const sliding_window_maximum: (a: number, b: number, c: number) => any;
export const first_negative_in_window: (a: number, b: number, c: number) => any;
export const queueusingstacks_enqueue: (a: number, b: number) => void;
export const queueusingstacks_dequeue: (a: number) => number;
export const queueusingstacks_front: (a: number) => number;
export const queueusingstacks_is_empty: (a: number) => number;
export const queueusingstacks_len: (a: number) => number;
export const benchmark_queue_operations: (a: number, b: number, c: number) => number;
export const __wbg_rustvector_free: (a: number, b: number) => void;
export const rustvector_with_capacity: (a: number) => number;
export const rustvector_push: (a: number, b: number) => void;
export const rustvector_pop: (a: number) => number;
export const rustvector_get: (a: number, b: number) => number;
export const rustvector_set: (a: number, b: number, c: number) => number;
export const rustvector_insert: (a: number, b: number, c: number) => number;
export const rustvector_remove: (a: number, b: number) => number;
export const rustvector_len: (a: number) => number;
export const rustvector_capacity: (a: number) => number;
export const rustvector_is_empty: (a: number) => number;
export const rustvector_clear: (a: number) => void;
export const rustvector_reverse: (a: number) => void;
export const rustvector_to_array: (a: number) => any;
export const rustvector_from_array: (a: any) => number;
export const rustvector_contains: (a: number, b: number) => number;
export const rustvector_index_of: (a: number, b: number) => number;
export const rustvector_extend: (a: number, b: number) => void;
export const rustvector_clone_vector: (a: number) => number;
export const staticarray_new: (a: number) => number;
export const staticarray_get: (a: number, b: number) => number;
export const staticarray_set: (a: number, b: number, c: number) => number;
export const staticarray_len: (a: number) => number;
export const staticarray_fill: (a: number, b: number) => void;
export const staticarray_to_array: (a: number) => any;
export const array_sum: (a: number, b: number) => number;
export const array_max: (a: number, b: number) => number;
export const array_min: (a: number, b: number) => number;
export const array_reverse: (a: number, b: number) => any;
export const array_slice: (a: number, b: number, c: number, d: number) => any;
export const linear_search: (a: number, b: number, c: number) => number;
export const linear_search_with_steps: (a: number, b: number, c: number) => any;
export const binary_search: (a: number, b: number, c: number) => number;
export const binary_search_with_steps: (a: number, b: number, c: number) => any;
export const interpolation_search: (a: number, b: number, c: number) => number;
export const jump_search: (a: number, b: number, c: number) => number;
export const exponential_search: (a: number, b: number, c: number) => number;
export const ternary_search: (a: number, b: number, c: number) => number;
export const fibonacci_search: (a: number, b: number, c: number) => number;
export const find_first_occurrence: (a: number, b: number, c: number) => number;
export const find_last_occurrence: (a: number, b: number, c: number) => number;
export const count_occurrences: (a: number, b: number, c: number) => number;
export const find_peak_element: (a: number, b: number) => number;
export const search_rotated_array: (a: number, b: number, c: number) => number;
export const find_min_rotated_array: (a: number, b: number) => number;
export const search_2d_matrix: (a: any, b: number) => any;
export const benchmark_search: (a: number, b: number, c: number, d: number, e: number) => number;
export const compare_search_algorithms: (a: number, b: number, c: number) => any;
export const generate_search_test_array: (a: number, b: number) => any;
export const __wbg_graph_free: (a: number, b: number) => void;
export const graph_new: (a: number) => number;
export const graph_add_vertex: (a: number, b: number) => void;
export const graph_add_edge: (a: number, b: number, c: number) => void;
export const graph_remove_vertex: (a: number, b: number) => number;
export const graph_remove_edge: (a: number, b: number, c: number) => number;
export const graph_has_vertex: (a: number, b: number) => number;
export const graph_has_edge: (a: number, b: number, c: number) => number;
export const graph_get_neighbors: (a: number, b: number) => any;
export const graph_get_vertices: (a: number) => any;
export const graph_vertex_count: (a: number) => number;
export const graph_edge_count: (a: number) => number;
export const graph_degree: (a: number, b: number) => number;
export const graph_dfs_traversal: (a: number, b: number) => any;
export const graph_bfs_traversal: (a: number, b: number) => any;
export const graph_has_path: (a: number, b: number, c: number) => number;
export const graph_shortest_path: (a: number, b: number, c: number) => any;
export const graph_is_connected: (a: number) => number;
export const graph_has_cycle: (a: number) => number;
export const graph_topological_sort: (a: number) => any;
export const __wbg_weightedgraph_free: (a: number, b: number) => void;
export const weightedgraph_add_vertex: (a: number, b: number) => void;
export const weightedgraph_add_edge: (a: number, b: number, c: number, d: number) => void;
export const weightedgraph_dijkstra: (a: number, b: number) => any;
export const weightedgraph_shortest_path_with_weights: (a: number, b: number, c: number) => any;
export const weightedgraph_get_vertices: (a: number) => any;
export const weightedgraph_get_edges: (a: number) => any;
export const bevy_get_all_presets: () => any;
export const bevy_get_preset_config: (a: number, b: number) => [number, number];
export const bevy_apply_cinematic_preset: (a: number, b: number, c: number, d: number, e: number) => [number, number];
export const bevy_suggest_effects: (a: number, b: number, c: number, d: number) => any;
export const bevy_create_preset_previews: (a: number, b: number, c: number, d: number) => any;
export const bevy_batch_process_preset: (a: any, b: number, c: number, d: number) => any;
export const bevy_animate_preset: (a: number, b: number, c: number, d: number, e: number, f: number) => any;
export const bevy_get_performance_metrics: () => any;
export const linkedlist_new: () => number;
export const binarysearchtree_new: () => number;
export const weightedgraph_new: (a: number) => number;
export const queue_new: () => number;
export const stringstack_new: () => number;
export const stack_new: () => number;
export const rustvector_new: () => number;
export const __wbg_queueusingstacks_free: (a: number, b: number) => void;
export const queue_clear: (a: number) => void;
export const __wbg_priorityqueueheap_free: (a: number, b: number) => void;
export const __wbg_queue_free: (a: number, b: number) => void;
export const __wbg_stack_free: (a: number, b: number) => void;
export const __wbg_staticarray_free: (a: number, b: number) => void;
export const stack_pop: (a: number) => number;
export const queueusingstacks_new: () => number;
export const priorityqueueheap_new: (a: number) => number;
export const priorityqueueheap_dequeue: (a: number) => number;
export const queue_dequeue: (a: number) => number;
export const simplehashmap_new: () => number;
export const is_sorted_for_search: (a: number, b: number) => number;
export const stack_capacity: (a: number) => number;
export const priorityqueueheap_enqueue: (a: number, b: number) => void;
export const stack_clear: (a: number) => void;
export const queue_to_array: (a: number) => any;
export const queue_len: (a: number) => number;
export const queue_is_empty: (a: number) => number;
export const queue_back: (a: number) => number;
export const queue_front: (a: number) => number;
export const stack_to_array: (a: number) => any;
export const stack_is_empty: (a: number) => number;
export const stack_len: (a: number) => number;
export const stack_contains: (a: number, b: number) => number;
export const stack_clone_stack: (a: number) => number;
export const __wbg_deque_free: (a: number, b: number) => void;
export const queue_capacity: (a: number) => number;
export const __wbindgen_exn_store: (a: number) => void;
export const __externref_table_alloc: () => number;
export const __wbindgen_export_2: WebAssembly.Table;
export const __wbindgen_free: (a: number, b: number, c: number) => void;
export const __wbindgen_malloc: (a: number, b: number) => number;
export const __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
export const __wbindgen_export_6: WebAssembly.Table;
export const __externref_table_dealloc: (a: number) => void;
export const wasm_bindgen__convert__closures_____invoke__h357b077c0154e0d6: (a: number, b: number) => void;
export const __wbindgen_start: () => void;
